// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: File.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_File_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_File_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_File_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_File_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_File_2eproto;
namespace Global {
namespace Protocol {
namespace File {
class CloseFile;
struct CloseFileDefaultTypeInternal;
extern CloseFileDefaultTypeInternal _CloseFile_default_instance_;
class EntryInfo;
struct EntryInfoDefaultTypeInternal;
extern EntryInfoDefaultTypeInternal _EntryInfo_default_instance_;
class RequestDeleteEntry;
struct RequestDeleteEntryDefaultTypeInternal;
extern RequestDeleteEntryDefaultTypeInternal _RequestDeleteEntry_default_instance_;
class RequestGoHome;
struct RequestGoHomeDefaultTypeInternal;
extern RequestGoHomeDefaultTypeInternal _RequestGoHome_default_instance_;
class RequestGoUp;
struct RequestGoUpDefaultTypeInternal;
extern RequestGoUpDefaultTypeInternal _RequestGoUp_default_instance_;
class RequestListEntries;
struct RequestListEntriesDefaultTypeInternal;
extern RequestListEntriesDefaultTypeInternal _RequestListEntries_default_instance_;
class RequestMakeDirectory;
struct RequestMakeDirectoryDefaultTypeInternal;
extern RequestMakeDirectoryDefaultTypeInternal _RequestMakeDirectory_default_instance_;
class RequestOpenFile;
struct RequestOpenFileDefaultTypeInternal;
extern RequestOpenFileDefaultTypeInternal _RequestOpenFile_default_instance_;
class RequestReadFileBlock;
struct RequestReadFileBlockDefaultTypeInternal;
extern RequestReadFileBlockDefaultTypeInternal _RequestReadFileBlock_default_instance_;
class RequestRenameEntry;
struct RequestRenameEntryDefaultTypeInternal;
extern RequestRenameEntryDefaultTypeInternal _RequestRenameEntry_default_instance_;
class RequestVisitFiles;
struct RequestVisitFilesDefaultTypeInternal;
extern RequestVisitFilesDefaultTypeInternal _RequestVisitFiles_default_instance_;
class RequestVisitFiles2;
struct RequestVisitFiles2DefaultTypeInternal;
extern RequestVisitFiles2DefaultTypeInternal _RequestVisitFiles2_default_instance_;
class RequestWriteFileBlock;
struct RequestWriteFileBlockDefaultTypeInternal;
extern RequestWriteFileBlockDefaultTypeInternal _RequestWriteFileBlock_default_instance_;
class ResponseDeleteEntry;
struct ResponseDeleteEntryDefaultTypeInternal;
extern ResponseDeleteEntryDefaultTypeInternal _ResponseDeleteEntry_default_instance_;
class ResponseGoHome;
struct ResponseGoHomeDefaultTypeInternal;
extern ResponseGoHomeDefaultTypeInternal _ResponseGoHome_default_instance_;
class ResponseGoUp;
struct ResponseGoUpDefaultTypeInternal;
extern ResponseGoUpDefaultTypeInternal _ResponseGoUp_default_instance_;
class ResponseListEntries;
struct ResponseListEntriesDefaultTypeInternal;
extern ResponseListEntriesDefaultTypeInternal _ResponseListEntries_default_instance_;
class ResponseMakeDirectory;
struct ResponseMakeDirectoryDefaultTypeInternal;
extern ResponseMakeDirectoryDefaultTypeInternal _ResponseMakeDirectory_default_instance_;
class ResponseOpenFile;
struct ResponseOpenFileDefaultTypeInternal;
extern ResponseOpenFileDefaultTypeInternal _ResponseOpenFile_default_instance_;
class ResponseReadFileBlock;
struct ResponseReadFileBlockDefaultTypeInternal;
extern ResponseReadFileBlockDefaultTypeInternal _ResponseReadFileBlock_default_instance_;
class ResponseRenameEntry;
struct ResponseRenameEntryDefaultTypeInternal;
extern ResponseRenameEntryDefaultTypeInternal _ResponseRenameEntry_default_instance_;
class ResponseVisitFiles;
struct ResponseVisitFilesDefaultTypeInternal;
extern ResponseVisitFilesDefaultTypeInternal _ResponseVisitFiles_default_instance_;
class ResponseVisitFiles2;
struct ResponseVisitFiles2DefaultTypeInternal;
extern ResponseVisitFiles2DefaultTypeInternal _ResponseVisitFiles2_default_instance_;
class ResponseWriteFileBlock;
struct ResponseWriteFileBlockDefaultTypeInternal;
extern ResponseWriteFileBlockDefaultTypeInternal _ResponseWriteFileBlock_default_instance_;
}  // namespace File
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> ::Global::Protocol::File::CloseFile* Arena::CreateMaybeMessage<::Global::Protocol::File::CloseFile>(Arena*);
template<> ::Global::Protocol::File::EntryInfo* Arena::CreateMaybeMessage<::Global::Protocol::File::EntryInfo>(Arena*);
template<> ::Global::Protocol::File::RequestDeleteEntry* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestDeleteEntry>(Arena*);
template<> ::Global::Protocol::File::RequestGoHome* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestGoHome>(Arena*);
template<> ::Global::Protocol::File::RequestGoUp* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestGoUp>(Arena*);
template<> ::Global::Protocol::File::RequestListEntries* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestListEntries>(Arena*);
template<> ::Global::Protocol::File::RequestMakeDirectory* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestMakeDirectory>(Arena*);
template<> ::Global::Protocol::File::RequestOpenFile* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestOpenFile>(Arena*);
template<> ::Global::Protocol::File::RequestReadFileBlock* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestReadFileBlock>(Arena*);
template<> ::Global::Protocol::File::RequestRenameEntry* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestRenameEntry>(Arena*);
template<> ::Global::Protocol::File::RequestVisitFiles* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestVisitFiles>(Arena*);
template<> ::Global::Protocol::File::RequestVisitFiles2* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestVisitFiles2>(Arena*);
template<> ::Global::Protocol::File::RequestWriteFileBlock* Arena::CreateMaybeMessage<::Global::Protocol::File::RequestWriteFileBlock>(Arena*);
template<> ::Global::Protocol::File::ResponseDeleteEntry* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseDeleteEntry>(Arena*);
template<> ::Global::Protocol::File::ResponseGoHome* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseGoHome>(Arena*);
template<> ::Global::Protocol::File::ResponseGoUp* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseGoUp>(Arena*);
template<> ::Global::Protocol::File::ResponseListEntries* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseListEntries>(Arena*);
template<> ::Global::Protocol::File::ResponseMakeDirectory* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseMakeDirectory>(Arena*);
template<> ::Global::Protocol::File::ResponseOpenFile* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseOpenFile>(Arena*);
template<> ::Global::Protocol::File::ResponseReadFileBlock* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseReadFileBlock>(Arena*);
template<> ::Global::Protocol::File::ResponseRenameEntry* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseRenameEntry>(Arena*);
template<> ::Global::Protocol::File::ResponseVisitFiles* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseVisitFiles>(Arena*);
template<> ::Global::Protocol::File::ResponseVisitFiles2* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseVisitFiles2>(Arena*);
template<> ::Global::Protocol::File::ResponseWriteFileBlock* Arena::CreateMaybeMessage<::Global::Protocol::File::ResponseWriteFileBlock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Global {
namespace Protocol {
namespace File {

// ===================================================================

class EntryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.EntryInfo) */ {
 public:
  inline EntryInfo() : EntryInfo(nullptr) {}
  ~EntryInfo() override;
  explicit constexpr EntryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntryInfo(const EntryInfo& from);
  EntryInfo(EntryInfo&& from) noexcept
    : EntryInfo() {
    *this = ::std::move(from);
  }

  inline EntryInfo& operator=(const EntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryInfo& operator=(EntryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntryInfo* internal_default_instance() {
    return reinterpret_cast<const EntryInfo*>(
               &_EntryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntryInfo& a, EntryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EntryInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.EntryInfo";
  }
  protected:
  explicit EntryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryFieldNumber = 1,
    kNameFieldNumber = 2,
    kSizeFieldNumber = 3,
    kLastModifyingTimeFieldNumber = 5,
    kIsDirectoryFieldNumber = 4,
  };
  // string directory = 1;
  void clear_directory();
  const std::string& directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // int64 last_modifying_time = 5;
  void clear_last_modifying_time();
  int64_t last_modifying_time() const;
  void set_last_modifying_time(int64_t value);
  private:
  int64_t _internal_last_modifying_time() const;
  void _internal_set_last_modifying_time(int64_t value);
  public:

  // bool is_directory = 4;
  void clear_is_directory();
  bool is_directory() const;
  void set_is_directory(bool value);
  private:
  bool _internal_is_directory() const;
  void _internal_set_is_directory(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.EntryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t size_;
  int64_t last_modifying_time_;
  bool is_directory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestVisitFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestVisitFiles) */ {
 public:
  inline RequestVisitFiles() : RequestVisitFiles(nullptr) {}
  ~RequestVisitFiles() override;
  explicit constexpr RequestVisitFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVisitFiles(const RequestVisitFiles& from);
  RequestVisitFiles(RequestVisitFiles&& from) noexcept
    : RequestVisitFiles() {
    *this = ::std::move(from);
  }

  inline RequestVisitFiles& operator=(const RequestVisitFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVisitFiles& operator=(RequestVisitFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVisitFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVisitFiles* internal_default_instance() {
    return reinterpret_cast<const RequestVisitFiles*>(
               &_RequestVisitFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVisitFiles& a, RequestVisitFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVisitFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVisitFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVisitFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVisitFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVisitFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVisitFiles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVisitFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestVisitFiles";
  }
  protected:
  explicit RequestVisitFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthStringFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string auth_string = 2;
  void clear_auth_string();
  const std::string& auth_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_string();
  PROTOBUF_NODISCARD std::string* release_auth_string();
  void set_allocated_auth_string(std::string* auth_string);
  private:
  const std::string& _internal_auth_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_string(const std::string& value);
  std::string* _internal_mutable_auth_string();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestVisitFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_string_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseVisitFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseVisitFiles) */ {
 public:
  inline ResponseVisitFiles() : ResponseVisitFiles(nullptr) {}
  ~ResponseVisitFiles() override;
  explicit constexpr ResponseVisitFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseVisitFiles(const ResponseVisitFiles& from);
  ResponseVisitFiles(ResponseVisitFiles&& from) noexcept
    : ResponseVisitFiles() {
    *this = ::std::move(from);
  }

  inline ResponseVisitFiles& operator=(const ResponseVisitFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseVisitFiles& operator=(ResponseVisitFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseVisitFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseVisitFiles* internal_default_instance() {
    return reinterpret_cast<const ResponseVisitFiles*>(
               &_ResponseVisitFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseVisitFiles& a, ResponseVisitFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseVisitFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseVisitFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseVisitFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseVisitFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseVisitFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseVisitFiles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseVisitFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseVisitFiles";
  }
  protected:
  explicit ResponseVisitFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultDirsFieldNumber = 3,
    kEntriesFieldNumber = 4,
    kErrStringFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated string default_dirs = 3;
  int default_dirs_size() const;
  private:
  int _internal_default_dirs_size() const;
  public:
  void clear_default_dirs();
  const std::string& default_dirs(int index) const;
  std::string* mutable_default_dirs(int index);
  void set_default_dirs(int index, const std::string& value);
  void set_default_dirs(int index, std::string&& value);
  void set_default_dirs(int index, const char* value);
  void set_default_dirs(int index, const char* value, size_t size);
  std::string* add_default_dirs();
  void add_default_dirs(const std::string& value);
  void add_default_dirs(std::string&& value);
  void add_default_dirs(const char* value);
  void add_default_dirs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& default_dirs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_default_dirs();
  private:
  const std::string& _internal_default_dirs(int index) const;
  std::string* _internal_add_default_dirs();
  public:

  // repeated .Global.Protocol.File.EntryInfo entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Global::Protocol::File::EntryInfo* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
      mutable_entries();
  private:
  const ::Global::Protocol::File::EntryInfo& _internal_entries(int index) const;
  ::Global::Protocol::File::EntryInfo* _internal_add_entries();
  public:
  const ::Global::Protocol::File::EntryInfo& entries(int index) const;
  ::Global::Protocol::File::EntryInfo* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
      entries() const;

  // string err_string = 2;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseVisitFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> default_dirs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestVisitFiles2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestVisitFiles2) */ {
 public:
  inline RequestVisitFiles2() : RequestVisitFiles2(nullptr) {}
  ~RequestVisitFiles2() override;
  explicit constexpr RequestVisitFiles2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVisitFiles2(const RequestVisitFiles2& from);
  RequestVisitFiles2(RequestVisitFiles2&& from) noexcept
    : RequestVisitFiles2() {
    *this = ::std::move(from);
  }

  inline RequestVisitFiles2& operator=(const RequestVisitFiles2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVisitFiles2& operator=(RequestVisitFiles2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVisitFiles2& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVisitFiles2* internal_default_instance() {
    return reinterpret_cast<const RequestVisitFiles2*>(
               &_RequestVisitFiles2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestVisitFiles2& a, RequestVisitFiles2& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVisitFiles2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVisitFiles2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVisitFiles2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVisitFiles2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVisitFiles2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVisitFiles2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVisitFiles2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestVisitFiles2";
  }
  protected:
  explicit RequestVisitFiles2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthStringFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kAsyncTaskIdFieldNumber = 2,
    kAsyncTaskCertificateFieldNumber = 3,
  };
  // string auth_string = 4;
  void clear_auth_string();
  const std::string& auth_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_string();
  PROTOBUF_NODISCARD std::string* release_auth_string();
  void set_allocated_auth_string(std::string* auth_string);
  private:
  const std::string& _internal_auth_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_string(const std::string& value);
  std::string* _internal_mutable_auth_string();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 async_task_id = 2;
  void clear_async_task_id();
  uint64_t async_task_id() const;
  void set_async_task_id(uint64_t value);
  private:
  uint64_t _internal_async_task_id() const;
  void _internal_set_async_task_id(uint64_t value);
  public:

  // uint32 async_task_certificate = 3;
  void clear_async_task_certificate();
  uint32_t async_task_certificate() const;
  void set_async_task_certificate(uint32_t value);
  private:
  uint32_t _internal_async_task_certificate() const;
  void _internal_set_async_task_certificate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestVisitFiles2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_string_;
  int64_t user_id_;
  uint64_t async_task_id_;
  uint32_t async_task_certificate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseVisitFiles2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseVisitFiles2) */ {
 public:
  inline ResponseVisitFiles2() : ResponseVisitFiles2(nullptr) {}
  ~ResponseVisitFiles2() override;
  explicit constexpr ResponseVisitFiles2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseVisitFiles2(const ResponseVisitFiles2& from);
  ResponseVisitFiles2(ResponseVisitFiles2&& from) noexcept
    : ResponseVisitFiles2() {
    *this = ::std::move(from);
  }

  inline ResponseVisitFiles2& operator=(const ResponseVisitFiles2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseVisitFiles2& operator=(ResponseVisitFiles2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseVisitFiles2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseVisitFiles2* internal_default_instance() {
    return reinterpret_cast<const ResponseVisitFiles2*>(
               &_ResponseVisitFiles2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResponseVisitFiles2& a, ResponseVisitFiles2& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseVisitFiles2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseVisitFiles2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseVisitFiles2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseVisitFiles2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseVisitFiles2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseVisitFiles2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseVisitFiles2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseVisitFiles2";
  }
  protected:
  explicit ResponseVisitFiles2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultDirsFieldNumber = 5,
    kEntriesFieldNumber = 6,
    kErrStringFieldNumber = 4,
    kAsyncTaskIdFieldNumber = 1,
    kAsyncTaskCertificateFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // repeated string default_dirs = 5;
  int default_dirs_size() const;
  private:
  int _internal_default_dirs_size() const;
  public:
  void clear_default_dirs();
  const std::string& default_dirs(int index) const;
  std::string* mutable_default_dirs(int index);
  void set_default_dirs(int index, const std::string& value);
  void set_default_dirs(int index, std::string&& value);
  void set_default_dirs(int index, const char* value);
  void set_default_dirs(int index, const char* value, size_t size);
  std::string* add_default_dirs();
  void add_default_dirs(const std::string& value);
  void add_default_dirs(std::string&& value);
  void add_default_dirs(const char* value);
  void add_default_dirs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& default_dirs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_default_dirs();
  private:
  const std::string& _internal_default_dirs(int index) const;
  std::string* _internal_add_default_dirs();
  public:

  // repeated .Global.Protocol.File.EntryInfo entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Global::Protocol::File::EntryInfo* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
      mutable_entries();
  private:
  const ::Global::Protocol::File::EntryInfo& _internal_entries(int index) const;
  ::Global::Protocol::File::EntryInfo* _internal_add_entries();
  public:
  const ::Global::Protocol::File::EntryInfo& entries(int index) const;
  ::Global::Protocol::File::EntryInfo* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
      entries() const;

  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // uint64 async_task_id = 1;
  void clear_async_task_id();
  uint64_t async_task_id() const;
  void set_async_task_id(uint64_t value);
  private:
  uint64_t _internal_async_task_id() const;
  void _internal_set_async_task_id(uint64_t value);
  public:

  // uint32 async_task_certificate = 2;
  void clear_async_task_certificate();
  uint32_t async_task_certificate() const;
  void set_async_task_certificate(uint32_t value);
  private:
  uint32_t _internal_async_task_certificate() const;
  void _internal_set_async_task_certificate(uint32_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseVisitFiles2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> default_dirs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  uint64_t async_task_id_;
  uint32_t async_task_certificate_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestMakeDirectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestMakeDirectory) */ {
 public:
  inline RequestMakeDirectory() : RequestMakeDirectory(nullptr) {}
  ~RequestMakeDirectory() override;
  explicit constexpr RequestMakeDirectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMakeDirectory(const RequestMakeDirectory& from);
  RequestMakeDirectory(RequestMakeDirectory&& from) noexcept
    : RequestMakeDirectory() {
    *this = ::std::move(from);
  }

  inline RequestMakeDirectory& operator=(const RequestMakeDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMakeDirectory& operator=(RequestMakeDirectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMakeDirectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMakeDirectory* internal_default_instance() {
    return reinterpret_cast<const RequestMakeDirectory*>(
               &_RequestMakeDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestMakeDirectory& a, RequestMakeDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMakeDirectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMakeDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestMakeDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestMakeDirectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMakeDirectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestMakeDirectory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMakeDirectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestMakeDirectory";
  }
  protected:
  explicit RequestMakeDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 3,
    kNameFieldNumber = 4,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string dir = 3;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestMakeDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t seq_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseMakeDirectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseMakeDirectory) */ {
 public:
  inline ResponseMakeDirectory() : ResponseMakeDirectory(nullptr) {}
  ~ResponseMakeDirectory() override;
  explicit constexpr ResponseMakeDirectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMakeDirectory(const ResponseMakeDirectory& from);
  ResponseMakeDirectory(ResponseMakeDirectory&& from) noexcept
    : ResponseMakeDirectory() {
    *this = ::std::move(from);
  }

  inline ResponseMakeDirectory& operator=(const ResponseMakeDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMakeDirectory& operator=(ResponseMakeDirectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMakeDirectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMakeDirectory* internal_default_instance() {
    return reinterpret_cast<const ResponseMakeDirectory*>(
               &_ResponseMakeDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResponseMakeDirectory& a, ResponseMakeDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMakeDirectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMakeDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMakeDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMakeDirectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMakeDirectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseMakeDirectory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMakeDirectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseMakeDirectory";
  }
  protected:
  explicit ResponseMakeDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 4,
    kDirFieldNumber = 5,
    kNameFieldNumber = 6,
    kLastModifyingTimeFieldNumber = 7,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string dir = 5;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string last_modifying_time = 7;
  void clear_last_modifying_time();
  const std::string& last_modifying_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_modifying_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_modifying_time();
  PROTOBUF_NODISCARD std::string* release_last_modifying_time();
  void set_allocated_last_modifying_time(std::string* last_modifying_time);
  private:
  const std::string& _internal_last_modifying_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modifying_time(const std::string& value);
  std::string* _internal_mutable_last_modifying_time();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseMakeDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_modifying_time_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestDeleteEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestDeleteEntry) */ {
 public:
  inline RequestDeleteEntry() : RequestDeleteEntry(nullptr) {}
  ~RequestDeleteEntry() override;
  explicit constexpr RequestDeleteEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestDeleteEntry(const RequestDeleteEntry& from);
  RequestDeleteEntry(RequestDeleteEntry&& from) noexcept
    : RequestDeleteEntry() {
    *this = ::std::move(from);
  }

  inline RequestDeleteEntry& operator=(const RequestDeleteEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestDeleteEntry& operator=(RequestDeleteEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestDeleteEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestDeleteEntry* internal_default_instance() {
    return reinterpret_cast<const RequestDeleteEntry*>(
               &_RequestDeleteEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestDeleteEntry& a, RequestDeleteEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestDeleteEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestDeleteEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestDeleteEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestDeleteEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestDeleteEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestDeleteEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestDeleteEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestDeleteEntry";
  }
  protected:
  explicit RequestDeleteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 3,
    kNameFieldNumber = 4,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string dir = 3;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestDeleteEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t seq_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseDeleteEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseDeleteEntry) */ {
 public:
  inline ResponseDeleteEntry() : ResponseDeleteEntry(nullptr) {}
  ~ResponseDeleteEntry() override;
  explicit constexpr ResponseDeleteEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseDeleteEntry(const ResponseDeleteEntry& from);
  ResponseDeleteEntry(ResponseDeleteEntry&& from) noexcept
    : ResponseDeleteEntry() {
    *this = ::std::move(from);
  }

  inline ResponseDeleteEntry& operator=(const ResponseDeleteEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseDeleteEntry& operator=(ResponseDeleteEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseDeleteEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseDeleteEntry* internal_default_instance() {
    return reinterpret_cast<const ResponseDeleteEntry*>(
               &_ResponseDeleteEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResponseDeleteEntry& a, ResponseDeleteEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseDeleteEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseDeleteEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseDeleteEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseDeleteEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseDeleteEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseDeleteEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseDeleteEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseDeleteEntry";
  }
  protected:
  explicit ResponseDeleteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 4,
    kDirFieldNumber = 5,
    kNameFieldNumber = 6,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string dir = 5;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseDeleteEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestRenameEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestRenameEntry) */ {
 public:
  inline RequestRenameEntry() : RequestRenameEntry(nullptr) {}
  ~RequestRenameEntry() override;
  explicit constexpr RequestRenameEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRenameEntry(const RequestRenameEntry& from);
  RequestRenameEntry(RequestRenameEntry&& from) noexcept
    : RequestRenameEntry() {
    *this = ::std::move(from);
  }

  inline RequestRenameEntry& operator=(const RequestRenameEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRenameEntry& operator=(RequestRenameEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestRenameEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRenameEntry* internal_default_instance() {
    return reinterpret_cast<const RequestRenameEntry*>(
               &_RequestRenameEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RequestRenameEntry& a, RequestRenameEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRenameEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRenameEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestRenameEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestRenameEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestRenameEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestRenameEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestRenameEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestRenameEntry";
  }
  protected:
  explicit RequestRenameEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 3,
    kOldNameFieldNumber = 4,
    kNewNameFieldNumber = 5,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string dir = 3;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string old_name = 4;
  void clear_old_name();
  const std::string& old_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* old_name);
  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(const std::string& value);
  std::string* _internal_mutable_old_name();
  public:

  // string new_name = 5;
  void clear_new_name();
  const std::string& new_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* new_name);
  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(const std::string& value);
  std::string* _internal_mutable_new_name();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestRenameEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_name_;
  int64_t seq_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseRenameEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseRenameEntry) */ {
 public:
  inline ResponseRenameEntry() : ResponseRenameEntry(nullptr) {}
  ~ResponseRenameEntry() override;
  explicit constexpr ResponseRenameEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseRenameEntry(const ResponseRenameEntry& from);
  ResponseRenameEntry(ResponseRenameEntry&& from) noexcept
    : ResponseRenameEntry() {
    *this = ::std::move(from);
  }

  inline ResponseRenameEntry& operator=(const ResponseRenameEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseRenameEntry& operator=(ResponseRenameEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseRenameEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseRenameEntry* internal_default_instance() {
    return reinterpret_cast<const ResponseRenameEntry*>(
               &_ResponseRenameEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResponseRenameEntry& a, ResponseRenameEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseRenameEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseRenameEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseRenameEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseRenameEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseRenameEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseRenameEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRenameEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseRenameEntry";
  }
  protected:
  explicit ResponseRenameEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 4,
    kDirFieldNumber = 5,
    kOldNameFieldNumber = 6,
    kNewNameFieldNumber = 7,
    kLastModifyingTimeFieldNumber = 8,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string dir = 5;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string old_name = 6;
  void clear_old_name();
  const std::string& old_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* old_name);
  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(const std::string& value);
  std::string* _internal_mutable_old_name();
  public:

  // string new_name = 7;
  void clear_new_name();
  const std::string& new_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* new_name);
  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(const std::string& value);
  std::string* _internal_mutable_new_name();
  public:

  // string last_modifying_time = 8;
  void clear_last_modifying_time();
  const std::string& last_modifying_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_modifying_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_modifying_time();
  PROTOBUF_NODISCARD std::string* release_last_modifying_time();
  void set_allocated_last_modifying_time(std::string* last_modifying_time);
  private:
  const std::string& _internal_last_modifying_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modifying_time(const std::string& value);
  std::string* _internal_mutable_last_modifying_time();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseRenameEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_modifying_time_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestGoUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestGoUp) */ {
 public:
  inline RequestGoUp() : RequestGoUp(nullptr) {}
  ~RequestGoUp() override;
  explicit constexpr RequestGoUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestGoUp(const RequestGoUp& from);
  RequestGoUp(RequestGoUp&& from) noexcept
    : RequestGoUp() {
    *this = ::std::move(from);
  }

  inline RequestGoUp& operator=(const RequestGoUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGoUp& operator=(RequestGoUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestGoUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestGoUp* internal_default_instance() {
    return reinterpret_cast<const RequestGoUp*>(
               &_RequestGoUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RequestGoUp& a, RequestGoUp& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGoUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestGoUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestGoUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestGoUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestGoUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestGoUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGoUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestGoUp";
  }
  protected:
  explicit RequestGoUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 3,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string dir = 3;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestGoUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  int64_t seq_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseGoUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseGoUp) */ {
 public:
  inline ResponseGoUp() : ResponseGoUp(nullptr) {}
  ~ResponseGoUp() override;
  explicit constexpr ResponseGoUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseGoUp(const ResponseGoUp& from);
  ResponseGoUp(ResponseGoUp&& from) noexcept
    : ResponseGoUp() {
    *this = ::std::move(from);
  }

  inline ResponseGoUp& operator=(const ResponseGoUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseGoUp& operator=(ResponseGoUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseGoUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseGoUp* internal_default_instance() {
    return reinterpret_cast<const ResponseGoUp*>(
               &_ResponseGoUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ResponseGoUp& a, ResponseGoUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseGoUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseGoUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseGoUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseGoUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseGoUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseGoUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseGoUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseGoUp";
  }
  protected:
  explicit ResponseGoUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
    kErrStringFieldNumber = 4,
    kDirFieldNumber = 5,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // repeated .Global.Protocol.File.EntryInfo entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Global::Protocol::File::EntryInfo* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
      mutable_entries();
  private:
  const ::Global::Protocol::File::EntryInfo& _internal_entries(int index) const;
  ::Global::Protocol::File::EntryInfo* _internal_add_entries();
  public:
  const ::Global::Protocol::File::EntryInfo& entries(int index) const;
  ::Global::Protocol::File::EntryInfo* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
      entries() const;

  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string dir = 5;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseGoUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestGoHome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestGoHome) */ {
 public:
  inline RequestGoHome() : RequestGoHome(nullptr) {}
  ~RequestGoHome() override;
  explicit constexpr RequestGoHome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestGoHome(const RequestGoHome& from);
  RequestGoHome(RequestGoHome&& from) noexcept
    : RequestGoHome() {
    *this = ::std::move(from);
  }

  inline RequestGoHome& operator=(const RequestGoHome& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGoHome& operator=(RequestGoHome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestGoHome& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestGoHome* internal_default_instance() {
    return reinterpret_cast<const RequestGoHome*>(
               &_RequestGoHome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RequestGoHome& a, RequestGoHome& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGoHome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestGoHome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestGoHome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestGoHome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestGoHome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestGoHome& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGoHome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestGoHome";
  }
  protected:
  explicit RequestGoHome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestGoHome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t seq_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseGoHome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseGoHome) */ {
 public:
  inline ResponseGoHome() : ResponseGoHome(nullptr) {}
  ~ResponseGoHome() override;
  explicit constexpr ResponseGoHome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseGoHome(const ResponseGoHome& from);
  ResponseGoHome(ResponseGoHome&& from) noexcept
    : ResponseGoHome() {
    *this = ::std::move(from);
  }

  inline ResponseGoHome& operator=(const ResponseGoHome& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseGoHome& operator=(ResponseGoHome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseGoHome& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseGoHome* internal_default_instance() {
    return reinterpret_cast<const ResponseGoHome*>(
               &_ResponseGoHome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ResponseGoHome& a, ResponseGoHome& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseGoHome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseGoHome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseGoHome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseGoHome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseGoHome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseGoHome& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseGoHome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseGoHome";
  }
  protected:
  explicit ResponseGoHome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
    kErrStringFieldNumber = 4,
    kDirFieldNumber = 5,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // repeated .Global.Protocol.File.EntryInfo entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Global::Protocol::File::EntryInfo* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
      mutable_entries();
  private:
  const ::Global::Protocol::File::EntryInfo& _internal_entries(int index) const;
  ::Global::Protocol::File::EntryInfo* _internal_add_entries();
  public:
  const ::Global::Protocol::File::EntryInfo& entries(int index) const;
  ::Global::Protocol::File::EntryInfo* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
      entries() const;

  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string dir = 5;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseGoHome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestListEntries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestListEntries) */ {
 public:
  inline RequestListEntries() : RequestListEntries(nullptr) {}
  ~RequestListEntries() override;
  explicit constexpr RequestListEntries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestListEntries(const RequestListEntries& from);
  RequestListEntries(RequestListEntries&& from) noexcept
    : RequestListEntries() {
    *this = ::std::move(from);
  }

  inline RequestListEntries& operator=(const RequestListEntries& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestListEntries& operator=(RequestListEntries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestListEntries& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestListEntries* internal_default_instance() {
    return reinterpret_cast<const RequestListEntries*>(
               &_RequestListEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RequestListEntries& a, RequestListEntries& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestListEntries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestListEntries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestListEntries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestListEntries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestListEntries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestListEntries& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestListEntries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestListEntries";
  }
  protected:
  explicit RequestListEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 3,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string dir = 3;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestListEntries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  int64_t seq_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseListEntries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseListEntries) */ {
 public:
  inline ResponseListEntries() : ResponseListEntries(nullptr) {}
  ~ResponseListEntries() override;
  explicit constexpr ResponseListEntries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseListEntries(const ResponseListEntries& from);
  ResponseListEntries(ResponseListEntries&& from) noexcept
    : ResponseListEntries() {
    *this = ::std::move(from);
  }

  inline ResponseListEntries& operator=(const ResponseListEntries& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseListEntries& operator=(ResponseListEntries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseListEntries& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseListEntries* internal_default_instance() {
    return reinterpret_cast<const ResponseListEntries*>(
               &_ResponseListEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResponseListEntries& a, ResponseListEntries& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseListEntries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseListEntries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseListEntries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseListEntries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseListEntries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseListEntries& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseListEntries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseListEntries";
  }
  protected:
  explicit ResponseListEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
    kErrStringFieldNumber = 4,
    kDirFieldNumber = 5,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // repeated .Global.Protocol.File.EntryInfo entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Global::Protocol::File::EntryInfo* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
      mutable_entries();
  private:
  const ::Global::Protocol::File::EntryInfo& _internal_entries(int index) const;
  ::Global::Protocol::File::EntryInfo* _internal_add_entries();
  public:
  const ::Global::Protocol::File::EntryInfo& entries(int index) const;
  ::Global::Protocol::File::EntryInfo* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
      entries() const;

  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string dir = 5;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseListEntries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestOpenFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestOpenFile) */ {
 public:
  inline RequestOpenFile() : RequestOpenFile(nullptr) {}
  ~RequestOpenFile() override;
  explicit constexpr RequestOpenFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestOpenFile(const RequestOpenFile& from);
  RequestOpenFile(RequestOpenFile&& from) noexcept
    : RequestOpenFile() {
    *this = ::std::move(from);
  }

  inline RequestOpenFile& operator=(const RequestOpenFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestOpenFile& operator=(RequestOpenFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestOpenFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestOpenFile* internal_default_instance() {
    return reinterpret_cast<const RequestOpenFile*>(
               &_RequestOpenFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RequestOpenFile& a, RequestOpenFile& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestOpenFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestOpenFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestOpenFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestOpenFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestOpenFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestOpenFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestOpenFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestOpenFile";
  }
  protected:
  explicit RequestOpenFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 3,
    kDirectoryFieldNumber = 5,
    kFileNameFieldNumber = 6,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kModeFieldNumber = 4,
    kForceFieldNumber = 9,
    kFileSizeFieldNumber = 7,
    kSeekFieldNumber = 8,
  };
  // string task_id = 3;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string directory = 5;
  void clear_directory();
  const std::string& directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // string file_name = 6;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 mode = 4;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // bool force = 9;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // uint64 file_size = 7;
  void clear_file_size();
  uint64_t file_size() const;
  void set_file_size(uint64_t value);
  private:
  uint64_t _internal_file_size() const;
  void _internal_set_file_size(uint64_t value);
  public:

  // uint64 seek = 8;
  void clear_seek();
  uint64_t seek() const;
  void set_seek(uint64_t value);
  private:
  uint64_t _internal_seek() const;
  void _internal_set_seek(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestOpenFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  int64_t seq_;
  int64_t user_id_;
  int32_t mode_;
  bool force_;
  uint64_t file_size_;
  uint64_t seek_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseOpenFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseOpenFile) */ {
 public:
  inline ResponseOpenFile() : ResponseOpenFile(nullptr) {}
  ~ResponseOpenFile() override;
  explicit constexpr ResponseOpenFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseOpenFile(const ResponseOpenFile& from);
  ResponseOpenFile(ResponseOpenFile&& from) noexcept
    : ResponseOpenFile() {
    *this = ::std::move(from);
  }

  inline ResponseOpenFile& operator=(const ResponseOpenFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOpenFile& operator=(ResponseOpenFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseOpenFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseOpenFile* internal_default_instance() {
    return reinterpret_cast<const ResponseOpenFile*>(
               &_ResponseOpenFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ResponseOpenFile& a, ResponseOpenFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOpenFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseOpenFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseOpenFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseOpenFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseOpenFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseOpenFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseOpenFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseOpenFile";
  }
  protected:
  explicit ResponseOpenFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 4,
    kTaskIdFieldNumber = 5,
    kSeqFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string task_id = 5;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseOpenFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  int64_t seq_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestWriteFileBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestWriteFileBlock) */ {
 public:
  inline RequestWriteFileBlock() : RequestWriteFileBlock(nullptr) {}
  ~RequestWriteFileBlock() override;
  explicit constexpr RequestWriteFileBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestWriteFileBlock(const RequestWriteFileBlock& from);
  RequestWriteFileBlock(RequestWriteFileBlock&& from) noexcept
    : RequestWriteFileBlock() {
    *this = ::std::move(from);
  }

  inline RequestWriteFileBlock& operator=(const RequestWriteFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestWriteFileBlock& operator=(RequestWriteFileBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestWriteFileBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestWriteFileBlock* internal_default_instance() {
    return reinterpret_cast<const RequestWriteFileBlock*>(
               &_RequestWriteFileBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RequestWriteFileBlock& a, RequestWriteFileBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestWriteFileBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestWriteFileBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestWriteFileBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestWriteFileBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestWriteFileBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestWriteFileBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestWriteFileBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestWriteFileBlock";
  }
  protected:
  explicit RequestWriteFileBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kCompressedDataFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kSeekFieldNumber = 3,
    kRawDataLenFieldNumber = 4,
  };
  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // bytes compressed_data = 5;
  void clear_compressed_data();
  const std::string& compressed_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compressed_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compressed_data();
  PROTOBUF_NODISCARD std::string* release_compressed_data();
  void set_allocated_compressed_data(std::string* compressed_data);
  private:
  const std::string& _internal_compressed_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressed_data(const std::string& value);
  std::string* _internal_mutable_compressed_data();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 seek = 3;
  void clear_seek();
  uint64_t seek() const;
  void set_seek(uint64_t value);
  private:
  uint64_t _internal_seek() const;
  void _internal_set_seek(uint64_t value);
  public:

  // uint32 raw_data_len = 4;
  void clear_raw_data_len();
  uint32_t raw_data_len() const;
  void set_raw_data_len(uint32_t value);
  private:
  uint32_t _internal_raw_data_len() const;
  void _internal_set_raw_data_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestWriteFileBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_data_;
  int64_t user_id_;
  uint64_t seek_;
  uint32_t raw_data_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseWriteFileBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseWriteFileBlock) */ {
 public:
  inline ResponseWriteFileBlock() : ResponseWriteFileBlock(nullptr) {}
  ~ResponseWriteFileBlock() override;
  explicit constexpr ResponseWriteFileBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseWriteFileBlock(const ResponseWriteFileBlock& from);
  ResponseWriteFileBlock(ResponseWriteFileBlock&& from) noexcept
    : ResponseWriteFileBlock() {
    *this = ::std::move(from);
  }

  inline ResponseWriteFileBlock& operator=(const ResponseWriteFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseWriteFileBlock& operator=(ResponseWriteFileBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseWriteFileBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseWriteFileBlock* internal_default_instance() {
    return reinterpret_cast<const ResponseWriteFileBlock*>(
               &_ResponseWriteFileBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ResponseWriteFileBlock& a, ResponseWriteFileBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseWriteFileBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseWriteFileBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseWriteFileBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseWriteFileBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseWriteFileBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseWriteFileBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseWriteFileBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseWriteFileBlock";
  }
  protected:
  explicit ResponseWriteFileBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kAfterSeekFieldNumber = 5,
    kErrCodeFieldNumber = 1,
  };
  // string err_string = 2;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string task_id = 3;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // int64 user_id = 4;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 after_seek = 5;
  void clear_after_seek();
  uint64_t after_seek() const;
  void set_after_seek(uint64_t value);
  private:
  uint64_t _internal_after_seek() const;
  void _internal_set_after_seek(uint64_t value);
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseWriteFileBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  int64_t user_id_;
  uint64_t after_seek_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class RequestReadFileBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.RequestReadFileBlock) */ {
 public:
  inline RequestReadFileBlock() : RequestReadFileBlock(nullptr) {}
  ~RequestReadFileBlock() override;
  explicit constexpr RequestReadFileBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestReadFileBlock(const RequestReadFileBlock& from);
  RequestReadFileBlock(RequestReadFileBlock&& from) noexcept
    : RequestReadFileBlock() {
    *this = ::std::move(from);
  }

  inline RequestReadFileBlock& operator=(const RequestReadFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestReadFileBlock& operator=(RequestReadFileBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestReadFileBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestReadFileBlock* internal_default_instance() {
    return reinterpret_cast<const RequestReadFileBlock*>(
               &_RequestReadFileBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RequestReadFileBlock& a, RequestReadFileBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestReadFileBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestReadFileBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestReadFileBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestReadFileBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestReadFileBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestReadFileBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestReadFileBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.RequestReadFileBlock";
  }
  protected:
  explicit RequestReadFileBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kSeekFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 seek = 3;
  void clear_seek();
  uint64_t seek() const;
  void set_seek(uint64_t value);
  private:
  uint64_t _internal_seek() const;
  void _internal_set_seek(uint64_t value);
  public:

  // uint32 len = 4;
  void clear_len();
  uint32_t len() const;
  void set_len(uint32_t value);
  private:
  uint32_t _internal_len() const;
  void _internal_set_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.RequestReadFileBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  int64_t user_id_;
  uint64_t seek_;
  uint32_t len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class ResponseReadFileBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.ResponseReadFileBlock) */ {
 public:
  inline ResponseReadFileBlock() : ResponseReadFileBlock(nullptr) {}
  ~ResponseReadFileBlock() override;
  explicit constexpr ResponseReadFileBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseReadFileBlock(const ResponseReadFileBlock& from);
  ResponseReadFileBlock(ResponseReadFileBlock&& from) noexcept
    : ResponseReadFileBlock() {
    *this = ::std::move(from);
  }

  inline ResponseReadFileBlock& operator=(const ResponseReadFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseReadFileBlock& operator=(ResponseReadFileBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseReadFileBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseReadFileBlock* internal_default_instance() {
    return reinterpret_cast<const ResponseReadFileBlock*>(
               &_ResponseReadFileBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ResponseReadFileBlock& a, ResponseReadFileBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseReadFileBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseReadFileBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseReadFileBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseReadFileBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseReadFileBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseReadFileBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseReadFileBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.ResponseReadFileBlock";
  }
  protected:
  explicit ResponseReadFileBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kCompressedDataFieldNumber = 7,
    kErrCodeFieldNumber = 1,
    kRawDataLenFieldNumber = 6,
    kUserIdFieldNumber = 4,
    kSeekFieldNumber = 5,
  };
  // string err_string = 2;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string task_id = 3;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // bytes compressed_data = 7;
  void clear_compressed_data();
  const std::string& compressed_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compressed_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compressed_data();
  PROTOBUF_NODISCARD std::string* release_compressed_data();
  void set_allocated_compressed_data(std::string* compressed_data);
  private:
  const std::string& _internal_compressed_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressed_data(const std::string& value);
  std::string* _internal_mutable_compressed_data();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // uint32 raw_data_len = 6;
  void clear_raw_data_len();
  uint32_t raw_data_len() const;
  void set_raw_data_len(uint32_t value);
  private:
  uint32_t _internal_raw_data_len() const;
  void _internal_set_raw_data_len(uint32_t value);
  public:

  // int64 user_id = 4;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 seek = 5;
  void clear_seek();
  uint64_t seek() const;
  void set_seek(uint64_t value);
  private:
  uint64_t _internal_seek() const;
  void _internal_set_seek(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.ResponseReadFileBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_data_;
  int32_t err_code_;
  uint32_t raw_data_len_;
  int64_t user_id_;
  uint64_t seek_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class CloseFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.File.CloseFile) */ {
 public:
  inline CloseFile() : CloseFile(nullptr) {}
  ~CloseFile() override;
  explicit constexpr CloseFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseFile(const CloseFile& from);
  CloseFile(CloseFile&& from) noexcept
    : CloseFile() {
    *this = ::std::move(from);
  }

  inline CloseFile& operator=(const CloseFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseFile& operator=(CloseFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseFile* internal_default_instance() {
    return reinterpret_cast<const CloseFile*>(
               &_CloseFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CloseFile& a, CloseFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.File.CloseFile";
  }
  protected:
  explicit CloseFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.File.CloseFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntryInfo

// string directory = 1;
inline void EntryInfo::clear_directory() {
  directory_.ClearToEmpty();
}
inline const std::string& EntryInfo::directory() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.EntryInfo.directory)
  return _internal_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryInfo::set_directory(ArgT0&& arg0, ArgT... args) {
 
 directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.EntryInfo.directory)
}
inline std::string* EntryInfo::mutable_directory() {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.EntryInfo.directory)
  return _s;
}
inline const std::string& EntryInfo::_internal_directory() const {
  return directory_.Get();
}
inline void EntryInfo::_internal_set_directory(const std::string& value) {
  
  directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EntryInfo::_internal_mutable_directory() {
  
  return directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EntryInfo::release_directory() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.EntryInfo.directory)
  return directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EntryInfo::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    
  } else {
    
  }
  directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (directory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.EntryInfo.directory)
}

// string name = 2;
inline void EntryInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EntryInfo::name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.EntryInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.EntryInfo.name)
}
inline std::string* EntryInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.EntryInfo.name)
  return _s;
}
inline const std::string& EntryInfo::_internal_name() const {
  return name_.Get();
}
inline void EntryInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EntryInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EntryInfo::release_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.EntryInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EntryInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.EntryInfo.name)
}

// uint64 size = 3;
inline void EntryInfo::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t EntryInfo::_internal_size() const {
  return size_;
}
inline uint64_t EntryInfo::size() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.EntryInfo.size)
  return _internal_size();
}
inline void EntryInfo::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void EntryInfo::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.EntryInfo.size)
}

// bool is_directory = 4;
inline void EntryInfo::clear_is_directory() {
  is_directory_ = false;
}
inline bool EntryInfo::_internal_is_directory() const {
  return is_directory_;
}
inline bool EntryInfo::is_directory() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.EntryInfo.is_directory)
  return _internal_is_directory();
}
inline void EntryInfo::_internal_set_is_directory(bool value) {
  
  is_directory_ = value;
}
inline void EntryInfo::set_is_directory(bool value) {
  _internal_set_is_directory(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.EntryInfo.is_directory)
}

// int64 last_modifying_time = 5;
inline void EntryInfo::clear_last_modifying_time() {
  last_modifying_time_ = int64_t{0};
}
inline int64_t EntryInfo::_internal_last_modifying_time() const {
  return last_modifying_time_;
}
inline int64_t EntryInfo::last_modifying_time() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.EntryInfo.last_modifying_time)
  return _internal_last_modifying_time();
}
inline void EntryInfo::_internal_set_last_modifying_time(int64_t value) {
  
  last_modifying_time_ = value;
}
inline void EntryInfo::set_last_modifying_time(int64_t value) {
  _internal_set_last_modifying_time(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.EntryInfo.last_modifying_time)
}

// -------------------------------------------------------------------

// RequestVisitFiles

// int64 user_id = 1;
inline void RequestVisitFiles::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestVisitFiles::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestVisitFiles::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestVisitFiles.user_id)
  return _internal_user_id();
}
inline void RequestVisitFiles::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestVisitFiles::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestVisitFiles.user_id)
}

// string auth_string = 2;
inline void RequestVisitFiles::clear_auth_string() {
  auth_string_.ClearToEmpty();
}
inline const std::string& RequestVisitFiles::auth_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestVisitFiles.auth_string)
  return _internal_auth_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestVisitFiles::set_auth_string(ArgT0&& arg0, ArgT... args) {
 
 auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestVisitFiles.auth_string)
}
inline std::string* RequestVisitFiles::mutable_auth_string() {
  std::string* _s = _internal_mutable_auth_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestVisitFiles.auth_string)
  return _s;
}
inline const std::string& RequestVisitFiles::_internal_auth_string() const {
  return auth_string_.Get();
}
inline void RequestVisitFiles::_internal_set_auth_string(const std::string& value) {
  
  auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestVisitFiles::_internal_mutable_auth_string() {
  
  return auth_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestVisitFiles::release_auth_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestVisitFiles.auth_string)
  return auth_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestVisitFiles::set_allocated_auth_string(std::string* auth_string) {
  if (auth_string != nullptr) {
    
  } else {
    
  }
  auth_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestVisitFiles.auth_string)
}

// -------------------------------------------------------------------

// ResponseVisitFiles

// int32 err_code = 1;
inline void ResponseVisitFiles::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseVisitFiles::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseVisitFiles::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles.err_code)
  return _internal_err_code();
}
inline void ResponseVisitFiles::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseVisitFiles::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles.err_code)
}

// string err_string = 2;
inline void ResponseVisitFiles::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseVisitFiles::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseVisitFiles::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles.err_string)
}
inline std::string* ResponseVisitFiles::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseVisitFiles.err_string)
  return _s;
}
inline const std::string& ResponseVisitFiles::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseVisitFiles::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseVisitFiles::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseVisitFiles::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseVisitFiles.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseVisitFiles::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseVisitFiles.err_string)
}

// repeated string default_dirs = 3;
inline int ResponseVisitFiles::_internal_default_dirs_size() const {
  return default_dirs_.size();
}
inline int ResponseVisitFiles::default_dirs_size() const {
  return _internal_default_dirs_size();
}
inline void ResponseVisitFiles::clear_default_dirs() {
  default_dirs_.Clear();
}
inline std::string* ResponseVisitFiles::add_default_dirs() {
  std::string* _s = _internal_add_default_dirs();
  // @@protoc_insertion_point(field_add_mutable:Global.Protocol.File.ResponseVisitFiles.default_dirs)
  return _s;
}
inline const std::string& ResponseVisitFiles::_internal_default_dirs(int index) const {
  return default_dirs_.Get(index);
}
inline const std::string& ResponseVisitFiles::default_dirs(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles.default_dirs)
  return _internal_default_dirs(index);
}
inline std::string* ResponseVisitFiles::mutable_default_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseVisitFiles.default_dirs)
  return default_dirs_.Mutable(index);
}
inline void ResponseVisitFiles::set_default_dirs(int index, const std::string& value) {
  default_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline void ResponseVisitFiles::set_default_dirs(int index, std::string&& value) {
  default_dirs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline void ResponseVisitFiles::set_default_dirs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  default_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline void ResponseVisitFiles::set_default_dirs(int index, const char* value, size_t size) {
  default_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline std::string* ResponseVisitFiles::_internal_add_default_dirs() {
  return default_dirs_.Add();
}
inline void ResponseVisitFiles::add_default_dirs(const std::string& value) {
  default_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline void ResponseVisitFiles::add_default_dirs(std::string&& value) {
  default_dirs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline void ResponseVisitFiles::add_default_dirs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  default_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline void ResponseVisitFiles::add_default_dirs(const char* value, size_t size) {
  default_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Global.Protocol.File.ResponseVisitFiles.default_dirs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResponseVisitFiles::default_dirs() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseVisitFiles.default_dirs)
  return default_dirs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResponseVisitFiles::mutable_default_dirs() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseVisitFiles.default_dirs)
  return &default_dirs_;
}

// repeated .Global.Protocol.File.EntryInfo entries = 4;
inline int ResponseVisitFiles::_internal_entries_size() const {
  return entries_.size();
}
inline int ResponseVisitFiles::entries_size() const {
  return _internal_entries_size();
}
inline void ResponseVisitFiles::clear_entries() {
  entries_.Clear();
}
inline ::Global::Protocol::File::EntryInfo* ResponseVisitFiles::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseVisitFiles.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
ResponseVisitFiles::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseVisitFiles.entries)
  return &entries_;
}
inline const ::Global::Protocol::File::EntryInfo& ResponseVisitFiles::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Global::Protocol::File::EntryInfo& ResponseVisitFiles::entries(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles.entries)
  return _internal_entries(index);
}
inline ::Global::Protocol::File::EntryInfo* ResponseVisitFiles::_internal_add_entries() {
  return entries_.Add();
}
inline ::Global::Protocol::File::EntryInfo* ResponseVisitFiles::add_entries() {
  ::Global::Protocol::File::EntryInfo* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseVisitFiles.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
ResponseVisitFiles::entries() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseVisitFiles.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestVisitFiles2

// int64 user_id = 1;
inline void RequestVisitFiles2::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestVisitFiles2::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestVisitFiles2::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestVisitFiles2.user_id)
  return _internal_user_id();
}
inline void RequestVisitFiles2::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestVisitFiles2::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestVisitFiles2.user_id)
}

// uint64 async_task_id = 2;
inline void RequestVisitFiles2::clear_async_task_id() {
  async_task_id_ = uint64_t{0u};
}
inline uint64_t RequestVisitFiles2::_internal_async_task_id() const {
  return async_task_id_;
}
inline uint64_t RequestVisitFiles2::async_task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestVisitFiles2.async_task_id)
  return _internal_async_task_id();
}
inline void RequestVisitFiles2::_internal_set_async_task_id(uint64_t value) {
  
  async_task_id_ = value;
}
inline void RequestVisitFiles2::set_async_task_id(uint64_t value) {
  _internal_set_async_task_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestVisitFiles2.async_task_id)
}

// uint32 async_task_certificate = 3;
inline void RequestVisitFiles2::clear_async_task_certificate() {
  async_task_certificate_ = 0u;
}
inline uint32_t RequestVisitFiles2::_internal_async_task_certificate() const {
  return async_task_certificate_;
}
inline uint32_t RequestVisitFiles2::async_task_certificate() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestVisitFiles2.async_task_certificate)
  return _internal_async_task_certificate();
}
inline void RequestVisitFiles2::_internal_set_async_task_certificate(uint32_t value) {
  
  async_task_certificate_ = value;
}
inline void RequestVisitFiles2::set_async_task_certificate(uint32_t value) {
  _internal_set_async_task_certificate(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestVisitFiles2.async_task_certificate)
}

// string auth_string = 4;
inline void RequestVisitFiles2::clear_auth_string() {
  auth_string_.ClearToEmpty();
}
inline const std::string& RequestVisitFiles2::auth_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestVisitFiles2.auth_string)
  return _internal_auth_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestVisitFiles2::set_auth_string(ArgT0&& arg0, ArgT... args) {
 
 auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestVisitFiles2.auth_string)
}
inline std::string* RequestVisitFiles2::mutable_auth_string() {
  std::string* _s = _internal_mutable_auth_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestVisitFiles2.auth_string)
  return _s;
}
inline const std::string& RequestVisitFiles2::_internal_auth_string() const {
  return auth_string_.Get();
}
inline void RequestVisitFiles2::_internal_set_auth_string(const std::string& value) {
  
  auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestVisitFiles2::_internal_mutable_auth_string() {
  
  return auth_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestVisitFiles2::release_auth_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestVisitFiles2.auth_string)
  return auth_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestVisitFiles2::set_allocated_auth_string(std::string* auth_string) {
  if (auth_string != nullptr) {
    
  } else {
    
  }
  auth_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestVisitFiles2.auth_string)
}

// -------------------------------------------------------------------

// ResponseVisitFiles2

// uint64 async_task_id = 1;
inline void ResponseVisitFiles2::clear_async_task_id() {
  async_task_id_ = uint64_t{0u};
}
inline uint64_t ResponseVisitFiles2::_internal_async_task_id() const {
  return async_task_id_;
}
inline uint64_t ResponseVisitFiles2::async_task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles2.async_task_id)
  return _internal_async_task_id();
}
inline void ResponseVisitFiles2::_internal_set_async_task_id(uint64_t value) {
  
  async_task_id_ = value;
}
inline void ResponseVisitFiles2::set_async_task_id(uint64_t value) {
  _internal_set_async_task_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles2.async_task_id)
}

// uint32 async_task_certificate = 2;
inline void ResponseVisitFiles2::clear_async_task_certificate() {
  async_task_certificate_ = 0u;
}
inline uint32_t ResponseVisitFiles2::_internal_async_task_certificate() const {
  return async_task_certificate_;
}
inline uint32_t ResponseVisitFiles2::async_task_certificate() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles2.async_task_certificate)
  return _internal_async_task_certificate();
}
inline void ResponseVisitFiles2::_internal_set_async_task_certificate(uint32_t value) {
  
  async_task_certificate_ = value;
}
inline void ResponseVisitFiles2::set_async_task_certificate(uint32_t value) {
  _internal_set_async_task_certificate(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles2.async_task_certificate)
}

// int32 err_code = 3;
inline void ResponseVisitFiles2::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseVisitFiles2::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseVisitFiles2::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles2.err_code)
  return _internal_err_code();
}
inline void ResponseVisitFiles2::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseVisitFiles2::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles2.err_code)
}

// string err_string = 4;
inline void ResponseVisitFiles2::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseVisitFiles2::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles2.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseVisitFiles2::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles2.err_string)
}
inline std::string* ResponseVisitFiles2::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseVisitFiles2.err_string)
  return _s;
}
inline const std::string& ResponseVisitFiles2::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseVisitFiles2::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseVisitFiles2::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseVisitFiles2::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseVisitFiles2.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseVisitFiles2::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseVisitFiles2.err_string)
}

// repeated string default_dirs = 5;
inline int ResponseVisitFiles2::_internal_default_dirs_size() const {
  return default_dirs_.size();
}
inline int ResponseVisitFiles2::default_dirs_size() const {
  return _internal_default_dirs_size();
}
inline void ResponseVisitFiles2::clear_default_dirs() {
  default_dirs_.Clear();
}
inline std::string* ResponseVisitFiles2::add_default_dirs() {
  std::string* _s = _internal_add_default_dirs();
  // @@protoc_insertion_point(field_add_mutable:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
  return _s;
}
inline const std::string& ResponseVisitFiles2::_internal_default_dirs(int index) const {
  return default_dirs_.Get(index);
}
inline const std::string& ResponseVisitFiles2::default_dirs(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
  return _internal_default_dirs(index);
}
inline std::string* ResponseVisitFiles2::mutable_default_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
  return default_dirs_.Mutable(index);
}
inline void ResponseVisitFiles2::set_default_dirs(int index, const std::string& value) {
  default_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline void ResponseVisitFiles2::set_default_dirs(int index, std::string&& value) {
  default_dirs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline void ResponseVisitFiles2::set_default_dirs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  default_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline void ResponseVisitFiles2::set_default_dirs(int index, const char* value, size_t size) {
  default_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline std::string* ResponseVisitFiles2::_internal_add_default_dirs() {
  return default_dirs_.Add();
}
inline void ResponseVisitFiles2::add_default_dirs(const std::string& value) {
  default_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline void ResponseVisitFiles2::add_default_dirs(std::string&& value) {
  default_dirs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline void ResponseVisitFiles2::add_default_dirs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  default_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline void ResponseVisitFiles2::add_default_dirs(const char* value, size_t size) {
  default_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResponseVisitFiles2::default_dirs() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
  return default_dirs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResponseVisitFiles2::mutable_default_dirs() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseVisitFiles2.default_dirs)
  return &default_dirs_;
}

// repeated .Global.Protocol.File.EntryInfo entries = 6;
inline int ResponseVisitFiles2::_internal_entries_size() const {
  return entries_.size();
}
inline int ResponseVisitFiles2::entries_size() const {
  return _internal_entries_size();
}
inline void ResponseVisitFiles2::clear_entries() {
  entries_.Clear();
}
inline ::Global::Protocol::File::EntryInfo* ResponseVisitFiles2::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseVisitFiles2.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
ResponseVisitFiles2::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseVisitFiles2.entries)
  return &entries_;
}
inline const ::Global::Protocol::File::EntryInfo& ResponseVisitFiles2::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Global::Protocol::File::EntryInfo& ResponseVisitFiles2::entries(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseVisitFiles2.entries)
  return _internal_entries(index);
}
inline ::Global::Protocol::File::EntryInfo* ResponseVisitFiles2::_internal_add_entries() {
  return entries_.Add();
}
inline ::Global::Protocol::File::EntryInfo* ResponseVisitFiles2::add_entries() {
  ::Global::Protocol::File::EntryInfo* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseVisitFiles2.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
ResponseVisitFiles2::entries() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseVisitFiles2.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestMakeDirectory

// int64 seq = 1;
inline void RequestMakeDirectory::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestMakeDirectory::_internal_seq() const {
  return seq_;
}
inline int64_t RequestMakeDirectory::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestMakeDirectory.seq)
  return _internal_seq();
}
inline void RequestMakeDirectory::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestMakeDirectory::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestMakeDirectory.seq)
}

// int64 user_id = 2;
inline void RequestMakeDirectory::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestMakeDirectory::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestMakeDirectory::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestMakeDirectory.user_id)
  return _internal_user_id();
}
inline void RequestMakeDirectory::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestMakeDirectory::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestMakeDirectory.user_id)
}

// string dir = 3;
inline void RequestMakeDirectory::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& RequestMakeDirectory::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestMakeDirectory.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMakeDirectory::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestMakeDirectory.dir)
}
inline std::string* RequestMakeDirectory::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestMakeDirectory.dir)
  return _s;
}
inline const std::string& RequestMakeDirectory::_internal_dir() const {
  return dir_.Get();
}
inline void RequestMakeDirectory::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestMakeDirectory::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestMakeDirectory::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestMakeDirectory.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestMakeDirectory::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestMakeDirectory.dir)
}

// string name = 4;
inline void RequestMakeDirectory::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RequestMakeDirectory::name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestMakeDirectory.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMakeDirectory::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestMakeDirectory.name)
}
inline std::string* RequestMakeDirectory::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestMakeDirectory.name)
  return _s;
}
inline const std::string& RequestMakeDirectory::_internal_name() const {
  return name_.Get();
}
inline void RequestMakeDirectory::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestMakeDirectory::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestMakeDirectory::release_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestMakeDirectory.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestMakeDirectory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestMakeDirectory.name)
}

// -------------------------------------------------------------------

// ResponseMakeDirectory

// int64 seq = 1;
inline void ResponseMakeDirectory::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseMakeDirectory::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseMakeDirectory::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.seq)
  return _internal_seq();
}
inline void ResponseMakeDirectory::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseMakeDirectory::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.seq)
}

// int64 user_id = 2;
inline void ResponseMakeDirectory::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseMakeDirectory::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseMakeDirectory::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.user_id)
  return _internal_user_id();
}
inline void ResponseMakeDirectory::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseMakeDirectory::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.user_id)
}

// int32 err_code = 3;
inline void ResponseMakeDirectory::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseMakeDirectory::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseMakeDirectory::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.err_code)
  return _internal_err_code();
}
inline void ResponseMakeDirectory::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseMakeDirectory::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.err_code)
}

// string err_string = 4;
inline void ResponseMakeDirectory::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseMakeDirectory::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMakeDirectory::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.err_string)
}
inline std::string* ResponseMakeDirectory::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseMakeDirectory.err_string)
  return _s;
}
inline const std::string& ResponseMakeDirectory::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseMakeDirectory::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseMakeDirectory.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMakeDirectory::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseMakeDirectory.err_string)
}

// string dir = 5;
inline void ResponseMakeDirectory::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& ResponseMakeDirectory::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMakeDirectory::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.dir)
}
inline std::string* ResponseMakeDirectory::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseMakeDirectory.dir)
  return _s;
}
inline const std::string& ResponseMakeDirectory::_internal_dir() const {
  return dir_.Get();
}
inline void ResponseMakeDirectory::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseMakeDirectory.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMakeDirectory::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseMakeDirectory.dir)
}

// string name = 6;
inline void ResponseMakeDirectory::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResponseMakeDirectory::name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMakeDirectory::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.name)
}
inline std::string* ResponseMakeDirectory::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseMakeDirectory.name)
  return _s;
}
inline const std::string& ResponseMakeDirectory::_internal_name() const {
  return name_.Get();
}
inline void ResponseMakeDirectory::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::release_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseMakeDirectory.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMakeDirectory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseMakeDirectory.name)
}

// string last_modifying_time = 7;
inline void ResponseMakeDirectory::clear_last_modifying_time() {
  last_modifying_time_.ClearToEmpty();
}
inline const std::string& ResponseMakeDirectory::last_modifying_time() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseMakeDirectory.last_modifying_time)
  return _internal_last_modifying_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMakeDirectory::set_last_modifying_time(ArgT0&& arg0, ArgT... args) {
 
 last_modifying_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseMakeDirectory.last_modifying_time)
}
inline std::string* ResponseMakeDirectory::mutable_last_modifying_time() {
  std::string* _s = _internal_mutable_last_modifying_time();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseMakeDirectory.last_modifying_time)
  return _s;
}
inline const std::string& ResponseMakeDirectory::_internal_last_modifying_time() const {
  return last_modifying_time_.Get();
}
inline void ResponseMakeDirectory::_internal_set_last_modifying_time(const std::string& value) {
  
  last_modifying_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::_internal_mutable_last_modifying_time() {
  
  return last_modifying_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMakeDirectory::release_last_modifying_time() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseMakeDirectory.last_modifying_time)
  return last_modifying_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMakeDirectory::set_allocated_last_modifying_time(std::string* last_modifying_time) {
  if (last_modifying_time != nullptr) {
    
  } else {
    
  }
  last_modifying_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_modifying_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_modifying_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_modifying_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseMakeDirectory.last_modifying_time)
}

// -------------------------------------------------------------------

// RequestDeleteEntry

// int64 seq = 1;
inline void RequestDeleteEntry::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestDeleteEntry::_internal_seq() const {
  return seq_;
}
inline int64_t RequestDeleteEntry::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestDeleteEntry.seq)
  return _internal_seq();
}
inline void RequestDeleteEntry::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestDeleteEntry::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestDeleteEntry.seq)
}

// int64 user_id = 2;
inline void RequestDeleteEntry::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestDeleteEntry::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestDeleteEntry::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestDeleteEntry.user_id)
  return _internal_user_id();
}
inline void RequestDeleteEntry::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestDeleteEntry::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestDeleteEntry.user_id)
}

// string dir = 3;
inline void RequestDeleteEntry::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& RequestDeleteEntry::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestDeleteEntry.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestDeleteEntry::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestDeleteEntry.dir)
}
inline std::string* RequestDeleteEntry::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestDeleteEntry.dir)
  return _s;
}
inline const std::string& RequestDeleteEntry::_internal_dir() const {
  return dir_.Get();
}
inline void RequestDeleteEntry::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestDeleteEntry::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestDeleteEntry::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestDeleteEntry.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestDeleteEntry::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestDeleteEntry.dir)
}

// string name = 4;
inline void RequestDeleteEntry::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RequestDeleteEntry::name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestDeleteEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestDeleteEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestDeleteEntry.name)
}
inline std::string* RequestDeleteEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestDeleteEntry.name)
  return _s;
}
inline const std::string& RequestDeleteEntry::_internal_name() const {
  return name_.Get();
}
inline void RequestDeleteEntry::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestDeleteEntry::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestDeleteEntry::release_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestDeleteEntry.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestDeleteEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestDeleteEntry.name)
}

// -------------------------------------------------------------------

// ResponseDeleteEntry

// int64 seq = 1;
inline void ResponseDeleteEntry::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseDeleteEntry::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseDeleteEntry::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseDeleteEntry.seq)
  return _internal_seq();
}
inline void ResponseDeleteEntry::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseDeleteEntry::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseDeleteEntry.seq)
}

// int64 user_id = 2;
inline void ResponseDeleteEntry::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseDeleteEntry::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseDeleteEntry::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseDeleteEntry.user_id)
  return _internal_user_id();
}
inline void ResponseDeleteEntry::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseDeleteEntry::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseDeleteEntry.user_id)
}

// int32 err_code = 3;
inline void ResponseDeleteEntry::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseDeleteEntry::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseDeleteEntry::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseDeleteEntry.err_code)
  return _internal_err_code();
}
inline void ResponseDeleteEntry::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseDeleteEntry::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseDeleteEntry.err_code)
}

// string err_string = 4;
inline void ResponseDeleteEntry::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseDeleteEntry::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseDeleteEntry.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseDeleteEntry::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseDeleteEntry.err_string)
}
inline std::string* ResponseDeleteEntry::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseDeleteEntry.err_string)
  return _s;
}
inline const std::string& ResponseDeleteEntry::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseDeleteEntry::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseDeleteEntry::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseDeleteEntry::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseDeleteEntry.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseDeleteEntry::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseDeleteEntry.err_string)
}

// string dir = 5;
inline void ResponseDeleteEntry::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& ResponseDeleteEntry::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseDeleteEntry.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseDeleteEntry::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseDeleteEntry.dir)
}
inline std::string* ResponseDeleteEntry::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseDeleteEntry.dir)
  return _s;
}
inline const std::string& ResponseDeleteEntry::_internal_dir() const {
  return dir_.Get();
}
inline void ResponseDeleteEntry::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseDeleteEntry::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseDeleteEntry::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseDeleteEntry.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseDeleteEntry::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseDeleteEntry.dir)
}

// string name = 6;
inline void ResponseDeleteEntry::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResponseDeleteEntry::name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseDeleteEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseDeleteEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseDeleteEntry.name)
}
inline std::string* ResponseDeleteEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseDeleteEntry.name)
  return _s;
}
inline const std::string& ResponseDeleteEntry::_internal_name() const {
  return name_.Get();
}
inline void ResponseDeleteEntry::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseDeleteEntry::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseDeleteEntry::release_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseDeleteEntry.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseDeleteEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseDeleteEntry.name)
}

// -------------------------------------------------------------------

// RequestRenameEntry

// int64 seq = 1;
inline void RequestRenameEntry::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestRenameEntry::_internal_seq() const {
  return seq_;
}
inline int64_t RequestRenameEntry::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestRenameEntry.seq)
  return _internal_seq();
}
inline void RequestRenameEntry::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestRenameEntry::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestRenameEntry.seq)
}

// int64 user_id = 2;
inline void RequestRenameEntry::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestRenameEntry::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestRenameEntry::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestRenameEntry.user_id)
  return _internal_user_id();
}
inline void RequestRenameEntry::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestRenameEntry::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestRenameEntry.user_id)
}

// string dir = 3;
inline void RequestRenameEntry::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& RequestRenameEntry::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestRenameEntry.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestRenameEntry::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestRenameEntry.dir)
}
inline std::string* RequestRenameEntry::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestRenameEntry.dir)
  return _s;
}
inline const std::string& RequestRenameEntry::_internal_dir() const {
  return dir_.Get();
}
inline void RequestRenameEntry::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestRenameEntry::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestRenameEntry::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestRenameEntry.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestRenameEntry::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestRenameEntry.dir)
}

// string old_name = 4;
inline void RequestRenameEntry::clear_old_name() {
  old_name_.ClearToEmpty();
}
inline const std::string& RequestRenameEntry::old_name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestRenameEntry.old_name)
  return _internal_old_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestRenameEntry::set_old_name(ArgT0&& arg0, ArgT... args) {
 
 old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestRenameEntry.old_name)
}
inline std::string* RequestRenameEntry::mutable_old_name() {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestRenameEntry.old_name)
  return _s;
}
inline const std::string& RequestRenameEntry::_internal_old_name() const {
  return old_name_.Get();
}
inline void RequestRenameEntry::_internal_set_old_name(const std::string& value) {
  
  old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestRenameEntry::_internal_mutable_old_name() {
  
  return old_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestRenameEntry::release_old_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestRenameEntry.old_name)
  return old_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestRenameEntry::set_allocated_old_name(std::string* old_name) {
  if (old_name != nullptr) {
    
  } else {
    
  }
  old_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (old_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    old_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestRenameEntry.old_name)
}

// string new_name = 5;
inline void RequestRenameEntry::clear_new_name() {
  new_name_.ClearToEmpty();
}
inline const std::string& RequestRenameEntry::new_name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestRenameEntry.new_name)
  return _internal_new_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestRenameEntry::set_new_name(ArgT0&& arg0, ArgT... args) {
 
 new_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestRenameEntry.new_name)
}
inline std::string* RequestRenameEntry::mutable_new_name() {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestRenameEntry.new_name)
  return _s;
}
inline const std::string& RequestRenameEntry::_internal_new_name() const {
  return new_name_.Get();
}
inline void RequestRenameEntry::_internal_set_new_name(const std::string& value) {
  
  new_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestRenameEntry::_internal_mutable_new_name() {
  
  return new_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestRenameEntry::release_new_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestRenameEntry.new_name)
  return new_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestRenameEntry::set_allocated_new_name(std::string* new_name) {
  if (new_name != nullptr) {
    
  } else {
    
  }
  new_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestRenameEntry.new_name)
}

// -------------------------------------------------------------------

// ResponseRenameEntry

// int64 seq = 1;
inline void ResponseRenameEntry::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseRenameEntry::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseRenameEntry::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.seq)
  return _internal_seq();
}
inline void ResponseRenameEntry::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseRenameEntry::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.seq)
}

// int64 user_id = 2;
inline void ResponseRenameEntry::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseRenameEntry::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseRenameEntry::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.user_id)
  return _internal_user_id();
}
inline void ResponseRenameEntry::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseRenameEntry::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.user_id)
}

// int32 err_code = 3;
inline void ResponseRenameEntry::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseRenameEntry::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseRenameEntry::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.err_code)
  return _internal_err_code();
}
inline void ResponseRenameEntry::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseRenameEntry::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.err_code)
}

// string err_string = 4;
inline void ResponseRenameEntry::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseRenameEntry::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRenameEntry::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.err_string)
}
inline std::string* ResponseRenameEntry::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseRenameEntry.err_string)
  return _s;
}
inline const std::string& ResponseRenameEntry::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseRenameEntry::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseRenameEntry.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRenameEntry::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseRenameEntry.err_string)
}

// string dir = 5;
inline void ResponseRenameEntry::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& ResponseRenameEntry::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRenameEntry::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.dir)
}
inline std::string* ResponseRenameEntry::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseRenameEntry.dir)
  return _s;
}
inline const std::string& ResponseRenameEntry::_internal_dir() const {
  return dir_.Get();
}
inline void ResponseRenameEntry::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseRenameEntry.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRenameEntry::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseRenameEntry.dir)
}

// string old_name = 6;
inline void ResponseRenameEntry::clear_old_name() {
  old_name_.ClearToEmpty();
}
inline const std::string& ResponseRenameEntry::old_name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.old_name)
  return _internal_old_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRenameEntry::set_old_name(ArgT0&& arg0, ArgT... args) {
 
 old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.old_name)
}
inline std::string* ResponseRenameEntry::mutable_old_name() {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseRenameEntry.old_name)
  return _s;
}
inline const std::string& ResponseRenameEntry::_internal_old_name() const {
  return old_name_.Get();
}
inline void ResponseRenameEntry::_internal_set_old_name(const std::string& value) {
  
  old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::_internal_mutable_old_name() {
  
  return old_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::release_old_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseRenameEntry.old_name)
  return old_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRenameEntry::set_allocated_old_name(std::string* old_name) {
  if (old_name != nullptr) {
    
  } else {
    
  }
  old_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (old_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    old_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseRenameEntry.old_name)
}

// string new_name = 7;
inline void ResponseRenameEntry::clear_new_name() {
  new_name_.ClearToEmpty();
}
inline const std::string& ResponseRenameEntry::new_name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.new_name)
  return _internal_new_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRenameEntry::set_new_name(ArgT0&& arg0, ArgT... args) {
 
 new_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.new_name)
}
inline std::string* ResponseRenameEntry::mutable_new_name() {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseRenameEntry.new_name)
  return _s;
}
inline const std::string& ResponseRenameEntry::_internal_new_name() const {
  return new_name_.Get();
}
inline void ResponseRenameEntry::_internal_set_new_name(const std::string& value) {
  
  new_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::_internal_mutable_new_name() {
  
  return new_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::release_new_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseRenameEntry.new_name)
  return new_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRenameEntry::set_allocated_new_name(std::string* new_name) {
  if (new_name != nullptr) {
    
  } else {
    
  }
  new_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseRenameEntry.new_name)
}

// string last_modifying_time = 8;
inline void ResponseRenameEntry::clear_last_modifying_time() {
  last_modifying_time_.ClearToEmpty();
}
inline const std::string& ResponseRenameEntry::last_modifying_time() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseRenameEntry.last_modifying_time)
  return _internal_last_modifying_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRenameEntry::set_last_modifying_time(ArgT0&& arg0, ArgT... args) {
 
 last_modifying_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseRenameEntry.last_modifying_time)
}
inline std::string* ResponseRenameEntry::mutable_last_modifying_time() {
  std::string* _s = _internal_mutable_last_modifying_time();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseRenameEntry.last_modifying_time)
  return _s;
}
inline const std::string& ResponseRenameEntry::_internal_last_modifying_time() const {
  return last_modifying_time_.Get();
}
inline void ResponseRenameEntry::_internal_set_last_modifying_time(const std::string& value) {
  
  last_modifying_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::_internal_mutable_last_modifying_time() {
  
  return last_modifying_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRenameEntry::release_last_modifying_time() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseRenameEntry.last_modifying_time)
  return last_modifying_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRenameEntry::set_allocated_last_modifying_time(std::string* last_modifying_time) {
  if (last_modifying_time != nullptr) {
    
  } else {
    
  }
  last_modifying_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_modifying_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_modifying_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_modifying_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseRenameEntry.last_modifying_time)
}

// -------------------------------------------------------------------

// RequestGoUp

// int64 seq = 1;
inline void RequestGoUp::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestGoUp::_internal_seq() const {
  return seq_;
}
inline int64_t RequestGoUp::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestGoUp.seq)
  return _internal_seq();
}
inline void RequestGoUp::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestGoUp::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestGoUp.seq)
}

// int64 user_id = 2;
inline void RequestGoUp::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestGoUp::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestGoUp::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestGoUp.user_id)
  return _internal_user_id();
}
inline void RequestGoUp::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestGoUp::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestGoUp.user_id)
}

// string dir = 3;
inline void RequestGoUp::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& RequestGoUp::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestGoUp.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestGoUp::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestGoUp.dir)
}
inline std::string* RequestGoUp::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestGoUp.dir)
  return _s;
}
inline const std::string& RequestGoUp::_internal_dir() const {
  return dir_.Get();
}
inline void RequestGoUp::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestGoUp::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestGoUp::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestGoUp.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestGoUp::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestGoUp.dir)
}

// -------------------------------------------------------------------

// ResponseGoUp

// int64 seq = 1;
inline void ResponseGoUp::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseGoUp::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseGoUp::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoUp.seq)
  return _internal_seq();
}
inline void ResponseGoUp::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseGoUp::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoUp.seq)
}

// int64 user_id = 2;
inline void ResponseGoUp::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseGoUp::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseGoUp::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoUp.user_id)
  return _internal_user_id();
}
inline void ResponseGoUp::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseGoUp::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoUp.user_id)
}

// int32 err_code = 3;
inline void ResponseGoUp::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseGoUp::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseGoUp::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoUp.err_code)
  return _internal_err_code();
}
inline void ResponseGoUp::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseGoUp::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoUp.err_code)
}

// string err_string = 4;
inline void ResponseGoUp::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseGoUp::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoUp.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseGoUp::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoUp.err_string)
}
inline std::string* ResponseGoUp::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseGoUp.err_string)
  return _s;
}
inline const std::string& ResponseGoUp::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseGoUp::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseGoUp::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseGoUp::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseGoUp.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseGoUp::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseGoUp.err_string)
}

// string dir = 5;
inline void ResponseGoUp::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& ResponseGoUp::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoUp.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseGoUp::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoUp.dir)
}
inline std::string* ResponseGoUp::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseGoUp.dir)
  return _s;
}
inline const std::string& ResponseGoUp::_internal_dir() const {
  return dir_.Get();
}
inline void ResponseGoUp::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseGoUp::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseGoUp::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseGoUp.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseGoUp::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseGoUp.dir)
}

// repeated .Global.Protocol.File.EntryInfo entries = 6;
inline int ResponseGoUp::_internal_entries_size() const {
  return entries_.size();
}
inline int ResponseGoUp::entries_size() const {
  return _internal_entries_size();
}
inline void ResponseGoUp::clear_entries() {
  entries_.Clear();
}
inline ::Global::Protocol::File::EntryInfo* ResponseGoUp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseGoUp.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
ResponseGoUp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseGoUp.entries)
  return &entries_;
}
inline const ::Global::Protocol::File::EntryInfo& ResponseGoUp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Global::Protocol::File::EntryInfo& ResponseGoUp::entries(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoUp.entries)
  return _internal_entries(index);
}
inline ::Global::Protocol::File::EntryInfo* ResponseGoUp::_internal_add_entries() {
  return entries_.Add();
}
inline ::Global::Protocol::File::EntryInfo* ResponseGoUp::add_entries() {
  ::Global::Protocol::File::EntryInfo* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseGoUp.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
ResponseGoUp::entries() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseGoUp.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestGoHome

// int64 seq = 1;
inline void RequestGoHome::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestGoHome::_internal_seq() const {
  return seq_;
}
inline int64_t RequestGoHome::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestGoHome.seq)
  return _internal_seq();
}
inline void RequestGoHome::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestGoHome::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestGoHome.seq)
}

// int64 user_id = 2;
inline void RequestGoHome::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestGoHome::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestGoHome::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestGoHome.user_id)
  return _internal_user_id();
}
inline void RequestGoHome::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestGoHome::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestGoHome.user_id)
}

// -------------------------------------------------------------------

// ResponseGoHome

// int64 seq = 1;
inline void ResponseGoHome::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseGoHome::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseGoHome::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoHome.seq)
  return _internal_seq();
}
inline void ResponseGoHome::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseGoHome::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoHome.seq)
}

// int64 user_id = 2;
inline void ResponseGoHome::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseGoHome::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseGoHome::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoHome.user_id)
  return _internal_user_id();
}
inline void ResponseGoHome::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseGoHome::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoHome.user_id)
}

// int32 err_code = 3;
inline void ResponseGoHome::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseGoHome::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseGoHome::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoHome.err_code)
  return _internal_err_code();
}
inline void ResponseGoHome::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseGoHome::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoHome.err_code)
}

// string err_string = 4;
inline void ResponseGoHome::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseGoHome::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoHome.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseGoHome::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoHome.err_string)
}
inline std::string* ResponseGoHome::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseGoHome.err_string)
  return _s;
}
inline const std::string& ResponseGoHome::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseGoHome::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseGoHome::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseGoHome::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseGoHome.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseGoHome::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseGoHome.err_string)
}

// string dir = 5;
inline void ResponseGoHome::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& ResponseGoHome::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoHome.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseGoHome::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseGoHome.dir)
}
inline std::string* ResponseGoHome::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseGoHome.dir)
  return _s;
}
inline const std::string& ResponseGoHome::_internal_dir() const {
  return dir_.Get();
}
inline void ResponseGoHome::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseGoHome::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseGoHome::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseGoHome.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseGoHome::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseGoHome.dir)
}

// repeated .Global.Protocol.File.EntryInfo entries = 6;
inline int ResponseGoHome::_internal_entries_size() const {
  return entries_.size();
}
inline int ResponseGoHome::entries_size() const {
  return _internal_entries_size();
}
inline void ResponseGoHome::clear_entries() {
  entries_.Clear();
}
inline ::Global::Protocol::File::EntryInfo* ResponseGoHome::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseGoHome.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
ResponseGoHome::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseGoHome.entries)
  return &entries_;
}
inline const ::Global::Protocol::File::EntryInfo& ResponseGoHome::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Global::Protocol::File::EntryInfo& ResponseGoHome::entries(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseGoHome.entries)
  return _internal_entries(index);
}
inline ::Global::Protocol::File::EntryInfo* ResponseGoHome::_internal_add_entries() {
  return entries_.Add();
}
inline ::Global::Protocol::File::EntryInfo* ResponseGoHome::add_entries() {
  ::Global::Protocol::File::EntryInfo* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseGoHome.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
ResponseGoHome::entries() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseGoHome.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestListEntries

// int64 seq = 1;
inline void RequestListEntries::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestListEntries::_internal_seq() const {
  return seq_;
}
inline int64_t RequestListEntries::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestListEntries.seq)
  return _internal_seq();
}
inline void RequestListEntries::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestListEntries::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestListEntries.seq)
}

// int64 user_id = 2;
inline void RequestListEntries::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestListEntries::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestListEntries::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestListEntries.user_id)
  return _internal_user_id();
}
inline void RequestListEntries::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestListEntries::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestListEntries.user_id)
}

// string dir = 3;
inline void RequestListEntries::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& RequestListEntries::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestListEntries.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestListEntries::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestListEntries.dir)
}
inline std::string* RequestListEntries::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestListEntries.dir)
  return _s;
}
inline const std::string& RequestListEntries::_internal_dir() const {
  return dir_.Get();
}
inline void RequestListEntries::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestListEntries::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestListEntries::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestListEntries.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestListEntries::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestListEntries.dir)
}

// -------------------------------------------------------------------

// ResponseListEntries

// int64 seq = 1;
inline void ResponseListEntries::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseListEntries::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseListEntries::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseListEntries.seq)
  return _internal_seq();
}
inline void ResponseListEntries::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseListEntries::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseListEntries.seq)
}

// int64 user_id = 2;
inline void ResponseListEntries::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseListEntries::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseListEntries::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseListEntries.user_id)
  return _internal_user_id();
}
inline void ResponseListEntries::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseListEntries::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseListEntries.user_id)
}

// int32 err_code = 3;
inline void ResponseListEntries::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseListEntries::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseListEntries::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseListEntries.err_code)
  return _internal_err_code();
}
inline void ResponseListEntries::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseListEntries::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseListEntries.err_code)
}

// string err_string = 4;
inline void ResponseListEntries::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseListEntries::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseListEntries.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseListEntries::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseListEntries.err_string)
}
inline std::string* ResponseListEntries::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseListEntries.err_string)
  return _s;
}
inline const std::string& ResponseListEntries::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseListEntries::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseListEntries::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseListEntries::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseListEntries.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseListEntries::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseListEntries.err_string)
}

// string dir = 5;
inline void ResponseListEntries::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& ResponseListEntries::dir() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseListEntries.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseListEntries::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseListEntries.dir)
}
inline std::string* ResponseListEntries::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseListEntries.dir)
  return _s;
}
inline const std::string& ResponseListEntries::_internal_dir() const {
  return dir_.Get();
}
inline void ResponseListEntries::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseListEntries::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseListEntries::release_dir() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseListEntries.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseListEntries::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseListEntries.dir)
}

// repeated .Global.Protocol.File.EntryInfo entries = 6;
inline int ResponseListEntries::_internal_entries_size() const {
  return entries_.size();
}
inline int ResponseListEntries::entries_size() const {
  return _internal_entries_size();
}
inline void ResponseListEntries::clear_entries() {
  entries_.Clear();
}
inline ::Global::Protocol::File::EntryInfo* ResponseListEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseListEntries.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >*
ResponseListEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Global.Protocol.File.ResponseListEntries.entries)
  return &entries_;
}
inline const ::Global::Protocol::File::EntryInfo& ResponseListEntries::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Global::Protocol::File::EntryInfo& ResponseListEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseListEntries.entries)
  return _internal_entries(index);
}
inline ::Global::Protocol::File::EntryInfo* ResponseListEntries::_internal_add_entries() {
  return entries_.Add();
}
inline ::Global::Protocol::File::EntryInfo* ResponseListEntries::add_entries() {
  ::Global::Protocol::File::EntryInfo* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:Global.Protocol.File.ResponseListEntries.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Global::Protocol::File::EntryInfo >&
ResponseListEntries::entries() const {
  // @@protoc_insertion_point(field_list:Global.Protocol.File.ResponseListEntries.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestOpenFile

// int64 seq = 1;
inline void RequestOpenFile::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t RequestOpenFile::_internal_seq() const {
  return seq_;
}
inline int64_t RequestOpenFile::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.seq)
  return _internal_seq();
}
inline void RequestOpenFile::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void RequestOpenFile::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.seq)
}

// int64 user_id = 2;
inline void RequestOpenFile::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestOpenFile::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestOpenFile::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.user_id)
  return _internal_user_id();
}
inline void RequestOpenFile::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestOpenFile::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.user_id)
}

// string task_id = 3;
inline void RequestOpenFile::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& RequestOpenFile::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestOpenFile::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.task_id)
}
inline std::string* RequestOpenFile::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestOpenFile.task_id)
  return _s;
}
inline const std::string& RequestOpenFile::_internal_task_id() const {
  return task_id_.Get();
}
inline void RequestOpenFile::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestOpenFile::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestOpenFile::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestOpenFile.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestOpenFile::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestOpenFile.task_id)
}

// int32 mode = 4;
inline void RequestOpenFile::clear_mode() {
  mode_ = 0;
}
inline int32_t RequestOpenFile::_internal_mode() const {
  return mode_;
}
inline int32_t RequestOpenFile::mode() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.mode)
  return _internal_mode();
}
inline void RequestOpenFile::_internal_set_mode(int32_t value) {
  
  mode_ = value;
}
inline void RequestOpenFile::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.mode)
}

// string directory = 5;
inline void RequestOpenFile::clear_directory() {
  directory_.ClearToEmpty();
}
inline const std::string& RequestOpenFile::directory() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.directory)
  return _internal_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestOpenFile::set_directory(ArgT0&& arg0, ArgT... args) {
 
 directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.directory)
}
inline std::string* RequestOpenFile::mutable_directory() {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestOpenFile.directory)
  return _s;
}
inline const std::string& RequestOpenFile::_internal_directory() const {
  return directory_.Get();
}
inline void RequestOpenFile::_internal_set_directory(const std::string& value) {
  
  directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestOpenFile::_internal_mutable_directory() {
  
  return directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestOpenFile::release_directory() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestOpenFile.directory)
  return directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestOpenFile::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    
  } else {
    
  }
  directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (directory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestOpenFile.directory)
}

// string file_name = 6;
inline void RequestOpenFile::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& RequestOpenFile::file_name() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestOpenFile::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.file_name)
}
inline std::string* RequestOpenFile::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestOpenFile.file_name)
  return _s;
}
inline const std::string& RequestOpenFile::_internal_file_name() const {
  return file_name_.Get();
}
inline void RequestOpenFile::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestOpenFile::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestOpenFile::release_file_name() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestOpenFile.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestOpenFile::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestOpenFile.file_name)
}

// uint64 file_size = 7;
inline void RequestOpenFile::clear_file_size() {
  file_size_ = uint64_t{0u};
}
inline uint64_t RequestOpenFile::_internal_file_size() const {
  return file_size_;
}
inline uint64_t RequestOpenFile::file_size() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.file_size)
  return _internal_file_size();
}
inline void RequestOpenFile::_internal_set_file_size(uint64_t value) {
  
  file_size_ = value;
}
inline void RequestOpenFile::set_file_size(uint64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.file_size)
}

// uint64 seek = 8;
inline void RequestOpenFile::clear_seek() {
  seek_ = uint64_t{0u};
}
inline uint64_t RequestOpenFile::_internal_seek() const {
  return seek_;
}
inline uint64_t RequestOpenFile::seek() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.seek)
  return _internal_seek();
}
inline void RequestOpenFile::_internal_set_seek(uint64_t value) {
  
  seek_ = value;
}
inline void RequestOpenFile::set_seek(uint64_t value) {
  _internal_set_seek(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.seek)
}

// bool force = 9;
inline void RequestOpenFile::clear_force() {
  force_ = false;
}
inline bool RequestOpenFile::_internal_force() const {
  return force_;
}
inline bool RequestOpenFile::force() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestOpenFile.force)
  return _internal_force();
}
inline void RequestOpenFile::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void RequestOpenFile::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestOpenFile.force)
}

// -------------------------------------------------------------------

// ResponseOpenFile

// int64 seq = 1;
inline void ResponseOpenFile::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t ResponseOpenFile::_internal_seq() const {
  return seq_;
}
inline int64_t ResponseOpenFile::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseOpenFile.seq)
  return _internal_seq();
}
inline void ResponseOpenFile::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void ResponseOpenFile::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseOpenFile.seq)
}

// int64 user_id = 2;
inline void ResponseOpenFile::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseOpenFile::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseOpenFile::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseOpenFile.user_id)
  return _internal_user_id();
}
inline void ResponseOpenFile::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseOpenFile::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseOpenFile.user_id)
}

// int32 err_code = 3;
inline void ResponseOpenFile::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseOpenFile::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseOpenFile::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseOpenFile.err_code)
  return _internal_err_code();
}
inline void ResponseOpenFile::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseOpenFile::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseOpenFile.err_code)
}

// string err_string = 4;
inline void ResponseOpenFile::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseOpenFile::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseOpenFile.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseOpenFile::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseOpenFile.err_string)
}
inline std::string* ResponseOpenFile::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseOpenFile.err_string)
  return _s;
}
inline const std::string& ResponseOpenFile::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseOpenFile::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseOpenFile::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseOpenFile::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseOpenFile.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseOpenFile::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseOpenFile.err_string)
}

// string task_id = 5;
inline void ResponseOpenFile::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ResponseOpenFile::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseOpenFile.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseOpenFile::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseOpenFile.task_id)
}
inline std::string* ResponseOpenFile::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseOpenFile.task_id)
  return _s;
}
inline const std::string& ResponseOpenFile::_internal_task_id() const {
  return task_id_.Get();
}
inline void ResponseOpenFile::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseOpenFile::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseOpenFile::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseOpenFile.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseOpenFile::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseOpenFile.task_id)
}

// -------------------------------------------------------------------

// RequestWriteFileBlock

// int64 user_id = 1;
inline void RequestWriteFileBlock::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestWriteFileBlock::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestWriteFileBlock::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestWriteFileBlock.user_id)
  return _internal_user_id();
}
inline void RequestWriteFileBlock::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestWriteFileBlock::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestWriteFileBlock.user_id)
}

// string task_id = 2;
inline void RequestWriteFileBlock::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& RequestWriteFileBlock::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestWriteFileBlock.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestWriteFileBlock::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestWriteFileBlock.task_id)
}
inline std::string* RequestWriteFileBlock::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestWriteFileBlock.task_id)
  return _s;
}
inline const std::string& RequestWriteFileBlock::_internal_task_id() const {
  return task_id_.Get();
}
inline void RequestWriteFileBlock::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestWriteFileBlock::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestWriteFileBlock::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestWriteFileBlock.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestWriteFileBlock::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestWriteFileBlock.task_id)
}

// uint64 seek = 3;
inline void RequestWriteFileBlock::clear_seek() {
  seek_ = uint64_t{0u};
}
inline uint64_t RequestWriteFileBlock::_internal_seek() const {
  return seek_;
}
inline uint64_t RequestWriteFileBlock::seek() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestWriteFileBlock.seek)
  return _internal_seek();
}
inline void RequestWriteFileBlock::_internal_set_seek(uint64_t value) {
  
  seek_ = value;
}
inline void RequestWriteFileBlock::set_seek(uint64_t value) {
  _internal_set_seek(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestWriteFileBlock.seek)
}

// uint32 raw_data_len = 4;
inline void RequestWriteFileBlock::clear_raw_data_len() {
  raw_data_len_ = 0u;
}
inline uint32_t RequestWriteFileBlock::_internal_raw_data_len() const {
  return raw_data_len_;
}
inline uint32_t RequestWriteFileBlock::raw_data_len() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestWriteFileBlock.raw_data_len)
  return _internal_raw_data_len();
}
inline void RequestWriteFileBlock::_internal_set_raw_data_len(uint32_t value) {
  
  raw_data_len_ = value;
}
inline void RequestWriteFileBlock::set_raw_data_len(uint32_t value) {
  _internal_set_raw_data_len(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestWriteFileBlock.raw_data_len)
}

// bytes compressed_data = 5;
inline void RequestWriteFileBlock::clear_compressed_data() {
  compressed_data_.ClearToEmpty();
}
inline const std::string& RequestWriteFileBlock::compressed_data() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestWriteFileBlock.compressed_data)
  return _internal_compressed_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestWriteFileBlock::set_compressed_data(ArgT0&& arg0, ArgT... args) {
 
 compressed_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestWriteFileBlock.compressed_data)
}
inline std::string* RequestWriteFileBlock::mutable_compressed_data() {
  std::string* _s = _internal_mutable_compressed_data();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestWriteFileBlock.compressed_data)
  return _s;
}
inline const std::string& RequestWriteFileBlock::_internal_compressed_data() const {
  return compressed_data_.Get();
}
inline void RequestWriteFileBlock::_internal_set_compressed_data(const std::string& value) {
  
  compressed_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestWriteFileBlock::_internal_mutable_compressed_data() {
  
  return compressed_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestWriteFileBlock::release_compressed_data() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestWriteFileBlock.compressed_data)
  return compressed_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestWriteFileBlock::set_allocated_compressed_data(std::string* compressed_data) {
  if (compressed_data != nullptr) {
    
  } else {
    
  }
  compressed_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compressed_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (compressed_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    compressed_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestWriteFileBlock.compressed_data)
}

// -------------------------------------------------------------------

// ResponseWriteFileBlock

// int32 err_code = 1;
inline void ResponseWriteFileBlock::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseWriteFileBlock::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseWriteFileBlock::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseWriteFileBlock.err_code)
  return _internal_err_code();
}
inline void ResponseWriteFileBlock::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseWriteFileBlock::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseWriteFileBlock.err_code)
}

// string err_string = 2;
inline void ResponseWriteFileBlock::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseWriteFileBlock::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseWriteFileBlock.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseWriteFileBlock::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseWriteFileBlock.err_string)
}
inline std::string* ResponseWriteFileBlock::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseWriteFileBlock.err_string)
  return _s;
}
inline const std::string& ResponseWriteFileBlock::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseWriteFileBlock::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseWriteFileBlock::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseWriteFileBlock::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseWriteFileBlock.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseWriteFileBlock::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseWriteFileBlock.err_string)
}

// string task_id = 3;
inline void ResponseWriteFileBlock::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ResponseWriteFileBlock::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseWriteFileBlock.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseWriteFileBlock::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseWriteFileBlock.task_id)
}
inline std::string* ResponseWriteFileBlock::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseWriteFileBlock.task_id)
  return _s;
}
inline const std::string& ResponseWriteFileBlock::_internal_task_id() const {
  return task_id_.Get();
}
inline void ResponseWriteFileBlock::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseWriteFileBlock::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseWriteFileBlock::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseWriteFileBlock.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseWriteFileBlock::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseWriteFileBlock.task_id)
}

// int64 user_id = 4;
inline void ResponseWriteFileBlock::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseWriteFileBlock::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseWriteFileBlock::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseWriteFileBlock.user_id)
  return _internal_user_id();
}
inline void ResponseWriteFileBlock::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseWriteFileBlock::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseWriteFileBlock.user_id)
}

// uint64 after_seek = 5;
inline void ResponseWriteFileBlock::clear_after_seek() {
  after_seek_ = uint64_t{0u};
}
inline uint64_t ResponseWriteFileBlock::_internal_after_seek() const {
  return after_seek_;
}
inline uint64_t ResponseWriteFileBlock::after_seek() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseWriteFileBlock.after_seek)
  return _internal_after_seek();
}
inline void ResponseWriteFileBlock::_internal_set_after_seek(uint64_t value) {
  
  after_seek_ = value;
}
inline void ResponseWriteFileBlock::set_after_seek(uint64_t value) {
  _internal_set_after_seek(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseWriteFileBlock.after_seek)
}

// -------------------------------------------------------------------

// RequestReadFileBlock

// int64 user_id = 1;
inline void RequestReadFileBlock::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestReadFileBlock::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestReadFileBlock::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestReadFileBlock.user_id)
  return _internal_user_id();
}
inline void RequestReadFileBlock::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestReadFileBlock::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestReadFileBlock.user_id)
}

// string task_id = 2;
inline void RequestReadFileBlock::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& RequestReadFileBlock::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestReadFileBlock.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestReadFileBlock::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestReadFileBlock.task_id)
}
inline std::string* RequestReadFileBlock::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.RequestReadFileBlock.task_id)
  return _s;
}
inline const std::string& RequestReadFileBlock::_internal_task_id() const {
  return task_id_.Get();
}
inline void RequestReadFileBlock::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestReadFileBlock::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestReadFileBlock::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.RequestReadFileBlock.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestReadFileBlock::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.RequestReadFileBlock.task_id)
}

// uint64 seek = 3;
inline void RequestReadFileBlock::clear_seek() {
  seek_ = uint64_t{0u};
}
inline uint64_t RequestReadFileBlock::_internal_seek() const {
  return seek_;
}
inline uint64_t RequestReadFileBlock::seek() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestReadFileBlock.seek)
  return _internal_seek();
}
inline void RequestReadFileBlock::_internal_set_seek(uint64_t value) {
  
  seek_ = value;
}
inline void RequestReadFileBlock::set_seek(uint64_t value) {
  _internal_set_seek(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestReadFileBlock.seek)
}

// uint32 len = 4;
inline void RequestReadFileBlock::clear_len() {
  len_ = 0u;
}
inline uint32_t RequestReadFileBlock::_internal_len() const {
  return len_;
}
inline uint32_t RequestReadFileBlock::len() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.RequestReadFileBlock.len)
  return _internal_len();
}
inline void RequestReadFileBlock::_internal_set_len(uint32_t value) {
  
  len_ = value;
}
inline void RequestReadFileBlock::set_len(uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.RequestReadFileBlock.len)
}

// -------------------------------------------------------------------

// ResponseReadFileBlock

// int32 err_code = 1;
inline void ResponseReadFileBlock::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseReadFileBlock::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseReadFileBlock::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.err_code)
  return _internal_err_code();
}
inline void ResponseReadFileBlock::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseReadFileBlock::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.err_code)
}

// string err_string = 2;
inline void ResponseReadFileBlock::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseReadFileBlock::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseReadFileBlock::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.err_string)
}
inline std::string* ResponseReadFileBlock::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseReadFileBlock.err_string)
  return _s;
}
inline const std::string& ResponseReadFileBlock::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseReadFileBlock::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseReadFileBlock::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseReadFileBlock::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseReadFileBlock.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseReadFileBlock::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseReadFileBlock.err_string)
}

// string task_id = 3;
inline void ResponseReadFileBlock::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ResponseReadFileBlock::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseReadFileBlock::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.task_id)
}
inline std::string* ResponseReadFileBlock::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseReadFileBlock.task_id)
  return _s;
}
inline const std::string& ResponseReadFileBlock::_internal_task_id() const {
  return task_id_.Get();
}
inline void ResponseReadFileBlock::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseReadFileBlock::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseReadFileBlock::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseReadFileBlock.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseReadFileBlock::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseReadFileBlock.task_id)
}

// int64 user_id = 4;
inline void ResponseReadFileBlock::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseReadFileBlock::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseReadFileBlock::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.user_id)
  return _internal_user_id();
}
inline void ResponseReadFileBlock::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseReadFileBlock::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.user_id)
}

// uint64 seek = 5;
inline void ResponseReadFileBlock::clear_seek() {
  seek_ = uint64_t{0u};
}
inline uint64_t ResponseReadFileBlock::_internal_seek() const {
  return seek_;
}
inline uint64_t ResponseReadFileBlock::seek() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.seek)
  return _internal_seek();
}
inline void ResponseReadFileBlock::_internal_set_seek(uint64_t value) {
  
  seek_ = value;
}
inline void ResponseReadFileBlock::set_seek(uint64_t value) {
  _internal_set_seek(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.seek)
}

// uint32 raw_data_len = 6;
inline void ResponseReadFileBlock::clear_raw_data_len() {
  raw_data_len_ = 0u;
}
inline uint32_t ResponseReadFileBlock::_internal_raw_data_len() const {
  return raw_data_len_;
}
inline uint32_t ResponseReadFileBlock::raw_data_len() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.raw_data_len)
  return _internal_raw_data_len();
}
inline void ResponseReadFileBlock::_internal_set_raw_data_len(uint32_t value) {
  
  raw_data_len_ = value;
}
inline void ResponseReadFileBlock::set_raw_data_len(uint32_t value) {
  _internal_set_raw_data_len(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.raw_data_len)
}

// bytes compressed_data = 7;
inline void ResponseReadFileBlock::clear_compressed_data() {
  compressed_data_.ClearToEmpty();
}
inline const std::string& ResponseReadFileBlock::compressed_data() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.ResponseReadFileBlock.compressed_data)
  return _internal_compressed_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseReadFileBlock::set_compressed_data(ArgT0&& arg0, ArgT... args) {
 
 compressed_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.ResponseReadFileBlock.compressed_data)
}
inline std::string* ResponseReadFileBlock::mutable_compressed_data() {
  std::string* _s = _internal_mutable_compressed_data();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.ResponseReadFileBlock.compressed_data)
  return _s;
}
inline const std::string& ResponseReadFileBlock::_internal_compressed_data() const {
  return compressed_data_.Get();
}
inline void ResponseReadFileBlock::_internal_set_compressed_data(const std::string& value) {
  
  compressed_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseReadFileBlock::_internal_mutable_compressed_data() {
  
  return compressed_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseReadFileBlock::release_compressed_data() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.ResponseReadFileBlock.compressed_data)
  return compressed_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseReadFileBlock::set_allocated_compressed_data(std::string* compressed_data) {
  if (compressed_data != nullptr) {
    
  } else {
    
  }
  compressed_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compressed_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (compressed_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    compressed_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.ResponseReadFileBlock.compressed_data)
}

// -------------------------------------------------------------------

// CloseFile

// int64 user_id = 1;
inline void CloseFile::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t CloseFile::_internal_user_id() const {
  return user_id_;
}
inline int64_t CloseFile::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.CloseFile.user_id)
  return _internal_user_id();
}
inline void CloseFile::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void CloseFile::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.File.CloseFile.user_id)
}

// string task_id = 2;
inline void CloseFile::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& CloseFile::task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.File.CloseFile.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseFile::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.File.CloseFile.task_id)
}
inline std::string* CloseFile::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.File.CloseFile.task_id)
  return _s;
}
inline const std::string& CloseFile::_internal_task_id() const {
  return task_id_.Get();
}
inline void CloseFile::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloseFile::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloseFile::release_task_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.File.CloseFile.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CloseFile::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.File.CloseFile.task_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace Protocol
}  // namespace Global

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_File_2eproto
