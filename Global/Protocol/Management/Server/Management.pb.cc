// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Management.proto

#include "Management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Global {
namespace Protocol {
namespace Server {
namespace Management {
constexpr Account::Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , disabled_(false){}
struct AccountDefaultTypeInternal {
  constexpr AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDefaultTypeInternal _Account_default_instance_;
constexpr RequestListAccount::RequestListAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestListAccountDefaultTypeInternal {
  constexpr RequestListAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestListAccountDefaultTypeInternal() {}
  union {
    RequestListAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestListAccountDefaultTypeInternal _RequestListAccount_default_instance_;
constexpr ResponseListAccount::ResponseListAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_()
  , err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseListAccountDefaultTypeInternal {
  constexpr ResponseListAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseListAccountDefaultTypeInternal() {}
  union {
    ResponseListAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseListAccountDefaultTypeInternal _ResponseListAccount_default_instance_;
constexpr RequestAddAccount::RequestAddAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestAddAccountDefaultTypeInternal {
  constexpr RequestAddAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestAddAccountDefaultTypeInternal() {}
  union {
    RequestAddAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestAddAccountDefaultTypeInternal _RequestAddAccount_default_instance_;
constexpr ResponseAddAccount::ResponseAddAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , user_id_(int64_t{0})
  , err_code_(0){}
struct ResponseAddAccountDefaultTypeInternal {
  constexpr ResponseAddAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseAddAccountDefaultTypeInternal() {}
  union {
    ResponseAddAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseAddAccountDefaultTypeInternal _ResponseAddAccount_default_instance_;
constexpr RequestEnableAccount::RequestEnableAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestEnableAccountDefaultTypeInternal {
  constexpr RequestEnableAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestEnableAccountDefaultTypeInternal() {}
  union {
    RequestEnableAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestEnableAccountDefaultTypeInternal _RequestEnableAccount_default_instance_;
constexpr ResponseEnableAccount::ResponseEnableAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseEnableAccountDefaultTypeInternal {
  constexpr ResponseEnableAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseEnableAccountDefaultTypeInternal() {}
  union {
    ResponseEnableAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseEnableAccountDefaultTypeInternal _ResponseEnableAccount_default_instance_;
constexpr RequestDisableAccount::RequestDisableAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestDisableAccountDefaultTypeInternal {
  constexpr RequestDisableAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDisableAccountDefaultTypeInternal() {}
  union {
    RequestDisableAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDisableAccountDefaultTypeInternal _RequestDisableAccount_default_instance_;
constexpr ResponseDisableAccount::ResponseDisableAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseDisableAccountDefaultTypeInternal {
  constexpr ResponseDisableAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDisableAccountDefaultTypeInternal() {}
  union {
    ResponseDisableAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDisableAccountDefaultTypeInternal _ResponseDisableAccount_default_instance_;
constexpr RequestDeleteAccount::RequestDeleteAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestDeleteAccountDefaultTypeInternal {
  constexpr RequestDeleteAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDeleteAccountDefaultTypeInternal() {}
  union {
    RequestDeleteAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDeleteAccountDefaultTypeInternal _RequestDeleteAccount_default_instance_;
constexpr ResponseDeleteAccount::ResponseDeleteAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseDeleteAccountDefaultTypeInternal {
  constexpr ResponseDeleteAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDeleteAccountDefaultTypeInternal() {}
  union {
    ResponseDeleteAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDeleteAccountDefaultTypeInternal _ResponseDeleteAccount_default_instance_;
constexpr RequestChangeAccountPassword::RequestChangeAccountPassword(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestChangeAccountPasswordDefaultTypeInternal {
  constexpr RequestChangeAccountPasswordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestChangeAccountPasswordDefaultTypeInternal() {}
  union {
    RequestChangeAccountPassword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestChangeAccountPasswordDefaultTypeInternal _RequestChangeAccountPassword_default_instance_;
constexpr ResponseChangeAccountPassword::ResponseChangeAccountPassword(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseChangeAccountPasswordDefaultTypeInternal {
  constexpr ResponseChangeAccountPasswordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseChangeAccountPasswordDefaultTypeInternal() {}
  union {
    ResponseChangeAccountPassword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseChangeAccountPasswordDefaultTypeInternal _ResponseChangeAccountPassword_default_instance_;
constexpr RequestListBlockedIPAddresses::RequestListBlockedIPAddresses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(int64_t{0}){}
struct RequestListBlockedIPAddressesDefaultTypeInternal {
  constexpr RequestListBlockedIPAddressesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestListBlockedIPAddressesDefaultTypeInternal() {}
  union {
    RequestListBlockedIPAddresses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestListBlockedIPAddressesDefaultTypeInternal _RequestListBlockedIPAddresses_default_instance_;
constexpr BlockedIPAddress::BlockedIPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , until_(int64_t{0}){}
struct BlockedIPAddressDefaultTypeInternal {
  constexpr BlockedIPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockedIPAddressDefaultTypeInternal() {}
  union {
    BlockedIPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockedIPAddressDefaultTypeInternal _BlockedIPAddress_default_instance_;
constexpr ResponseListBlockedIPAddresses::ResponseListBlockedIPAddresses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_addresses_()
  , err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseListBlockedIPAddressesDefaultTypeInternal {
  constexpr ResponseListBlockedIPAddressesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseListBlockedIPAddressesDefaultTypeInternal() {}
  union {
    ResponseListBlockedIPAddresses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseListBlockedIPAddressesDefaultTypeInternal _ResponseListBlockedIPAddresses_default_instance_;
constexpr RequestRemoveBlockedIPAddress::RequestRemoveBlockedIPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0}){}
struct RequestRemoveBlockedIPAddressDefaultTypeInternal {
  constexpr RequestRemoveBlockedIPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestRemoveBlockedIPAddressDefaultTypeInternal() {}
  union {
    RequestRemoveBlockedIPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestRemoveBlockedIPAddressDefaultTypeInternal _RequestRemoveBlockedIPAddress_default_instance_;
constexpr ResponseRemoveBlockedIPAddress::ResponseRemoveBlockedIPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseRemoveBlockedIPAddressDefaultTypeInternal {
  constexpr ResponseRemoveBlockedIPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseRemoveBlockedIPAddressDefaultTypeInternal() {}
  union {
    ResponseRemoveBlockedIPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseRemoveBlockedIPAddressDefaultTypeInternal _ResponseRemoveBlockedIPAddress_default_instance_;
constexpr RequestAddBlockedIPAddress::RequestAddBlockedIPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , duration_(0){}
struct RequestAddBlockedIPAddressDefaultTypeInternal {
  constexpr RequestAddBlockedIPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestAddBlockedIPAddressDefaultTypeInternal() {}
  union {
    RequestAddBlockedIPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestAddBlockedIPAddressDefaultTypeInternal _RequestAddBlockedIPAddress_default_instance_;
constexpr ResponseAddBlockedIPAddress::ResponseAddBlockedIPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseAddBlockedIPAddressDefaultTypeInternal {
  constexpr ResponseAddBlockedIPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseAddBlockedIPAddressDefaultTypeInternal() {}
  union {
    ResponseAddBlockedIPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseAddBlockedIPAddressDefaultTypeInternal _ResponseAddBlockedIPAddress_default_instance_;
constexpr RequestListBlockedAccounts::RequestListBlockedAccounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(int64_t{0}){}
struct RequestListBlockedAccountsDefaultTypeInternal {
  constexpr RequestListBlockedAccountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestListBlockedAccountsDefaultTypeInternal() {}
  union {
    RequestListBlockedAccounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestListBlockedAccountsDefaultTypeInternal _RequestListBlockedAccounts_default_instance_;
constexpr BlockedAccount::BlockedAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , until_(int64_t{0}){}
struct BlockedAccountDefaultTypeInternal {
  constexpr BlockedAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockedAccountDefaultTypeInternal() {}
  union {
    BlockedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockedAccountDefaultTypeInternal _BlockedAccount_default_instance_;
constexpr ResponseListBlockedAccounts::ResponseListBlockedAccounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_()
  , err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseListBlockedAccountsDefaultTypeInternal {
  constexpr ResponseListBlockedAccountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseListBlockedAccountsDefaultTypeInternal() {}
  union {
    ResponseListBlockedAccounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseListBlockedAccountsDefaultTypeInternal _ResponseListBlockedAccounts_default_instance_;
constexpr RequestRemoveBlockedAccount::RequestRemoveBlockedAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(int64_t{0})
  , user_id_(int64_t{0}){}
struct RequestRemoveBlockedAccountDefaultTypeInternal {
  constexpr RequestRemoveBlockedAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestRemoveBlockedAccountDefaultTypeInternal() {}
  union {
    RequestRemoveBlockedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestRemoveBlockedAccountDefaultTypeInternal _RequestRemoveBlockedAccount_default_instance_;
constexpr ResponseRemoveBlockedAccount::ResponseRemoveBlockedAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseRemoveBlockedAccountDefaultTypeInternal {
  constexpr ResponseRemoveBlockedAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseRemoveBlockedAccountDefaultTypeInternal() {}
  union {
    ResponseRemoveBlockedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseRemoveBlockedAccountDefaultTypeInternal _ResponseRemoveBlockedAccount_default_instance_;
constexpr RequestAddBlockedAccount::RequestAddBlockedAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(int64_t{0})
  , user_id_(int64_t{0})
  , duration_(0){}
struct RequestAddBlockedAccountDefaultTypeInternal {
  constexpr RequestAddBlockedAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestAddBlockedAccountDefaultTypeInternal() {}
  union {
    RequestAddBlockedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestAddBlockedAccountDefaultTypeInternal _RequestAddBlockedAccount_default_instance_;
constexpr ResponseAddBlockedAccount::ResponseAddBlockedAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , err_code_(0){}
struct ResponseAddBlockedAccountDefaultTypeInternal {
  constexpr ResponseAddBlockedAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseAddBlockedAccountDefaultTypeInternal() {}
  union {
    ResponseAddBlockedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseAddBlockedAccountDefaultTypeInternal _ResponseAddBlockedAccount_default_instance_;
}  // namespace Management
}  // namespace Server
}  // namespace Protocol
}  // namespace Global
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Management_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Management_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Management_2eproto = nullptr;

const uint32_t TableStruct_Management_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::Account, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::Account, account_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::Account, password_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::Account, disabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListAccount, user_name_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListAccount, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListAccount, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddAccount, account_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddAccount, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddAccount, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddAccount, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestEnableAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestEnableAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestEnableAccount, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseEnableAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseEnableAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseEnableAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseEnableAccount, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestDisableAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestDisableAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestDisableAccount, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDisableAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDisableAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDisableAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDisableAccount, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestDeleteAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestDeleteAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestDeleteAccount, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDeleteAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDeleteAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDeleteAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseDeleteAccount, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestChangeAccountPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestChangeAccountPassword, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestChangeAccountPassword, account_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestChangeAccountPassword, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseChangeAccountPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseChangeAccountPassword, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseChangeAccountPassword, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseChangeAccountPassword, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListBlockedIPAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListBlockedIPAddresses, seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedIPAddress, ip_address_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedIPAddress, until_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses, ip_addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedIPAddress, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedIPAddress, ip_address_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedIPAddress, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListBlockedAccounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestListBlockedAccounts, seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedAccount, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedAccount, account_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::BlockedAccount, until_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedAccounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedAccounts, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedAccounts, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedAccounts, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseListBlockedAccounts, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestRemoveBlockedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestRemoveBlockedAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestRemoveBlockedAccount, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount, err_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedAccount, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::RequestAddBlockedAccount, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedAccount, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedAccount, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Server::Management::ResponseAddBlockedAccount, err_string_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Global::Protocol::Server::Management::Account)},
  { 10, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestListAccount)},
  { 18, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseListAccount)},
  { 28, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestAddAccount)},
  { 37, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseAddAccount)},
  { 47, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestEnableAccount)},
  { 55, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseEnableAccount)},
  { 64, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestDisableAccount)},
  { 72, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseDisableAccount)},
  { 81, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestDeleteAccount)},
  { 89, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseDeleteAccount)},
  { 98, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestChangeAccountPassword)},
  { 107, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseChangeAccountPassword)},
  { 116, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestListBlockedIPAddresses)},
  { 123, -1, -1, sizeof(::Global::Protocol::Server::Management::BlockedIPAddress)},
  { 131, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses)},
  { 141, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress)},
  { 149, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress)},
  { 158, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestAddBlockedIPAddress)},
  { 167, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress)},
  { 176, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestListBlockedAccounts)},
  { 183, -1, -1, sizeof(::Global::Protocol::Server::Management::BlockedAccount)},
  { 192, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseListBlockedAccounts)},
  { 202, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestRemoveBlockedAccount)},
  { 210, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount)},
  { 219, -1, -1, sizeof(::Global::Protocol::Server::Management::RequestAddBlockedAccount)},
  { 228, -1, -1, sizeof(::Global::Protocol::Server::Management::ResponseAddBlockedAccount)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestListAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseListAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestAddAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseAddAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestEnableAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseEnableAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestDisableAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseDisableAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestDeleteAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseDeleteAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestChangeAccountPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseChangeAccountPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestListBlockedIPAddresses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_BlockedIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseListBlockedIPAddresses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestRemoveBlockedIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseRemoveBlockedIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestAddBlockedIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseAddBlockedIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestListBlockedAccounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_BlockedAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseListBlockedAccounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestRemoveBlockedAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseRemoveBlockedAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_RequestAddBlockedAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Server::Management::_ResponseAddBlockedAccount_default_instance_),
};

const char descriptor_table_protodef_Management_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Management.proto\022!Global.Protocol.Serv"
  "er.Management\"O\n\007Account\022\017\n\007user_id\030\001 \001("
  "\003\022\017\n\007account\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\020\n\010"
  "disabled\030\004 \001(\010\";\n\022RequestListAccount\022\013\n\003"
  "seq\030\001 \001(\003\022\030\n\020user_name_filter\030\002 \001(\t\"\206\001\n\023"
  "ResponseListAccount\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_"
  "code\030\002 \001(\005\022\022\n\nerr_string\030\003 \001(\t\022<\n\010accoun"
  "ts\030\004 \003(\0132*.Global.Protocol.Server.Manage"
  "ment.Account\"C\n\021RequestAddAccount\022\013\n\003seq"
  "\030\001 \001(\003\022\017\n\007account\030\002 \001(\t\022\020\n\010password\030\003 \001("
  "\t\"X\n\022ResponseAddAccount\022\013\n\003seq\030\001 \001(\003\022\020\n\010"
  "err_code\030\002 \001(\005\022\022\n\nerr_string\030\003 \001(\t\022\017\n\007us"
  "er_id\030\004 \001(\003\"4\n\024RequestEnableAccount\022\013\n\003s"
  "eq\030\001 \001(\003\022\017\n\007account\030\002 \001(\t\"J\n\025ResponseEna"
  "bleAccount\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_code\030\002 \001("
  "\005\022\022\n\nerr_string\030\003 \001(\t\"5\n\025RequestDisableA"
  "ccount\022\013\n\003seq\030\001 \001(\003\022\017\n\007account\030\002 \001(\t\"K\n\026"
  "ResponseDisableAccount\022\013\n\003seq\030\001 \001(\003\022\020\n\010e"
  "rr_code\030\002 \001(\005\022\022\n\nerr_string\030\003 \001(\t\"4\n\024Req"
  "uestDeleteAccount\022\013\n\003seq\030\001 \001(\003\022\017\n\007accoun"
  "t\030\002 \001(\t\"J\n\025ResponseDeleteAccount\022\013\n\003seq\030"
  "\001 \001(\003\022\020\n\010err_code\030\002 \001(\005\022\022\n\nerr_string\030\003 "
  "\001(\t\"N\n\034RequestChangeAccountPassword\022\013\n\003s"
  "eq\030\001 \001(\003\022\017\n\007account\030\002 \001(\t\022\020\n\010password\030\003 "
  "\001(\t\"R\n\035ResponseChangeAccountPassword\022\013\n\003"
  "seq\030\001 \001(\003\022\020\n\010err_code\030\002 \001(\005\022\022\n\nerr_strin"
  "g\030\003 \001(\t\",\n\035RequestListBlockedIPAddresses"
  "\022\013\n\003seq\030\001 \001(\003\"5\n\020BlockedIPAddress\022\022\n\nip_"
  "address\030\001 \001(\t\022\r\n\005until\030\002 \001(\003\"\236\001\n\036Respons"
  "eListBlockedIPAddresses\022\013\n\003seq\030\001 \001(\003\022\020\n\010"
  "err_code\030\002 \001(\005\022\022\n\nerr_string\030\003 \001(\t\022I\n\014ip"
  "_addresses\030\004 \003(\01323.Global.Protocol.Serve"
  "r.Management.BlockedIPAddress\"@\n\035Request"
  "RemoveBlockedIPAddress\022\013\n\003seq\030\001 \001(\003\022\022\n\ni"
  "p_address\030\002 \001(\t\"S\n\036ResponseRemoveBlocked"
  "IPAddress\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_code\030\002 \001(\005"
  "\022\022\n\nerr_string\030\003 \001(\t\"O\n\032RequestAddBlocke"
  "dIPAddress\022\013\n\003seq\030\001 \001(\003\022\022\n\nip_address\030\002 "
  "\001(\t\022\020\n\010duration\030\003 \001(\005\"P\n\033ResponseAddBloc"
  "kedIPAddress\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_code\030\002 "
  "\001(\005\022\022\n\nerr_string\030\003 \001(\t\")\n\032RequestListBl"
  "ockedAccounts\022\013\n\003seq\030\001 \001(\003\"A\n\016BlockedAcc"
  "ount\022\017\n\007user_id\030\001 \001(\003\022\017\n\007account\030\002 \001(\t\022\r"
  "\n\005until\030\003 \001(\003\"\225\001\n\033ResponseListBlockedAcc"
  "ounts\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_code\030\002 \001(\005\022\022\n\n"
  "err_string\030\003 \001(\t\022C\n\010accounts\030\004 \003(\01321.Glo"
  "bal.Protocol.Server.Management.BlockedAc"
  "count\";\n\033RequestRemoveBlockedAccount\022\013\n\003"
  "seq\030\001 \001(\003\022\017\n\007user_id\030\002 \001(\003\"Q\n\034ResponseRe"
  "moveBlockedAccount\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_c"
  "ode\030\002 \001(\005\022\022\n\nerr_string\030\003 \001(\t\"J\n\030Request"
  "AddBlockedAccount\022\013\n\003seq\030\001 \001(\003\022\017\n\007user_i"
  "d\030\002 \001(\003\022\020\n\010duration\030\003 \001(\005\"N\n\031ResponseAdd"
  "BlockedAccount\022\013\n\003seq\030\001 \001(\003\022\020\n\010err_code\030"
  "\002 \001(\005\022\022\n\nerr_string\030\003 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Management_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Management_2eproto = {
  false, false, 2193, descriptor_table_protodef_Management_2eproto, "Management.proto", 
  &descriptor_table_Management_2eproto_once, nullptr, 0, 27,
  schemas, file_default_instances, TableStruct_Management_2eproto::offsets,
  file_level_metadata_Management_2eproto, file_level_enum_descriptors_Management_2eproto, file_level_service_descriptors_Management_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Management_2eproto_getter() {
  return &descriptor_table_Management_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Management_2eproto(&descriptor_table_Management_2eproto);
namespace Global {
namespace Protocol {
namespace Server {
namespace Management {

// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.Account)
}

inline void Account::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(disabled_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.Account)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.Account)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  password_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(disabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.Account.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.Account.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Account::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.Account)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.Account.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.Account.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // bool disabled = 4;
  if (this->_internal_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.Account)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // bool disabled = 4;
  if (this->_internal_disabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Account::GetClassData() const { return &_class_data_; }

void Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Account *>(to)->MergeFrom(
      static_cast<const Account &>(from));
}


void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.Account)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_disabled() != 0) {
    _internal_set_disabled(from._internal_disabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, disabled_)
      + sizeof(Account::disabled_)
      - PROTOBUF_FIELD_OFFSET(Account, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[0]);
}

// ===================================================================

class RequestListAccount::_Internal {
 public:
};

RequestListAccount::RequestListAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestListAccount)
}
RequestListAccount::RequestListAccount(const RequestListAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name_filter().empty()) {
    user_name_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name_filter(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestListAccount)
}

inline void RequestListAccount::SharedCtor() {
user_name_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestListAccount::~RequestListAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestListAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestListAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestListAccount::ArenaDtor(void* object) {
  RequestListAccount* _this = reinterpret_cast< RequestListAccount* >(object);
  (void)_this;
}
void RequestListAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestListAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestListAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestListAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_filter_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestListAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestListAccount.user_name_filter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestListAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestListAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string user_name_filter = 2;
  if (!this->_internal_user_name_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name_filter().data(), static_cast<int>(this->_internal_user_name_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestListAccount.user_name_filter");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestListAccount)
  return target;
}

size_t RequestListAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestListAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name_filter = 2;
  if (!this->_internal_user_name_filter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name_filter());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestListAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestListAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestListAccount::GetClassData() const { return &_class_data_; }

void RequestListAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestListAccount *>(to)->MergeFrom(
      static_cast<const RequestListAccount &>(from));
}


void RequestListAccount::MergeFrom(const RequestListAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestListAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name_filter().empty()) {
    _internal_set_user_name_filter(from._internal_user_name_filter());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestListAccount::CopyFrom(const RequestListAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestListAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestListAccount::IsInitialized() const {
  return true;
}

void RequestListAccount::InternalSwap(RequestListAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_filter_, lhs_arena,
      &other->user_name_filter_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestListAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[1]);
}

// ===================================================================

class ResponseListAccount::_Internal {
 public:
};

ResponseListAccount::ResponseListAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseListAccount)
}
ResponseListAccount::ResponseListAccount(const ResponseListAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseListAccount)
}

inline void ResponseListAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseListAccount::~ResponseListAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseListAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseListAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseListAccount::ArenaDtor(void* object) {
  ResponseListAccount* _this = reinterpret_cast< ResponseListAccount* >(object);
  (void)_this;
}
void ResponseListAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseListAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseListAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseListAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseListAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseListAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Global.Protocol.Server.Management.Account accounts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseListAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseListAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseListAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  // repeated .Global.Protocol.Server.Management.Account accounts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseListAccount)
  return target;
}

size_t ResponseListAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseListAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Global.Protocol.Server.Management.Account accounts = 4;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseListAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseListAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseListAccount::GetClassData() const { return &_class_data_; }

void ResponseListAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseListAccount *>(to)->MergeFrom(
      static_cast<const ResponseListAccount &>(from));
}


void ResponseListAccount::MergeFrom(const ResponseListAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseListAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseListAccount::CopyFrom(const ResponseListAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseListAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseListAccount::IsInitialized() const {
  return true;
}

void ResponseListAccount::InternalSwap(ResponseListAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseListAccount, err_code_)
      + sizeof(ResponseListAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseListAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseListAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[2]);
}

// ===================================================================

class RequestAddAccount::_Internal {
 public:
};

RequestAddAccount::RequestAddAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestAddAccount)
}
RequestAddAccount::RequestAddAccount(const RequestAddAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestAddAccount)
}

inline void RequestAddAccount::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestAddAccount::~RequestAddAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestAddAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestAddAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestAddAccount::ArenaDtor(void* object) {
  RequestAddAccount* _this = reinterpret_cast< RequestAddAccount* >(object);
  (void)_this;
}
void RequestAddAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestAddAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestAddAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestAddAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  password_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAddAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestAddAccount.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestAddAccount.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAddAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestAddAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestAddAccount.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestAddAccount.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestAddAccount)
  return target;
}

size_t RequestAddAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestAddAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAddAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestAddAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAddAccount::GetClassData() const { return &_class_data_; }

void RequestAddAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestAddAccount *>(to)->MergeFrom(
      static_cast<const RequestAddAccount &>(from));
}


void RequestAddAccount::MergeFrom(const RequestAddAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestAddAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAddAccount::CopyFrom(const RequestAddAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestAddAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddAccount::IsInitialized() const {
  return true;
}

void RequestAddAccount::InternalSwap(RequestAddAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAddAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[3]);
}

// ===================================================================

class ResponseAddAccount::_Internal {
 public:
};

ResponseAddAccount::ResponseAddAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseAddAccount)
}
ResponseAddAccount::ResponseAddAccount(const ResponseAddAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseAddAccount)
}

inline void ResponseAddAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseAddAccount::~ResponseAddAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseAddAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseAddAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseAddAccount::ArenaDtor(void* object) {
  ResponseAddAccount* _this = reinterpret_cast< ResponseAddAccount* >(object);
  (void)_this;
}
void ResponseAddAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseAddAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseAddAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseAddAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseAddAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseAddAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseAddAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseAddAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseAddAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  // int64 user_id = 4;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseAddAccount)
  return target;
}

size_t ResponseAddAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseAddAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 user_id = 4;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseAddAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseAddAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseAddAccount::GetClassData() const { return &_class_data_; }

void ResponseAddAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseAddAccount *>(to)->MergeFrom(
      static_cast<const ResponseAddAccount &>(from));
}


void ResponseAddAccount::MergeFrom(const ResponseAddAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseAddAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseAddAccount::CopyFrom(const ResponseAddAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseAddAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAddAccount::IsInitialized() const {
  return true;
}

void ResponseAddAccount::InternalSwap(ResponseAddAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseAddAccount, err_code_)
      + sizeof(ResponseAddAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseAddAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseAddAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[4]);
}

// ===================================================================

class RequestEnableAccount::_Internal {
 public:
};

RequestEnableAccount::RequestEnableAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestEnableAccount)
}
RequestEnableAccount::RequestEnableAccount(const RequestEnableAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestEnableAccount)
}

inline void RequestEnableAccount::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestEnableAccount::~RequestEnableAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestEnableAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestEnableAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestEnableAccount::ArenaDtor(void* object) {
  RequestEnableAccount* _this = reinterpret_cast< RequestEnableAccount* >(object);
  (void)_this;
}
void RequestEnableAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestEnableAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestEnableAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestEnableAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestEnableAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestEnableAccount.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestEnableAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestEnableAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestEnableAccount.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestEnableAccount)
  return target;
}

size_t RequestEnableAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestEnableAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestEnableAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestEnableAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestEnableAccount::GetClassData() const { return &_class_data_; }

void RequestEnableAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestEnableAccount *>(to)->MergeFrom(
      static_cast<const RequestEnableAccount &>(from));
}


void RequestEnableAccount::MergeFrom(const RequestEnableAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestEnableAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestEnableAccount::CopyFrom(const RequestEnableAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestEnableAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEnableAccount::IsInitialized() const {
  return true;
}

void RequestEnableAccount::InternalSwap(RequestEnableAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestEnableAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[5]);
}

// ===================================================================

class ResponseEnableAccount::_Internal {
 public:
};

ResponseEnableAccount::ResponseEnableAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseEnableAccount)
}
ResponseEnableAccount::ResponseEnableAccount(const ResponseEnableAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseEnableAccount)
}

inline void ResponseEnableAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseEnableAccount::~ResponseEnableAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseEnableAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseEnableAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseEnableAccount::ArenaDtor(void* object) {
  ResponseEnableAccount* _this = reinterpret_cast< ResponseEnableAccount* >(object);
  (void)_this;
}
void ResponseEnableAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseEnableAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseEnableAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseEnableAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseEnableAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseEnableAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseEnableAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseEnableAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseEnableAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseEnableAccount)
  return target;
}

size_t ResponseEnableAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseEnableAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseEnableAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseEnableAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseEnableAccount::GetClassData() const { return &_class_data_; }

void ResponseEnableAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseEnableAccount *>(to)->MergeFrom(
      static_cast<const ResponseEnableAccount &>(from));
}


void ResponseEnableAccount::MergeFrom(const ResponseEnableAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseEnableAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseEnableAccount::CopyFrom(const ResponseEnableAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseEnableAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEnableAccount::IsInitialized() const {
  return true;
}

void ResponseEnableAccount::InternalSwap(ResponseEnableAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseEnableAccount, err_code_)
      + sizeof(ResponseEnableAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseEnableAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEnableAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[6]);
}

// ===================================================================

class RequestDisableAccount::_Internal {
 public:
};

RequestDisableAccount::RequestDisableAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestDisableAccount)
}
RequestDisableAccount::RequestDisableAccount(const RequestDisableAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestDisableAccount)
}

inline void RequestDisableAccount::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestDisableAccount::~RequestDisableAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestDisableAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestDisableAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestDisableAccount::ArenaDtor(void* object) {
  RequestDisableAccount* _this = reinterpret_cast< RequestDisableAccount* >(object);
  (void)_this;
}
void RequestDisableAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestDisableAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestDisableAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestDisableAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDisableAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestDisableAccount.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestDisableAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestDisableAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestDisableAccount.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestDisableAccount)
  return target;
}

size_t RequestDisableAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestDisableAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestDisableAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestDisableAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestDisableAccount::GetClassData() const { return &_class_data_; }

void RequestDisableAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestDisableAccount *>(to)->MergeFrom(
      static_cast<const RequestDisableAccount &>(from));
}


void RequestDisableAccount::MergeFrom(const RequestDisableAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestDisableAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestDisableAccount::CopyFrom(const RequestDisableAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestDisableAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDisableAccount::IsInitialized() const {
  return true;
}

void RequestDisableAccount::InternalSwap(RequestDisableAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDisableAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[7]);
}

// ===================================================================

class ResponseDisableAccount::_Internal {
 public:
};

ResponseDisableAccount::ResponseDisableAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseDisableAccount)
}
ResponseDisableAccount::ResponseDisableAccount(const ResponseDisableAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseDisableAccount)
}

inline void ResponseDisableAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseDisableAccount::~ResponseDisableAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseDisableAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseDisableAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseDisableAccount::ArenaDtor(void* object) {
  ResponseDisableAccount* _this = reinterpret_cast< ResponseDisableAccount* >(object);
  (void)_this;
}
void ResponseDisableAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseDisableAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseDisableAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseDisableAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDisableAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseDisableAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseDisableAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseDisableAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseDisableAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseDisableAccount)
  return target;
}

size_t ResponseDisableAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseDisableAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseDisableAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseDisableAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseDisableAccount::GetClassData() const { return &_class_data_; }

void ResponseDisableAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseDisableAccount *>(to)->MergeFrom(
      static_cast<const ResponseDisableAccount &>(from));
}


void ResponseDisableAccount::MergeFrom(const ResponseDisableAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseDisableAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseDisableAccount::CopyFrom(const ResponseDisableAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseDisableAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDisableAccount::IsInitialized() const {
  return true;
}

void ResponseDisableAccount::InternalSwap(ResponseDisableAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseDisableAccount, err_code_)
      + sizeof(ResponseDisableAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseDisableAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDisableAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[8]);
}

// ===================================================================

class RequestDeleteAccount::_Internal {
 public:
};

RequestDeleteAccount::RequestDeleteAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestDeleteAccount)
}
RequestDeleteAccount::RequestDeleteAccount(const RequestDeleteAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestDeleteAccount)
}

inline void RequestDeleteAccount::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestDeleteAccount::~RequestDeleteAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestDeleteAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestDeleteAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestDeleteAccount::ArenaDtor(void* object) {
  RequestDeleteAccount* _this = reinterpret_cast< RequestDeleteAccount* >(object);
  (void)_this;
}
void RequestDeleteAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestDeleteAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestDeleteAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestDeleteAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDeleteAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestDeleteAccount.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestDeleteAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestDeleteAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestDeleteAccount.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestDeleteAccount)
  return target;
}

size_t RequestDeleteAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestDeleteAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestDeleteAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestDeleteAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestDeleteAccount::GetClassData() const { return &_class_data_; }

void RequestDeleteAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestDeleteAccount *>(to)->MergeFrom(
      static_cast<const RequestDeleteAccount &>(from));
}


void RequestDeleteAccount::MergeFrom(const RequestDeleteAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestDeleteAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestDeleteAccount::CopyFrom(const RequestDeleteAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestDeleteAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeleteAccount::IsInitialized() const {
  return true;
}

void RequestDeleteAccount::InternalSwap(RequestDeleteAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDeleteAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[9]);
}

// ===================================================================

class ResponseDeleteAccount::_Internal {
 public:
};

ResponseDeleteAccount::ResponseDeleteAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseDeleteAccount)
}
ResponseDeleteAccount::ResponseDeleteAccount(const ResponseDeleteAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseDeleteAccount)
}

inline void ResponseDeleteAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseDeleteAccount::~ResponseDeleteAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseDeleteAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseDeleteAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseDeleteAccount::ArenaDtor(void* object) {
  ResponseDeleteAccount* _this = reinterpret_cast< ResponseDeleteAccount* >(object);
  (void)_this;
}
void ResponseDeleteAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseDeleteAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseDeleteAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseDeleteAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDeleteAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseDeleteAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseDeleteAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseDeleteAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseDeleteAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseDeleteAccount)
  return target;
}

size_t ResponseDeleteAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseDeleteAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseDeleteAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseDeleteAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseDeleteAccount::GetClassData() const { return &_class_data_; }

void ResponseDeleteAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseDeleteAccount *>(to)->MergeFrom(
      static_cast<const ResponseDeleteAccount &>(from));
}


void ResponseDeleteAccount::MergeFrom(const ResponseDeleteAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseDeleteAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseDeleteAccount::CopyFrom(const ResponseDeleteAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseDeleteAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeleteAccount::IsInitialized() const {
  return true;
}

void ResponseDeleteAccount::InternalSwap(ResponseDeleteAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseDeleteAccount, err_code_)
      + sizeof(ResponseDeleteAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseDeleteAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDeleteAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[10]);
}

// ===================================================================

class RequestChangeAccountPassword::_Internal {
 public:
};

RequestChangeAccountPassword::RequestChangeAccountPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestChangeAccountPassword)
}
RequestChangeAccountPassword::RequestChangeAccountPassword(const RequestChangeAccountPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestChangeAccountPassword)
}

inline void RequestChangeAccountPassword::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestChangeAccountPassword::~RequestChangeAccountPassword() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestChangeAccountPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestChangeAccountPassword::ArenaDtor(void* object) {
  RequestChangeAccountPassword* _this = reinterpret_cast< RequestChangeAccountPassword* >(object);
  (void)_this;
}
void RequestChangeAccountPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestChangeAccountPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestChangeAccountPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  password_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestChangeAccountPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestChangeAccountPassword.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestChangeAccountPassword.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestChangeAccountPassword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestChangeAccountPassword.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestChangeAccountPassword.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  return target;
}

size_t RequestChangeAccountPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestChangeAccountPassword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestChangeAccountPassword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestChangeAccountPassword::GetClassData() const { return &_class_data_; }

void RequestChangeAccountPassword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestChangeAccountPassword *>(to)->MergeFrom(
      static_cast<const RequestChangeAccountPassword &>(from));
}


void RequestChangeAccountPassword::MergeFrom(const RequestChangeAccountPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestChangeAccountPassword::CopyFrom(const RequestChangeAccountPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestChangeAccountPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeAccountPassword::IsInitialized() const {
  return true;
}

void RequestChangeAccountPassword::InternalSwap(RequestChangeAccountPassword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestChangeAccountPassword::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[11]);
}

// ===================================================================

class ResponseChangeAccountPassword::_Internal {
 public:
};

ResponseChangeAccountPassword::ResponseChangeAccountPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
}
ResponseChangeAccountPassword::ResponseChangeAccountPassword(const ResponseChangeAccountPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
}

inline void ResponseChangeAccountPassword::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseChangeAccountPassword::~ResponseChangeAccountPassword() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseChangeAccountPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseChangeAccountPassword::ArenaDtor(void* object) {
  ResponseChangeAccountPassword* _this = reinterpret_cast< ResponseChangeAccountPassword* >(object);
  (void)_this;
}
void ResponseChangeAccountPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseChangeAccountPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseChangeAccountPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseChangeAccountPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseChangeAccountPassword.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseChangeAccountPassword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseChangeAccountPassword.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  return target;
}

size_t ResponseChangeAccountPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseChangeAccountPassword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseChangeAccountPassword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseChangeAccountPassword::GetClassData() const { return &_class_data_; }

void ResponseChangeAccountPassword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseChangeAccountPassword *>(to)->MergeFrom(
      static_cast<const ResponseChangeAccountPassword &>(from));
}


void ResponseChangeAccountPassword::MergeFrom(const ResponseChangeAccountPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseChangeAccountPassword::CopyFrom(const ResponseChangeAccountPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseChangeAccountPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseChangeAccountPassword::IsInitialized() const {
  return true;
}

void ResponseChangeAccountPassword::InternalSwap(ResponseChangeAccountPassword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseChangeAccountPassword, err_code_)
      + sizeof(ResponseChangeAccountPassword::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseChangeAccountPassword, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseChangeAccountPassword::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[12]);
}

// ===================================================================

class RequestListBlockedIPAddresses::_Internal {
 public:
};

RequestListBlockedIPAddresses::RequestListBlockedIPAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
}
RequestListBlockedIPAddresses::RequestListBlockedIPAddresses(const RequestListBlockedIPAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
}

inline void RequestListBlockedIPAddresses::SharedCtor() {
seq_ = int64_t{0};
}

RequestListBlockedIPAddresses::~RequestListBlockedIPAddresses() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestListBlockedIPAddresses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestListBlockedIPAddresses::ArenaDtor(void* object) {
  RequestListBlockedIPAddresses* _this = reinterpret_cast< RequestListBlockedIPAddresses* >(object);
  (void)_this;
}
void RequestListBlockedIPAddresses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestListBlockedIPAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestListBlockedIPAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestListBlockedIPAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestListBlockedIPAddresses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  return target;
}

size_t RequestListBlockedIPAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestListBlockedIPAddresses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestListBlockedIPAddresses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestListBlockedIPAddresses::GetClassData() const { return &_class_data_; }

void RequestListBlockedIPAddresses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestListBlockedIPAddresses *>(to)->MergeFrom(
      static_cast<const RequestListBlockedIPAddresses &>(from));
}


void RequestListBlockedIPAddresses::MergeFrom(const RequestListBlockedIPAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestListBlockedIPAddresses::CopyFrom(const RequestListBlockedIPAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestListBlockedIPAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestListBlockedIPAddresses::IsInitialized() const {
  return true;
}

void RequestListBlockedIPAddresses::InternalSwap(RequestListBlockedIPAddresses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestListBlockedIPAddresses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[13]);
}

// ===================================================================

class BlockedIPAddress::_Internal {
 public:
};

BlockedIPAddress::BlockedIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.BlockedIPAddress)
}
BlockedIPAddress::BlockedIPAddress(const BlockedIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  until_ = from.until_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.BlockedIPAddress)
}

inline void BlockedIPAddress::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
until_ = int64_t{0};
}

BlockedIPAddress::~BlockedIPAddress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.BlockedIPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockedIPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockedIPAddress::ArenaDtor(void* object) {
  BlockedIPAddress* _this = reinterpret_cast< BlockedIPAddress* >(object);
  (void)_this;
}
void BlockedIPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockedIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.BlockedIPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty();
  until_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.BlockedIPAddress.ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 until = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockedIPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.BlockedIPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.BlockedIPAddress.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // int64 until = 2;
  if (this->_internal_until() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_until(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.BlockedIPAddress)
  return target;
}

size_t BlockedIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.BlockedIPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // int64 until = 2;
  if (this->_internal_until() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_until());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockedIPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockedIPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockedIPAddress::GetClassData() const { return &_class_data_; }

void BlockedIPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockedIPAddress *>(to)->MergeFrom(
      static_cast<const BlockedIPAddress &>(from));
}


void BlockedIPAddress::MergeFrom(const BlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.BlockedIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_until() != 0) {
    _internal_set_until(from._internal_until());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockedIPAddress::CopyFrom(const BlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.BlockedIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedIPAddress::IsInitialized() const {
  return true;
}

void BlockedIPAddress::InternalSwap(BlockedIPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  swap(until_, other->until_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedIPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[14]);
}

// ===================================================================

class ResponseListBlockedIPAddresses::_Internal {
 public:
};

ResponseListBlockedIPAddresses::ResponseListBlockedIPAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ip_addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
}
ResponseListBlockedIPAddresses::ResponseListBlockedIPAddresses(const ResponseListBlockedIPAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_addresses_(from.ip_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
}

inline void ResponseListBlockedIPAddresses::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseListBlockedIPAddresses::~ResponseListBlockedIPAddresses() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseListBlockedIPAddresses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseListBlockedIPAddresses::ArenaDtor(void* object) {
  ResponseListBlockedIPAddresses* _this = reinterpret_cast< ResponseListBlockedIPAddresses* >(object);
  (void)_this;
}
void ResponseListBlockedIPAddresses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseListBlockedIPAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseListBlockedIPAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addresses_.Clear();
  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseListBlockedIPAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseListBlockedIPAddresses.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Global.Protocol.Server.Management.BlockedIPAddress ip_addresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseListBlockedIPAddresses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseListBlockedIPAddresses.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  // repeated .Global.Protocol.Server.Management.BlockedIPAddress ip_addresses = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ip_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ip_addresses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  return target;
}

size_t ResponseListBlockedIPAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Global.Protocol.Server.Management.BlockedIPAddress ip_addresses = 4;
  total_size += 1UL * this->_internal_ip_addresses_size();
  for (const auto& msg : this->ip_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseListBlockedIPAddresses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseListBlockedIPAddresses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseListBlockedIPAddresses::GetClassData() const { return &_class_data_; }

void ResponseListBlockedIPAddresses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseListBlockedIPAddresses *>(to)->MergeFrom(
      static_cast<const ResponseListBlockedIPAddresses &>(from));
}


void ResponseListBlockedIPAddresses::MergeFrom(const ResponseListBlockedIPAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ip_addresses_.MergeFrom(from.ip_addresses_);
  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseListBlockedIPAddresses::CopyFrom(const ResponseListBlockedIPAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseListBlockedIPAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseListBlockedIPAddresses::IsInitialized() const {
  return true;
}

void ResponseListBlockedIPAddresses::InternalSwap(ResponseListBlockedIPAddresses* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ip_addresses_.InternalSwap(&other->ip_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseListBlockedIPAddresses, err_code_)
      + sizeof(ResponseListBlockedIPAddresses::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseListBlockedIPAddresses, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseListBlockedIPAddresses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[15]);
}

// ===================================================================

class RequestRemoveBlockedIPAddress::_Internal {
 public:
};

RequestRemoveBlockedIPAddress::RequestRemoveBlockedIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
}
RequestRemoveBlockedIPAddress::RequestRemoveBlockedIPAddress(const RequestRemoveBlockedIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
}

inline void RequestRemoveBlockedIPAddress::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_ = int64_t{0};
}

RequestRemoveBlockedIPAddress::~RequestRemoveBlockedIPAddress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestRemoveBlockedIPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestRemoveBlockedIPAddress::ArenaDtor(void* object) {
  RequestRemoveBlockedIPAddress* _this = reinterpret_cast< RequestRemoveBlockedIPAddress* >(object);
  (void)_this;
}
void RequestRemoveBlockedIPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestRemoveBlockedIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestRemoveBlockedIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty();
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestRemoveBlockedIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress.ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestRemoveBlockedIPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress.ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  return target;
}

size_t RequestRemoveBlockedIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestRemoveBlockedIPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestRemoveBlockedIPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestRemoveBlockedIPAddress::GetClassData() const { return &_class_data_; }

void RequestRemoveBlockedIPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestRemoveBlockedIPAddress *>(to)->MergeFrom(
      static_cast<const RequestRemoveBlockedIPAddress &>(from));
}


void RequestRemoveBlockedIPAddress::MergeFrom(const RequestRemoveBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestRemoveBlockedIPAddress::CopyFrom(const RequestRemoveBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestRemoveBlockedIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveBlockedIPAddress::IsInitialized() const {
  return true;
}

void RequestRemoveBlockedIPAddress::InternalSwap(RequestRemoveBlockedIPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestRemoveBlockedIPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[16]);
}

// ===================================================================

class ResponseRemoveBlockedIPAddress::_Internal {
 public:
};

ResponseRemoveBlockedIPAddress::ResponseRemoveBlockedIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
}
ResponseRemoveBlockedIPAddress::ResponseRemoveBlockedIPAddress(const ResponseRemoveBlockedIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
}

inline void ResponseRemoveBlockedIPAddress::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseRemoveBlockedIPAddress::~ResponseRemoveBlockedIPAddress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseRemoveBlockedIPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseRemoveBlockedIPAddress::ArenaDtor(void* object) {
  ResponseRemoveBlockedIPAddress* _this = reinterpret_cast< ResponseRemoveBlockedIPAddress* >(object);
  (void)_this;
}
void ResponseRemoveBlockedIPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseRemoveBlockedIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseRemoveBlockedIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRemoveBlockedIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseRemoveBlockedIPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  return target;
}

size_t ResponseRemoveBlockedIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseRemoveBlockedIPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseRemoveBlockedIPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseRemoveBlockedIPAddress::GetClassData() const { return &_class_data_; }

void ResponseRemoveBlockedIPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseRemoveBlockedIPAddress *>(to)->MergeFrom(
      static_cast<const ResponseRemoveBlockedIPAddress &>(from));
}


void ResponseRemoveBlockedIPAddress::MergeFrom(const ResponseRemoveBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseRemoveBlockedIPAddress::CopyFrom(const ResponseRemoveBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseRemoveBlockedIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRemoveBlockedIPAddress::IsInitialized() const {
  return true;
}

void ResponseRemoveBlockedIPAddress::InternalSwap(ResponseRemoveBlockedIPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseRemoveBlockedIPAddress, err_code_)
      + sizeof(ResponseRemoveBlockedIPAddress::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseRemoveBlockedIPAddress, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRemoveBlockedIPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[17]);
}

// ===================================================================

class RequestAddBlockedIPAddress::_Internal {
 public:
};

RequestAddBlockedIPAddress::RequestAddBlockedIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
}
RequestAddBlockedIPAddress::RequestAddBlockedIPAddress(const RequestAddBlockedIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
}

inline void RequestAddBlockedIPAddress::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(duration_));
}

RequestAddBlockedIPAddress::~RequestAddBlockedIPAddress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestAddBlockedIPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestAddBlockedIPAddress::ArenaDtor(void* object) {
  RequestAddBlockedIPAddress* _this = reinterpret_cast< RequestAddBlockedIPAddress* >(object);
  (void)_this;
}
void RequestAddBlockedIPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestAddBlockedIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestAddBlockedIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAddBlockedIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.RequestAddBlockedIPAddress.ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAddBlockedIPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.RequestAddBlockedIPAddress.ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_address(), target);
  }

  // int32 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  return target;
}

size_t RequestAddBlockedIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAddBlockedIPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestAddBlockedIPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAddBlockedIPAddress::GetClassData() const { return &_class_data_; }

void RequestAddBlockedIPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestAddBlockedIPAddress *>(to)->MergeFrom(
      static_cast<const RequestAddBlockedIPAddress &>(from));
}


void RequestAddBlockedIPAddress::MergeFrom(const RequestAddBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAddBlockedIPAddress::CopyFrom(const RequestAddBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestAddBlockedIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddBlockedIPAddress::IsInitialized() const {
  return true;
}

void RequestAddBlockedIPAddress::InternalSwap(RequestAddBlockedIPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestAddBlockedIPAddress, duration_)
      + sizeof(RequestAddBlockedIPAddress::duration_)
      - PROTOBUF_FIELD_OFFSET(RequestAddBlockedIPAddress, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAddBlockedIPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[18]);
}

// ===================================================================

class ResponseAddBlockedIPAddress::_Internal {
 public:
};

ResponseAddBlockedIPAddress::ResponseAddBlockedIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
}
ResponseAddBlockedIPAddress::ResponseAddBlockedIPAddress(const ResponseAddBlockedIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
}

inline void ResponseAddBlockedIPAddress::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseAddBlockedIPAddress::~ResponseAddBlockedIPAddress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseAddBlockedIPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseAddBlockedIPAddress::ArenaDtor(void* object) {
  ResponseAddBlockedIPAddress* _this = reinterpret_cast< ResponseAddBlockedIPAddress* >(object);
  (void)_this;
}
void ResponseAddBlockedIPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseAddBlockedIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseAddBlockedIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseAddBlockedIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseAddBlockedIPAddress.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseAddBlockedIPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseAddBlockedIPAddress.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  return target;
}

size_t ResponseAddBlockedIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseAddBlockedIPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseAddBlockedIPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseAddBlockedIPAddress::GetClassData() const { return &_class_data_; }

void ResponseAddBlockedIPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseAddBlockedIPAddress *>(to)->MergeFrom(
      static_cast<const ResponseAddBlockedIPAddress &>(from));
}


void ResponseAddBlockedIPAddress::MergeFrom(const ResponseAddBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseAddBlockedIPAddress::CopyFrom(const ResponseAddBlockedIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseAddBlockedIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAddBlockedIPAddress::IsInitialized() const {
  return true;
}

void ResponseAddBlockedIPAddress::InternalSwap(ResponseAddBlockedIPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseAddBlockedIPAddress, err_code_)
      + sizeof(ResponseAddBlockedIPAddress::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseAddBlockedIPAddress, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseAddBlockedIPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[19]);
}

// ===================================================================

class RequestListBlockedAccounts::_Internal {
 public:
};

RequestListBlockedAccounts::RequestListBlockedAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestListBlockedAccounts)
}
RequestListBlockedAccounts::RequestListBlockedAccounts(const RequestListBlockedAccounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestListBlockedAccounts)
}

inline void RequestListBlockedAccounts::SharedCtor() {
seq_ = int64_t{0};
}

RequestListBlockedAccounts::~RequestListBlockedAccounts() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestListBlockedAccounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestListBlockedAccounts::ArenaDtor(void* object) {
  RequestListBlockedAccounts* _this = reinterpret_cast< RequestListBlockedAccounts* >(object);
  (void)_this;
}
void RequestListBlockedAccounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestListBlockedAccounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestListBlockedAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestListBlockedAccounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestListBlockedAccounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  return target;
}

size_t RequestListBlockedAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestListBlockedAccounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestListBlockedAccounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestListBlockedAccounts::GetClassData() const { return &_class_data_; }

void RequestListBlockedAccounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestListBlockedAccounts *>(to)->MergeFrom(
      static_cast<const RequestListBlockedAccounts &>(from));
}


void RequestListBlockedAccounts::MergeFrom(const RequestListBlockedAccounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestListBlockedAccounts::CopyFrom(const RequestListBlockedAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestListBlockedAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestListBlockedAccounts::IsInitialized() const {
  return true;
}

void RequestListBlockedAccounts::InternalSwap(RequestListBlockedAccounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestListBlockedAccounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[20]);
}

// ===================================================================

class BlockedAccount::_Internal {
 public:
};

BlockedAccount::BlockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.BlockedAccount)
}
BlockedAccount::BlockedAccount(const BlockedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&until_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(until_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.BlockedAccount)
}

inline void BlockedAccount::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&until_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(until_));
}

BlockedAccount::~BlockedAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.BlockedAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockedAccount::ArenaDtor(void* object) {
  BlockedAccount* _this = reinterpret_cast< BlockedAccount* >(object);
  (void)_this;
}
void BlockedAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.BlockedAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&until_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(until_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.BlockedAccount.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 until = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockedAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.BlockedAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.BlockedAccount.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // int64 until = 3;
  if (this->_internal_until() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_until(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.BlockedAccount)
  return target;
}

size_t BlockedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.BlockedAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 until = 3;
  if (this->_internal_until() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_until());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockedAccount::GetClassData() const { return &_class_data_; }

void BlockedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockedAccount *>(to)->MergeFrom(
      static_cast<const BlockedAccount &>(from));
}


void BlockedAccount::MergeFrom(const BlockedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.BlockedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_until() != 0) {
    _internal_set_until(from._internal_until());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockedAccount::CopyFrom(const BlockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.BlockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedAccount::IsInitialized() const {
  return true;
}

void BlockedAccount::InternalSwap(BlockedAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockedAccount, until_)
      + sizeof(BlockedAccount::until_)
      - PROTOBUF_FIELD_OFFSET(BlockedAccount, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[21]);
}

// ===================================================================

class ResponseListBlockedAccounts::_Internal {
 public:
};

ResponseListBlockedAccounts::ResponseListBlockedAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
}
ResponseListBlockedAccounts::ResponseListBlockedAccounts(const ResponseListBlockedAccounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
}

inline void ResponseListBlockedAccounts::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseListBlockedAccounts::~ResponseListBlockedAccounts() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseListBlockedAccounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseListBlockedAccounts::ArenaDtor(void* object) {
  ResponseListBlockedAccounts* _this = reinterpret_cast< ResponseListBlockedAccounts* >(object);
  (void)_this;
}
void ResponseListBlockedAccounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseListBlockedAccounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseListBlockedAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseListBlockedAccounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseListBlockedAccounts.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Global.Protocol.Server.Management.BlockedAccount accounts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseListBlockedAccounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseListBlockedAccounts.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  // repeated .Global.Protocol.Server.Management.BlockedAccount accounts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  return target;
}

size_t ResponseListBlockedAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Global.Protocol.Server.Management.BlockedAccount accounts = 4;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseListBlockedAccounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseListBlockedAccounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseListBlockedAccounts::GetClassData() const { return &_class_data_; }

void ResponseListBlockedAccounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseListBlockedAccounts *>(to)->MergeFrom(
      static_cast<const ResponseListBlockedAccounts &>(from));
}


void ResponseListBlockedAccounts::MergeFrom(const ResponseListBlockedAccounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseListBlockedAccounts::CopyFrom(const ResponseListBlockedAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseListBlockedAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseListBlockedAccounts::IsInitialized() const {
  return true;
}

void ResponseListBlockedAccounts::InternalSwap(ResponseListBlockedAccounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseListBlockedAccounts, err_code_)
      + sizeof(ResponseListBlockedAccounts::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseListBlockedAccounts, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseListBlockedAccounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[22]);
}

// ===================================================================

class RequestRemoveBlockedAccount::_Internal {
 public:
};

RequestRemoveBlockedAccount::RequestRemoveBlockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
}
RequestRemoveBlockedAccount::RequestRemoveBlockedAccount(const RequestRemoveBlockedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
}

inline void RequestRemoveBlockedAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(user_id_));
}

RequestRemoveBlockedAccount::~RequestRemoveBlockedAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestRemoveBlockedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestRemoveBlockedAccount::ArenaDtor(void* object) {
  RequestRemoveBlockedAccount* _this = reinterpret_cast< RequestRemoveBlockedAccount* >(object);
  (void)_this;
}
void RequestRemoveBlockedAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestRemoveBlockedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestRemoveBlockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestRemoveBlockedAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestRemoveBlockedAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  return target;
}

size_t RequestRemoveBlockedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestRemoveBlockedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestRemoveBlockedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestRemoveBlockedAccount::GetClassData() const { return &_class_data_; }

void RequestRemoveBlockedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestRemoveBlockedAccount *>(to)->MergeFrom(
      static_cast<const RequestRemoveBlockedAccount &>(from));
}


void RequestRemoveBlockedAccount::MergeFrom(const RequestRemoveBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestRemoveBlockedAccount::CopyFrom(const RequestRemoveBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestRemoveBlockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveBlockedAccount::IsInitialized() const {
  return true;
}

void RequestRemoveBlockedAccount::InternalSwap(RequestRemoveBlockedAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestRemoveBlockedAccount, user_id_)
      + sizeof(RequestRemoveBlockedAccount::user_id_)
      - PROTOBUF_FIELD_OFFSET(RequestRemoveBlockedAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestRemoveBlockedAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[23]);
}

// ===================================================================

class ResponseRemoveBlockedAccount::_Internal {
 public:
};

ResponseRemoveBlockedAccount::ResponseRemoveBlockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
}
ResponseRemoveBlockedAccount::ResponseRemoveBlockedAccount(const ResponseRemoveBlockedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
}

inline void ResponseRemoveBlockedAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseRemoveBlockedAccount::~ResponseRemoveBlockedAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseRemoveBlockedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseRemoveBlockedAccount::ArenaDtor(void* object) {
  ResponseRemoveBlockedAccount* _this = reinterpret_cast< ResponseRemoveBlockedAccount* >(object);
  (void)_this;
}
void ResponseRemoveBlockedAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseRemoveBlockedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseRemoveBlockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRemoveBlockedAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseRemoveBlockedAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseRemoveBlockedAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseRemoveBlockedAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  return target;
}

size_t ResponseRemoveBlockedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseRemoveBlockedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseRemoveBlockedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseRemoveBlockedAccount::GetClassData() const { return &_class_data_; }

void ResponseRemoveBlockedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseRemoveBlockedAccount *>(to)->MergeFrom(
      static_cast<const ResponseRemoveBlockedAccount &>(from));
}


void ResponseRemoveBlockedAccount::MergeFrom(const ResponseRemoveBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseRemoveBlockedAccount::CopyFrom(const ResponseRemoveBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseRemoveBlockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRemoveBlockedAccount::IsInitialized() const {
  return true;
}

void ResponseRemoveBlockedAccount::InternalSwap(ResponseRemoveBlockedAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseRemoveBlockedAccount, err_code_)
      + sizeof(ResponseRemoveBlockedAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseRemoveBlockedAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRemoveBlockedAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[24]);
}

// ===================================================================

class RequestAddBlockedAccount::_Internal {
 public:
};

RequestAddBlockedAccount::RequestAddBlockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.RequestAddBlockedAccount)
}
RequestAddBlockedAccount::RequestAddBlockedAccount(const RequestAddBlockedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.RequestAddBlockedAccount)
}

inline void RequestAddBlockedAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(duration_));
}

RequestAddBlockedAccount::~RequestAddBlockedAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestAddBlockedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestAddBlockedAccount::ArenaDtor(void* object) {
  RequestAddBlockedAccount* _this = reinterpret_cast< RequestAddBlockedAccount* >(object);
  (void)_this;
}
void RequestAddBlockedAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestAddBlockedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestAddBlockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAddBlockedAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAddBlockedAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // int32 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  return target;
}

size_t RequestAddBlockedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAddBlockedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestAddBlockedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAddBlockedAccount::GetClassData() const { return &_class_data_; }

void RequestAddBlockedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestAddBlockedAccount *>(to)->MergeFrom(
      static_cast<const RequestAddBlockedAccount &>(from));
}


void RequestAddBlockedAccount::MergeFrom(const RequestAddBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAddBlockedAccount::CopyFrom(const RequestAddBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.RequestAddBlockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddBlockedAccount::IsInitialized() const {
  return true;
}

void RequestAddBlockedAccount::InternalSwap(RequestAddBlockedAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestAddBlockedAccount, duration_)
      + sizeof(RequestAddBlockedAccount::duration_)
      - PROTOBUF_FIELD_OFFSET(RequestAddBlockedAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAddBlockedAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[25]);
}

// ===================================================================

class ResponseAddBlockedAccount::_Internal {
 public:
};

ResponseAddBlockedAccount::ResponseAddBlockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
}
ResponseAddBlockedAccount::ResponseAddBlockedAccount(const ResponseAddBlockedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
}

inline void ResponseAddBlockedAccount::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
}

ResponseAddBlockedAccount::~ResponseAddBlockedAccount() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseAddBlockedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseAddBlockedAccount::ArenaDtor(void* object) {
  ResponseAddBlockedAccount* _this = reinterpret_cast< ResponseAddBlockedAccount* >(object);
  (void)_this;
}
void ResponseAddBlockedAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseAddBlockedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseAddBlockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseAddBlockedAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Server.Management.ResponseAddBlockedAccount.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseAddBlockedAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Server.Management.ResponseAddBlockedAccount.err_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  return target;
}

size_t ResponseAddBlockedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 3;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int32 err_code = 2;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseAddBlockedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseAddBlockedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseAddBlockedAccount::GetClassData() const { return &_class_data_; }

void ResponseAddBlockedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseAddBlockedAccount *>(to)->MergeFrom(
      static_cast<const ResponseAddBlockedAccount &>(from));
}


void ResponseAddBlockedAccount::MergeFrom(const ResponseAddBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseAddBlockedAccount::CopyFrom(const ResponseAddBlockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Server.Management.ResponseAddBlockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAddBlockedAccount::IsInitialized() const {
  return true;
}

void ResponseAddBlockedAccount::InternalSwap(ResponseAddBlockedAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseAddBlockedAccount, err_code_)
      + sizeof(ResponseAddBlockedAccount::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseAddBlockedAccount, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseAddBlockedAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Management_2eproto_getter, &descriptor_table_Management_2eproto_once,
      file_level_metadata_Management_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Management
}  // namespace Server
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::Account* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestListAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestListAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestListAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseListAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseListAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseListAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestAddAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestAddAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestAddAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseAddAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseAddAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseAddAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestEnableAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestEnableAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestEnableAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseEnableAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseEnableAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseEnableAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestDisableAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestDisableAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestDisableAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseDisableAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseDisableAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseDisableAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestDeleteAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestDeleteAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestDeleteAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseDeleteAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseDeleteAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseDeleteAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestChangeAccountPassword* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestChangeAccountPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestChangeAccountPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseChangeAccountPassword* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseChangeAccountPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseChangeAccountPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestListBlockedIPAddresses* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestListBlockedIPAddresses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestListBlockedIPAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::BlockedIPAddress* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::BlockedIPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::BlockedIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseListBlockedIPAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestRemoveBlockedIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseRemoveBlockedIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestAddBlockedIPAddress* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestAddBlockedIPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestAddBlockedIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseAddBlockedIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestListBlockedAccounts* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestListBlockedAccounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestListBlockedAccounts >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::BlockedAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::BlockedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::BlockedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseListBlockedAccounts* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseListBlockedAccounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseListBlockedAccounts >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestRemoveBlockedAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestRemoveBlockedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestRemoveBlockedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseRemoveBlockedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::RequestAddBlockedAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::RequestAddBlockedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::RequestAddBlockedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Server::Management::ResponseAddBlockedAccount* Arena::CreateMaybeMessage< ::Global::Protocol::Server::Management::ResponseAddBlockedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Server::Management::ResponseAddBlockedAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
