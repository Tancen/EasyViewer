// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Control.proto

#include "Control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Global {
namespace Protocol {
namespace Screen {
constexpr PublishCursorPosition::PublishCursorPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PublishCursorPositionDefaultTypeInternal {
  constexpr PublishCursorPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishCursorPositionDefaultTypeInternal() {}
  union {
    PublishCursorPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishCursorPositionDefaultTypeInternal _PublishCursorPosition_default_instance_;
constexpr ControlKeyPress::ControlKeyPress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(0){}
struct ControlKeyPressDefaultTypeInternal {
  constexpr ControlKeyPressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlKeyPressDefaultTypeInternal() {}
  union {
    ControlKeyPress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlKeyPressDefaultTypeInternal _ControlKeyPress_default_instance_;
constexpr ControlKeyRelease::ControlKeyRelease(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(0){}
struct ControlKeyReleaseDefaultTypeInternal {
  constexpr ControlKeyReleaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlKeyReleaseDefaultTypeInternal() {}
  union {
    ControlKeyRelease _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlKeyReleaseDefaultTypeInternal _ControlKeyRelease_default_instance_;
constexpr ControlMouseButtonPress::ControlMouseButtonPress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , button_(0){}
struct ControlMouseButtonPressDefaultTypeInternal {
  constexpr ControlMouseButtonPressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMouseButtonPressDefaultTypeInternal() {}
  union {
    ControlMouseButtonPress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMouseButtonPressDefaultTypeInternal _ControlMouseButtonPress_default_instance_;
constexpr ControlMouseButtonRelease::ControlMouseButtonRelease(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , button_(0){}
struct ControlMouseButtonReleaseDefaultTypeInternal {
  constexpr ControlMouseButtonReleaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMouseButtonReleaseDefaultTypeInternal() {}
  union {
    ControlMouseButtonRelease _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMouseButtonReleaseDefaultTypeInternal _ControlMouseButtonRelease_default_instance_;
constexpr ControlMouseButtonDoubleClick::ControlMouseButtonDoubleClick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , button_(0){}
struct ControlMouseButtonDoubleClickDefaultTypeInternal {
  constexpr ControlMouseButtonDoubleClickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMouseButtonDoubleClickDefaultTypeInternal() {}
  union {
    ControlMouseButtonDoubleClick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMouseButtonDoubleClickDefaultTypeInternal _ControlMouseButtonDoubleClick_default_instance_;
constexpr ControlMouseMove::ControlMouseMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct ControlMouseMoveDefaultTypeInternal {
  constexpr ControlMouseMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMouseMoveDefaultTypeInternal() {}
  union {
    ControlMouseMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMouseMoveDefaultTypeInternal _ControlMouseMove_default_instance_;
constexpr ControlMouseWheel::ControlMouseWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delta_(0){}
struct ControlMouseWheelDefaultTypeInternal {
  constexpr ControlMouseWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMouseWheelDefaultTypeInternal() {}
  union {
    ControlMouseWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMouseWheelDefaultTypeInternal _ControlMouseWheel_default_instance_;
constexpr SetClipboardText::SetClipboardText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetClipboardTextDefaultTypeInternal {
  constexpr SetClipboardTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetClipboardTextDefaultTypeInternal() {}
  union {
    SetClipboardText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetClipboardTextDefaultTypeInternal _SetClipboardText_default_instance_;
constexpr EnableAutoPublishDesktop::EnableAutoPublishDesktop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_(false){}
struct EnableAutoPublishDesktopDefaultTypeInternal {
  constexpr EnableAutoPublishDesktopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnableAutoPublishDesktopDefaultTypeInternal() {}
  union {
    EnableAutoPublishDesktop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnableAutoPublishDesktopDefaultTypeInternal _EnableAutoPublishDesktop_default_instance_;
constexpr Shortcut::Shortcut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(0){}
struct ShortcutDefaultTypeInternal {
  constexpr ShortcutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShortcutDefaultTypeInternal() {}
  union {
    Shortcut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShortcutDefaultTypeInternal _Shortcut_default_instance_;
}  // namespace Screen
}  // namespace Protocol
}  // namespace Global
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Control_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Control_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Control_2eproto = nullptr;

const uint32_t TableStruct_Control_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishCursorPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishCursorPosition, x_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishCursorPosition, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlKeyPress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlKeyPress, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlKeyRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlKeyRelease, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonPress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonPress, x_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonPress, y_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonPress, button_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonRelease, x_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonRelease, y_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonRelease, button_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonDoubleClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonDoubleClick, x_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonDoubleClick, y_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseButtonDoubleClick, button_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseMove, x_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseMove, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ControlMouseWheel, delta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::SetClipboardText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::SetClipboardText, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::EnableAutoPublishDesktop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::EnableAutoPublishDesktop, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::Shortcut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::Shortcut, key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Global::Protocol::Screen::PublishCursorPosition)},
  { 8, -1, -1, sizeof(::Global::Protocol::Screen::ControlKeyPress)},
  { 15, -1, -1, sizeof(::Global::Protocol::Screen::ControlKeyRelease)},
  { 22, -1, -1, sizeof(::Global::Protocol::Screen::ControlMouseButtonPress)},
  { 31, -1, -1, sizeof(::Global::Protocol::Screen::ControlMouseButtonRelease)},
  { 40, -1, -1, sizeof(::Global::Protocol::Screen::ControlMouseButtonDoubleClick)},
  { 49, -1, -1, sizeof(::Global::Protocol::Screen::ControlMouseMove)},
  { 57, -1, -1, sizeof(::Global::Protocol::Screen::ControlMouseWheel)},
  { 64, -1, -1, sizeof(::Global::Protocol::Screen::SetClipboardText)},
  { 71, -1, -1, sizeof(::Global::Protocol::Screen::EnableAutoPublishDesktop)},
  { 78, -1, -1, sizeof(::Global::Protocol::Screen::Shortcut)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_PublishCursorPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlKeyPress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlKeyRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlMouseButtonPress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlMouseButtonRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlMouseButtonDoubleClick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlMouseMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ControlMouseWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_SetClipboardText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_EnableAutoPublishDesktop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_Shortcut_default_instance_),
};

const char descriptor_table_protodef_Control_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rControl.proto\022\026Global.Protocol.Screen\""
  "-\n\025PublishCursorPosition\022\t\n\001x\030\001 \001(\005\022\t\n\001y"
  "\030\002 \001(\005\"\036\n\017ControlKeyPress\022\013\n\003key\030\001 \001(\005\" "
  "\n\021ControlKeyRelease\022\013\n\003key\030\001 \001(\005\"\?\n\027Cont"
  "rolMouseButtonPress\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001("
  "\005\022\016\n\006button\030\003 \001(\005\"A\n\031ControlMouseButtonR"
  "elease\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\016\n\006button\030\003"
  " \001(\005\"E\n\035ControlMouseButtonDoubleClick\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\016\n\006button\030\003 \001(\005\"(\n\020C"
  "ontrolMouseMove\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\"\n"
  "\021ControlMouseWheel\022\r\n\005delta\030\001 \001(\005\" \n\020Set"
  "ClipboardText\022\014\n\004text\030\001 \001(\t\"*\n\030EnableAut"
  "oPublishDesktop\022\016\n\006enable\030\001 \001(\010\"\027\n\010Short"
  "cut\022\013\n\003key\030\001 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Control_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Control_2eproto = {
  false, false, 544, descriptor_table_protodef_Control_2eproto, "Control.proto", 
  &descriptor_table_Control_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_Control_2eproto::offsets,
  file_level_metadata_Control_2eproto, file_level_enum_descriptors_Control_2eproto, file_level_service_descriptors_Control_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Control_2eproto_getter() {
  return &descriptor_table_Control_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Control_2eproto(&descriptor_table_Control_2eproto);
namespace Global {
namespace Protocol {
namespace Screen {

// ===================================================================

class PublishCursorPosition::_Internal {
 public:
};

PublishCursorPosition::PublishCursorPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.PublishCursorPosition)
}
PublishCursorPosition::PublishCursorPosition(const PublishCursorPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.PublishCursorPosition)
}

inline void PublishCursorPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PublishCursorPosition::~PublishCursorPosition() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.PublishCursorPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishCursorPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishCursorPosition::ArenaDtor(void* object) {
  PublishCursorPosition* _this = reinterpret_cast< PublishCursorPosition* >(object);
  (void)_this;
}
void PublishCursorPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishCursorPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishCursorPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.PublishCursorPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishCursorPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishCursorPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.PublishCursorPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.PublishCursorPosition)
  return target;
}

size_t PublishCursorPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.PublishCursorPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishCursorPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishCursorPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishCursorPosition::GetClassData() const { return &_class_data_; }

void PublishCursorPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishCursorPosition *>(to)->MergeFrom(
      static_cast<const PublishCursorPosition &>(from));
}


void PublishCursorPosition::MergeFrom(const PublishCursorPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.PublishCursorPosition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishCursorPosition::CopyFrom(const PublishCursorPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.PublishCursorPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishCursorPosition::IsInitialized() const {
  return true;
}

void PublishCursorPosition::InternalSwap(PublishCursorPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishCursorPosition, y_)
      + sizeof(PublishCursorPosition::y_)
      - PROTOBUF_FIELD_OFFSET(PublishCursorPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishCursorPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[0]);
}

// ===================================================================

class ControlKeyPress::_Internal {
 public:
};

ControlKeyPress::ControlKeyPress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlKeyPress)
}
ControlKeyPress::ControlKeyPress(const ControlKeyPress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlKeyPress)
}

inline void ControlKeyPress::SharedCtor() {
key_ = 0;
}

ControlKeyPress::~ControlKeyPress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlKeyPress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlKeyPress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlKeyPress::ArenaDtor(void* object) {
  ControlKeyPress* _this = reinterpret_cast< ControlKeyPress* >(object);
  (void)_this;
}
void ControlKeyPress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlKeyPress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlKeyPress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlKeyPress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlKeyPress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlKeyPress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlKeyPress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlKeyPress)
  return target;
}

size_t ControlKeyPress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlKeyPress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlKeyPress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlKeyPress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlKeyPress::GetClassData() const { return &_class_data_; }

void ControlKeyPress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlKeyPress *>(to)->MergeFrom(
      static_cast<const ControlKeyPress &>(from));
}


void ControlKeyPress::MergeFrom(const ControlKeyPress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlKeyPress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlKeyPress::CopyFrom(const ControlKeyPress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlKeyPress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlKeyPress::IsInitialized() const {
  return true;
}

void ControlKeyPress::InternalSwap(ControlKeyPress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlKeyPress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[1]);
}

// ===================================================================

class ControlKeyRelease::_Internal {
 public:
};

ControlKeyRelease::ControlKeyRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlKeyRelease)
}
ControlKeyRelease::ControlKeyRelease(const ControlKeyRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlKeyRelease)
}

inline void ControlKeyRelease::SharedCtor() {
key_ = 0;
}

ControlKeyRelease::~ControlKeyRelease() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlKeyRelease)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlKeyRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlKeyRelease::ArenaDtor(void* object) {
  ControlKeyRelease* _this = reinterpret_cast< ControlKeyRelease* >(object);
  (void)_this;
}
void ControlKeyRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlKeyRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlKeyRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlKeyRelease)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlKeyRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlKeyRelease::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlKeyRelease)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlKeyRelease)
  return target;
}

size_t ControlKeyRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlKeyRelease)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlKeyRelease::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlKeyRelease::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlKeyRelease::GetClassData() const { return &_class_data_; }

void ControlKeyRelease::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlKeyRelease *>(to)->MergeFrom(
      static_cast<const ControlKeyRelease &>(from));
}


void ControlKeyRelease::MergeFrom(const ControlKeyRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlKeyRelease)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlKeyRelease::CopyFrom(const ControlKeyRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlKeyRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlKeyRelease::IsInitialized() const {
  return true;
}

void ControlKeyRelease::InternalSwap(ControlKeyRelease* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlKeyRelease::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[2]);
}

// ===================================================================

class ControlMouseButtonPress::_Internal {
 public:
};

ControlMouseButtonPress::ControlMouseButtonPress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlMouseButtonPress)
}
ControlMouseButtonPress::ControlMouseButtonPress(const ControlMouseButtonPress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlMouseButtonPress)
}

inline void ControlMouseButtonPress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
}

ControlMouseButtonPress::~ControlMouseButtonPress() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlMouseButtonPress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMouseButtonPress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMouseButtonPress::ArenaDtor(void* object) {
  ControlMouseButtonPress* _this = reinterpret_cast< ControlMouseButtonPress* >(object);
  (void)_this;
}
void ControlMouseButtonPress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMouseButtonPress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMouseButtonPress::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlMouseButtonPress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_) -
      reinterpret_cast<char*>(&x_)) + sizeof(button_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMouseButtonPress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMouseButtonPress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlMouseButtonPress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 button = 3;
  if (this->_internal_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlMouseButtonPress)
  return target;
}

size_t ControlMouseButtonPress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlMouseButtonPress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 button = 3;
  if (this->_internal_button() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_button());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMouseButtonPress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMouseButtonPress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMouseButtonPress::GetClassData() const { return &_class_data_; }

void ControlMouseButtonPress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMouseButtonPress *>(to)->MergeFrom(
      static_cast<const ControlMouseButtonPress &>(from));
}


void ControlMouseButtonPress::MergeFrom(const ControlMouseButtonPress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlMouseButtonPress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_button() != 0) {
    _internal_set_button(from._internal_button());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMouseButtonPress::CopyFrom(const ControlMouseButtonPress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlMouseButtonPress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMouseButtonPress::IsInitialized() const {
  return true;
}

void ControlMouseButtonPress::InternalSwap(ControlMouseButtonPress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMouseButtonPress, button_)
      + sizeof(ControlMouseButtonPress::button_)
      - PROTOBUF_FIELD_OFFSET(ControlMouseButtonPress, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMouseButtonPress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[3]);
}

// ===================================================================

class ControlMouseButtonRelease::_Internal {
 public:
};

ControlMouseButtonRelease::ControlMouseButtonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlMouseButtonRelease)
}
ControlMouseButtonRelease::ControlMouseButtonRelease(const ControlMouseButtonRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlMouseButtonRelease)
}

inline void ControlMouseButtonRelease::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
}

ControlMouseButtonRelease::~ControlMouseButtonRelease() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlMouseButtonRelease)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMouseButtonRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMouseButtonRelease::ArenaDtor(void* object) {
  ControlMouseButtonRelease* _this = reinterpret_cast< ControlMouseButtonRelease* >(object);
  (void)_this;
}
void ControlMouseButtonRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMouseButtonRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMouseButtonRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlMouseButtonRelease)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_) -
      reinterpret_cast<char*>(&x_)) + sizeof(button_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMouseButtonRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMouseButtonRelease::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlMouseButtonRelease)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 button = 3;
  if (this->_internal_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlMouseButtonRelease)
  return target;
}

size_t ControlMouseButtonRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlMouseButtonRelease)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 button = 3;
  if (this->_internal_button() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_button());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMouseButtonRelease::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMouseButtonRelease::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMouseButtonRelease::GetClassData() const { return &_class_data_; }

void ControlMouseButtonRelease::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMouseButtonRelease *>(to)->MergeFrom(
      static_cast<const ControlMouseButtonRelease &>(from));
}


void ControlMouseButtonRelease::MergeFrom(const ControlMouseButtonRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlMouseButtonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_button() != 0) {
    _internal_set_button(from._internal_button());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMouseButtonRelease::CopyFrom(const ControlMouseButtonRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlMouseButtonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMouseButtonRelease::IsInitialized() const {
  return true;
}

void ControlMouseButtonRelease::InternalSwap(ControlMouseButtonRelease* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMouseButtonRelease, button_)
      + sizeof(ControlMouseButtonRelease::button_)
      - PROTOBUF_FIELD_OFFSET(ControlMouseButtonRelease, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMouseButtonRelease::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[4]);
}

// ===================================================================

class ControlMouseButtonDoubleClick::_Internal {
 public:
};

ControlMouseButtonDoubleClick::ControlMouseButtonDoubleClick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
}
ControlMouseButtonDoubleClick::ControlMouseButtonDoubleClick(const ControlMouseButtonDoubleClick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
}

inline void ControlMouseButtonDoubleClick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
}

ControlMouseButtonDoubleClick::~ControlMouseButtonDoubleClick() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMouseButtonDoubleClick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMouseButtonDoubleClick::ArenaDtor(void* object) {
  ControlMouseButtonDoubleClick* _this = reinterpret_cast< ControlMouseButtonDoubleClick* >(object);
  (void)_this;
}
void ControlMouseButtonDoubleClick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMouseButtonDoubleClick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMouseButtonDoubleClick::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_) -
      reinterpret_cast<char*>(&x_)) + sizeof(button_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMouseButtonDoubleClick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMouseButtonDoubleClick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 button = 3;
  if (this->_internal_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  return target;
}

size_t ControlMouseButtonDoubleClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 button = 3;
  if (this->_internal_button() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_button());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMouseButtonDoubleClick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMouseButtonDoubleClick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMouseButtonDoubleClick::GetClassData() const { return &_class_data_; }

void ControlMouseButtonDoubleClick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMouseButtonDoubleClick *>(to)->MergeFrom(
      static_cast<const ControlMouseButtonDoubleClick &>(from));
}


void ControlMouseButtonDoubleClick::MergeFrom(const ControlMouseButtonDoubleClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_button() != 0) {
    _internal_set_button(from._internal_button());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMouseButtonDoubleClick::CopyFrom(const ControlMouseButtonDoubleClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlMouseButtonDoubleClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMouseButtonDoubleClick::IsInitialized() const {
  return true;
}

void ControlMouseButtonDoubleClick::InternalSwap(ControlMouseButtonDoubleClick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMouseButtonDoubleClick, button_)
      + sizeof(ControlMouseButtonDoubleClick::button_)
      - PROTOBUF_FIELD_OFFSET(ControlMouseButtonDoubleClick, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMouseButtonDoubleClick::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[5]);
}

// ===================================================================

class ControlMouseMove::_Internal {
 public:
};

ControlMouseMove::ControlMouseMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlMouseMove)
}
ControlMouseMove::ControlMouseMove(const ControlMouseMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlMouseMove)
}

inline void ControlMouseMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

ControlMouseMove::~ControlMouseMove() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlMouseMove)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMouseMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMouseMove::ArenaDtor(void* object) {
  ControlMouseMove* _this = reinterpret_cast< ControlMouseMove* >(object);
  (void)_this;
}
void ControlMouseMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMouseMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMouseMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlMouseMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMouseMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMouseMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlMouseMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlMouseMove)
  return target;
}

size_t ControlMouseMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlMouseMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMouseMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMouseMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMouseMove::GetClassData() const { return &_class_data_; }

void ControlMouseMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMouseMove *>(to)->MergeFrom(
      static_cast<const ControlMouseMove &>(from));
}


void ControlMouseMove::MergeFrom(const ControlMouseMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMouseMove::CopyFrom(const ControlMouseMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMouseMove::IsInitialized() const {
  return true;
}

void ControlMouseMove::InternalSwap(ControlMouseMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMouseMove, y_)
      + sizeof(ControlMouseMove::y_)
      - PROTOBUF_FIELD_OFFSET(ControlMouseMove, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMouseMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[6]);
}

// ===================================================================

class ControlMouseWheel::_Internal {
 public:
};

ControlMouseWheel::ControlMouseWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ControlMouseWheel)
}
ControlMouseWheel::ControlMouseWheel(const ControlMouseWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delta_ = from.delta_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ControlMouseWheel)
}

inline void ControlMouseWheel::SharedCtor() {
delta_ = 0;
}

ControlMouseWheel::~ControlMouseWheel() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ControlMouseWheel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMouseWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMouseWheel::ArenaDtor(void* object) {
  ControlMouseWheel* _this = reinterpret_cast< ControlMouseWheel* >(object);
  (void)_this;
}
void ControlMouseWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMouseWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMouseWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ControlMouseWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMouseWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMouseWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ControlMouseWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 delta = 1;
  if (this->_internal_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ControlMouseWheel)
  return target;
}

size_t ControlMouseWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ControlMouseWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 delta = 1;
  if (this->_internal_delta() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delta());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMouseWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMouseWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMouseWheel::GetClassData() const { return &_class_data_; }

void ControlMouseWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMouseWheel *>(to)->MergeFrom(
      static_cast<const ControlMouseWheel &>(from));
}


void ControlMouseWheel::MergeFrom(const ControlMouseWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ControlMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_delta() != 0) {
    _internal_set_delta(from._internal_delta());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMouseWheel::CopyFrom(const ControlMouseWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ControlMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMouseWheel::IsInitialized() const {
  return true;
}

void ControlMouseWheel::InternalSwap(ControlMouseWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(delta_, other->delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMouseWheel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[7]);
}

// ===================================================================

class SetClipboardText::_Internal {
 public:
};

SetClipboardText::SetClipboardText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.SetClipboardText)
}
SetClipboardText::SetClipboardText(const SetClipboardText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.SetClipboardText)
}

inline void SetClipboardText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetClipboardText::~SetClipboardText() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.SetClipboardText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetClipboardText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetClipboardText::ArenaDtor(void* object) {
  SetClipboardText* _this = reinterpret_cast< SetClipboardText* >(object);
  (void)_this;
}
void SetClipboardText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetClipboardText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetClipboardText::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.SetClipboardText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetClipboardText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.SetClipboardText.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetClipboardText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.SetClipboardText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.SetClipboardText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.SetClipboardText)
  return target;
}

size_t SetClipboardText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.SetClipboardText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetClipboardText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetClipboardText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetClipboardText::GetClassData() const { return &_class_data_; }

void SetClipboardText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetClipboardText *>(to)->MergeFrom(
      static_cast<const SetClipboardText &>(from));
}


void SetClipboardText::MergeFrom(const SetClipboardText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.SetClipboardText)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetClipboardText::CopyFrom(const SetClipboardText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.SetClipboardText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClipboardText::IsInitialized() const {
  return true;
}

void SetClipboardText::InternalSwap(SetClipboardText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetClipboardText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[8]);
}

// ===================================================================

class EnableAutoPublishDesktop::_Internal {
 public:
};

EnableAutoPublishDesktop::EnableAutoPublishDesktop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.EnableAutoPublishDesktop)
}
EnableAutoPublishDesktop::EnableAutoPublishDesktop(const EnableAutoPublishDesktop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.EnableAutoPublishDesktop)
}

inline void EnableAutoPublishDesktop::SharedCtor() {
enable_ = false;
}

EnableAutoPublishDesktop::~EnableAutoPublishDesktop() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.EnableAutoPublishDesktop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnableAutoPublishDesktop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoPublishDesktop::ArenaDtor(void* object) {
  EnableAutoPublishDesktop* _this = reinterpret_cast< EnableAutoPublishDesktop* >(object);
  (void)_this;
}
void EnableAutoPublishDesktop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoPublishDesktop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnableAutoPublishDesktop::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.EnableAutoPublishDesktop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableAutoPublishDesktop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnableAutoPublishDesktop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.EnableAutoPublishDesktop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.EnableAutoPublishDesktop)
  return target;
}

size_t EnableAutoPublishDesktop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.EnableAutoPublishDesktop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableAutoPublishDesktop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnableAutoPublishDesktop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableAutoPublishDesktop::GetClassData() const { return &_class_data_; }

void EnableAutoPublishDesktop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnableAutoPublishDesktop *>(to)->MergeFrom(
      static_cast<const EnableAutoPublishDesktop &>(from));
}


void EnableAutoPublishDesktop::MergeFrom(const EnableAutoPublishDesktop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.EnableAutoPublishDesktop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableAutoPublishDesktop::CopyFrom(const EnableAutoPublishDesktop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.EnableAutoPublishDesktop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoPublishDesktop::IsInitialized() const {
  return true;
}

void EnableAutoPublishDesktop::InternalSwap(EnableAutoPublishDesktop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableAutoPublishDesktop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[9]);
}

// ===================================================================

class Shortcut::_Internal {
 public:
};

Shortcut::Shortcut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.Shortcut)
}
Shortcut::Shortcut(const Shortcut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.Shortcut)
}

inline void Shortcut::SharedCtor() {
key_ = 0;
}

Shortcut::~Shortcut() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.Shortcut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Shortcut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Shortcut::ArenaDtor(void* object) {
  Shortcut* _this = reinterpret_cast< Shortcut* >(object);
  (void)_this;
}
void Shortcut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shortcut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Shortcut::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.Shortcut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shortcut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shortcut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.Shortcut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.Shortcut)
  return target;
}

size_t Shortcut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.Shortcut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shortcut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shortcut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shortcut::GetClassData() const { return &_class_data_; }

void Shortcut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shortcut *>(to)->MergeFrom(
      static_cast<const Shortcut &>(from));
}


void Shortcut::MergeFrom(const Shortcut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.Shortcut)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shortcut::CopyFrom(const Shortcut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.Shortcut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shortcut::IsInitialized() const {
  return true;
}

void Shortcut::InternalSwap(Shortcut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shortcut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Control_2eproto_getter, &descriptor_table_Control_2eproto_once,
      file_level_metadata_Control_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Screen
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::PublishCursorPosition* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::PublishCursorPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::PublishCursorPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlKeyPress* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlKeyPress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlKeyPress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlKeyRelease* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlKeyRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlKeyRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlMouseButtonPress* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlMouseButtonPress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlMouseButtonPress >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlMouseButtonRelease* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlMouseButtonRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlMouseButtonRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlMouseButtonDoubleClick* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlMouseButtonDoubleClick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlMouseButtonDoubleClick >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlMouseMove* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlMouseMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlMouseMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ControlMouseWheel* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ControlMouseWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ControlMouseWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::SetClipboardText* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::SetClipboardText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::SetClipboardText >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::EnableAutoPublishDesktop* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::EnableAutoPublishDesktop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::EnableAutoPublishDesktop >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::Shortcut* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::Shortcut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::Shortcut >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
