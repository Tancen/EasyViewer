// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Screen.proto

#include "Screen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Global {
namespace Protocol {
namespace Screen {
constexpr RequestSubscribeScreen::RequestSubscribeScreen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0}){}
struct RequestSubscribeScreenDefaultTypeInternal {
  constexpr RequestSubscribeScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestSubscribeScreenDefaultTypeInternal() {}
  union {
    RequestSubscribeScreen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestSubscribeScreenDefaultTypeInternal _RequestSubscribeScreen_default_instance_;
constexpr ResponseSubscribeScreen::ResponseSubscribeScreen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0){}
struct ResponseSubscribeScreenDefaultTypeInternal {
  constexpr ResponseSubscribeScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseSubscribeScreenDefaultTypeInternal() {}
  union {
    ResponseSubscribeScreen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseSubscribeScreenDefaultTypeInternal _ResponseSubscribeScreen_default_instance_;
constexpr RequestSubscribeScreen2::RequestSubscribeScreen2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , async_task_id_(uint64_t{0u})
  , async_task_certificate_(0u){}
struct RequestSubscribeScreen2DefaultTypeInternal {
  constexpr RequestSubscribeScreen2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestSubscribeScreen2DefaultTypeInternal() {}
  union {
    RequestSubscribeScreen2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestSubscribeScreen2DefaultTypeInternal _RequestSubscribeScreen2_default_instance_;
constexpr ResponseSubscribeScreen2::ResponseSubscribeScreen2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , async_task_id_(uint64_t{0u})
  , async_task_certificate_(0u)
  , err_code_(0){}
struct ResponseSubscribeScreen2DefaultTypeInternal {
  constexpr ResponseSubscribeScreen2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseSubscribeScreen2DefaultTypeInternal() {}
  union {
    ResponseSubscribeScreen2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseSubscribeScreen2DefaultTypeInternal _ResponseSubscribeScreen2_default_instance_;
constexpr PublishScreenFrame::PublishScreenFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , w_(0u)
  , h_(0u){}
struct PublishScreenFrameDefaultTypeInternal {
  constexpr PublishScreenFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishScreenFrameDefaultTypeInternal() {}
  union {
    PublishScreenFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishScreenFrameDefaultTypeInternal _PublishScreenFrame_default_instance_;
}  // namespace Screen
}  // namespace Protocol
}  // namespace Global
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Screen_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Screen_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Screen_2eproto = nullptr;

const uint32_t TableStruct_Screen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen, auth_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen2, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen2, async_task_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen2, async_task_certificate_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::RequestSubscribeScreen2, auth_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen2, async_task_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen2, async_task_certificate_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen2, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen2, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::ResponseSubscribeScreen2, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishScreenFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishScreenFrame, seq_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishScreenFrame, w_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishScreenFrame, h_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Screen::PublishScreenFrame, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Global::Protocol::Screen::RequestSubscribeScreen)},
  { 8, -1, -1, sizeof(::Global::Protocol::Screen::ResponseSubscribeScreen)},
  { 17, -1, -1, sizeof(::Global::Protocol::Screen::RequestSubscribeScreen2)},
  { 27, -1, -1, sizeof(::Global::Protocol::Screen::ResponseSubscribeScreen2)},
  { 38, -1, -1, sizeof(::Global::Protocol::Screen::PublishScreenFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_RequestSubscribeScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ResponseSubscribeScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_RequestSubscribeScreen2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_ResponseSubscribeScreen2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Screen::_PublishScreenFrame_default_instance_),
};

const char descriptor_table_protodef_Screen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Screen.proto\022\026Global.Protocol.Screen\">"
  "\n\026RequestSubscribeScreen\022\017\n\007user_id\030\001 \001("
  "\003\022\023\n\013auth_string\030\002 \001(\t\"S\n\027ResponseSubscr"
  "ibeScreen\022\020\n\010err_code\030\001 \001(\005\022\022\n\nerr_strin"
  "g\030\002 \001(\t\022\022\n\nsecret_key\030\003 \001(\t\"v\n\027RequestSu"
  "bscribeScreen2\022\017\n\007user_id\030\001 \001(\003\022\025\n\rasync"
  "_task_id\030\002 \001(\004\022\036\n\026async_task_certificate"
  "\030\003 \001(\r\022\023\n\013auth_string\030\004 \001(\t\"\213\001\n\030Response"
  "SubscribeScreen2\022\025\n\rasync_task_id\030\001 \001(\004\022"
  "\036\n\026async_task_certificate\030\002 \001(\r\022\020\n\010err_c"
  "ode\030\003 \001(\005\022\022\n\nerr_string\030\004 \001(\t\022\022\n\nsecret_"
  "key\030\005 \001(\t\"E\n\022PublishScreenFrame\022\013\n\003seq\030\001"
  " \001(\003\022\t\n\001w\030\002 \001(\r\022\t\n\001h\030\003 \001(\r\022\014\n\004data\030\004 \001(\014"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Screen_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Screen_2eproto = {
  false, false, 528, descriptor_table_protodef_Screen_2eproto, "Screen.proto", 
  &descriptor_table_Screen_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_Screen_2eproto::offsets,
  file_level_metadata_Screen_2eproto, file_level_enum_descriptors_Screen_2eproto, file_level_service_descriptors_Screen_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Screen_2eproto_getter() {
  return &descriptor_table_Screen_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Screen_2eproto(&descriptor_table_Screen_2eproto);
namespace Global {
namespace Protocol {
namespace Screen {

// ===================================================================

class RequestSubscribeScreen::_Internal {
 public:
};

RequestSubscribeScreen::RequestSubscribeScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.RequestSubscribeScreen)
}
RequestSubscribeScreen::RequestSubscribeScreen(const RequestSubscribeScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_string().empty()) {
    auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_string(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.RequestSubscribeScreen)
}

inline void RequestSubscribeScreen::SharedCtor() {
auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = int64_t{0};
}

RequestSubscribeScreen::~RequestSubscribeScreen() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.RequestSubscribeScreen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestSubscribeScreen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestSubscribeScreen::ArenaDtor(void* object) {
  RequestSubscribeScreen* _this = reinterpret_cast< RequestSubscribeScreen* >(object);
  (void)_this;
}
void RequestSubscribeScreen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSubscribeScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestSubscribeScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.RequestSubscribeScreen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_string_.ClearToEmpty();
  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSubscribeScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_auth_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.RequestSubscribeScreen.auth_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestSubscribeScreen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.RequestSubscribeScreen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string auth_string = 2;
  if (!this->_internal_auth_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_string().data(), static_cast<int>(this->_internal_auth_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.RequestSubscribeScreen.auth_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auth_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.RequestSubscribeScreen)
  return target;
}

size_t RequestSubscribeScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.RequestSubscribeScreen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_string = 2;
  if (!this->_internal_auth_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_string());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSubscribeScreen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestSubscribeScreen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSubscribeScreen::GetClassData() const { return &_class_data_; }

void RequestSubscribeScreen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestSubscribeScreen *>(to)->MergeFrom(
      static_cast<const RequestSubscribeScreen &>(from));
}


void RequestSubscribeScreen::MergeFrom(const RequestSubscribeScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.RequestSubscribeScreen)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_string().empty()) {
    _internal_set_auth_string(from._internal_auth_string());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestSubscribeScreen::CopyFrom(const RequestSubscribeScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.RequestSubscribeScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSubscribeScreen::IsInitialized() const {
  return true;
}

void RequestSubscribeScreen::InternalSwap(RequestSubscribeScreen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_string_, lhs_arena,
      &other->auth_string_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSubscribeScreen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Screen_2eproto_getter, &descriptor_table_Screen_2eproto_once,
      file_level_metadata_Screen_2eproto[0]);
}

// ===================================================================

class ResponseSubscribeScreen::_Internal {
 public:
};

ResponseSubscribeScreen::ResponseSubscribeScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ResponseSubscribeScreen)
}
ResponseSubscribeScreen::ResponseSubscribeScreen(const ResponseSubscribeScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ResponseSubscribeScreen)
}

inline void ResponseSubscribeScreen::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_code_ = 0;
}

ResponseSubscribeScreen::~ResponseSubscribeScreen() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ResponseSubscribeScreen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseSubscribeScreen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseSubscribeScreen::ArenaDtor(void* object) {
  ResponseSubscribeScreen* _this = reinterpret_cast< ResponseSubscribeScreen* >(object);
  (void)_this;
}
void ResponseSubscribeScreen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseSubscribeScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseSubscribeScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ResponseSubscribeScreen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  secret_key_.ClearToEmpty();
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseSubscribeScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.ResponseSubscribeScreen.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.ResponseSubscribeScreen.secret_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseSubscribeScreen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ResponseSubscribeScreen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_string = 2;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.ResponseSubscribeScreen.err_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_string(), target);
  }

  // string secret_key = 3;
  if (!this->_internal_secret_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.ResponseSubscribeScreen.secret_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ResponseSubscribeScreen)
  return target;
}

size_t ResponseSubscribeScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ResponseSubscribeScreen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 2;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // string secret_key = 3;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_key());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseSubscribeScreen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseSubscribeScreen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseSubscribeScreen::GetClassData() const { return &_class_data_; }

void ResponseSubscribeScreen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseSubscribeScreen *>(to)->MergeFrom(
      static_cast<const ResponseSubscribeScreen &>(from));
}


void ResponseSubscribeScreen::MergeFrom(const ResponseSubscribeScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ResponseSubscribeScreen)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (!from._internal_secret_key().empty()) {
    _internal_set_secret_key(from._internal_secret_key());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseSubscribeScreen::CopyFrom(const ResponseSubscribeScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ResponseSubscribeScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSubscribeScreen::IsInitialized() const {
  return true;
}

void ResponseSubscribeScreen::InternalSwap(ResponseSubscribeScreen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, lhs_arena,
      &other->secret_key_, rhs_arena
  );
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSubscribeScreen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Screen_2eproto_getter, &descriptor_table_Screen_2eproto_once,
      file_level_metadata_Screen_2eproto[1]);
}

// ===================================================================

class RequestSubscribeScreen2::_Internal {
 public:
};

RequestSubscribeScreen2::RequestSubscribeScreen2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.RequestSubscribeScreen2)
}
RequestSubscribeScreen2::RequestSubscribeScreen2(const RequestSubscribeScreen2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_string().empty()) {
    auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&async_task_certificate_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(async_task_certificate_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.RequestSubscribeScreen2)
}

inline void RequestSubscribeScreen2::SharedCtor() {
auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&async_task_certificate_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(async_task_certificate_));
}

RequestSubscribeScreen2::~RequestSubscribeScreen2() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.RequestSubscribeScreen2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestSubscribeScreen2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestSubscribeScreen2::ArenaDtor(void* object) {
  RequestSubscribeScreen2* _this = reinterpret_cast< RequestSubscribeScreen2* >(object);
  (void)_this;
}
void RequestSubscribeScreen2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSubscribeScreen2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestSubscribeScreen2::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.RequestSubscribeScreen2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_string_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&async_task_certificate_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(async_task_certificate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSubscribeScreen2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 async_task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          async_task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 async_task_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          async_task_certificate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_auth_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.RequestSubscribeScreen2.auth_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestSubscribeScreen2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.RequestSubscribeScreen2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 async_task_id = 2;
  if (this->_internal_async_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_async_task_id(), target);
  }

  // uint32 async_task_certificate = 3;
  if (this->_internal_async_task_certificate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_async_task_certificate(), target);
  }

  // string auth_string = 4;
  if (!this->_internal_auth_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_string().data(), static_cast<int>(this->_internal_auth_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.RequestSubscribeScreen2.auth_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_auth_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.RequestSubscribeScreen2)
  return target;
}

size_t RequestSubscribeScreen2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.RequestSubscribeScreen2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_string = 4;
  if (!this->_internal_auth_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_string());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // uint64 async_task_id = 2;
  if (this->_internal_async_task_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_async_task_id());
  }

  // uint32 async_task_certificate = 3;
  if (this->_internal_async_task_certificate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_async_task_certificate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSubscribeScreen2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestSubscribeScreen2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSubscribeScreen2::GetClassData() const { return &_class_data_; }

void RequestSubscribeScreen2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestSubscribeScreen2 *>(to)->MergeFrom(
      static_cast<const RequestSubscribeScreen2 &>(from));
}


void RequestSubscribeScreen2::MergeFrom(const RequestSubscribeScreen2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.RequestSubscribeScreen2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_string().empty()) {
    _internal_set_auth_string(from._internal_auth_string());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_async_task_id() != 0) {
    _internal_set_async_task_id(from._internal_async_task_id());
  }
  if (from._internal_async_task_certificate() != 0) {
    _internal_set_async_task_certificate(from._internal_async_task_certificate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestSubscribeScreen2::CopyFrom(const RequestSubscribeScreen2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.RequestSubscribeScreen2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSubscribeScreen2::IsInitialized() const {
  return true;
}

void RequestSubscribeScreen2::InternalSwap(RequestSubscribeScreen2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_string_, lhs_arena,
      &other->auth_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestSubscribeScreen2, async_task_certificate_)
      + sizeof(RequestSubscribeScreen2::async_task_certificate_)
      - PROTOBUF_FIELD_OFFSET(RequestSubscribeScreen2, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSubscribeScreen2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Screen_2eproto_getter, &descriptor_table_Screen_2eproto_once,
      file_level_metadata_Screen_2eproto[2]);
}

// ===================================================================

class ResponseSubscribeScreen2::_Internal {
 public:
};

ResponseSubscribeScreen2::ResponseSubscribeScreen2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.ResponseSubscribeScreen2)
}
ResponseSubscribeScreen2::ResponseSubscribeScreen2(const ResponseSubscribeScreen2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&async_task_id_, &from.async_task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&async_task_id_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.ResponseSubscribeScreen2)
}

inline void ResponseSubscribeScreen2::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&async_task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&async_task_id_)) + sizeof(err_code_));
}

ResponseSubscribeScreen2::~ResponseSubscribeScreen2() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.ResponseSubscribeScreen2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseSubscribeScreen2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseSubscribeScreen2::ArenaDtor(void* object) {
  ResponseSubscribeScreen2* _this = reinterpret_cast< ResponseSubscribeScreen2* >(object);
  (void)_this;
}
void ResponseSubscribeScreen2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseSubscribeScreen2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseSubscribeScreen2::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.ResponseSubscribeScreen2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  secret_key_.ClearToEmpty();
  ::memset(&async_task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&async_task_id_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseSubscribeScreen2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 async_task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          async_task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 async_task_certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          async_task_certificate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.ResponseSubscribeScreen2.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseSubscribeScreen2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.ResponseSubscribeScreen2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 async_task_id = 1;
  if (this->_internal_async_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_task_id(), target);
  }

  // uint32 async_task_certificate = 2;
  if (this->_internal_async_task_certificate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_async_task_certificate(), target);
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // string err_string = 4;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.ResponseSubscribeScreen2.err_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_err_string(), target);
  }

  // string secret_key = 5;
  if (!this->_internal_secret_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.ResponseSubscribeScreen2)
  return target;
}

size_t ResponseSubscribeScreen2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.ResponseSubscribeScreen2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 4;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // string secret_key = 5;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_key());
  }

  // uint64 async_task_id = 1;
  if (this->_internal_async_task_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_async_task_id());
  }

  // uint32 async_task_certificate = 2;
  if (this->_internal_async_task_certificate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_async_task_certificate());
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseSubscribeScreen2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseSubscribeScreen2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseSubscribeScreen2::GetClassData() const { return &_class_data_; }

void ResponseSubscribeScreen2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseSubscribeScreen2 *>(to)->MergeFrom(
      static_cast<const ResponseSubscribeScreen2 &>(from));
}


void ResponseSubscribeScreen2::MergeFrom(const ResponseSubscribeScreen2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.ResponseSubscribeScreen2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (!from._internal_secret_key().empty()) {
    _internal_set_secret_key(from._internal_secret_key());
  }
  if (from._internal_async_task_id() != 0) {
    _internal_set_async_task_id(from._internal_async_task_id());
  }
  if (from._internal_async_task_certificate() != 0) {
    _internal_set_async_task_certificate(from._internal_async_task_certificate());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseSubscribeScreen2::CopyFrom(const ResponseSubscribeScreen2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.ResponseSubscribeScreen2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSubscribeScreen2::IsInitialized() const {
  return true;
}

void ResponseSubscribeScreen2::InternalSwap(ResponseSubscribeScreen2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, lhs_arena,
      &other->secret_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseSubscribeScreen2, err_code_)
      + sizeof(ResponseSubscribeScreen2::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseSubscribeScreen2, async_task_id_)>(
          reinterpret_cast<char*>(&async_task_id_),
          reinterpret_cast<char*>(&other->async_task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSubscribeScreen2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Screen_2eproto_getter, &descriptor_table_Screen_2eproto_once,
      file_level_metadata_Screen_2eproto[3]);
}

// ===================================================================

class PublishScreenFrame::_Internal {
 public:
};

PublishScreenFrame::PublishScreenFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Screen.PublishScreenFrame)
}
PublishScreenFrame::PublishScreenFrame(const PublishScreenFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Screen.PublishScreenFrame)
}

inline void PublishScreenFrame::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(h_));
}

PublishScreenFrame::~PublishScreenFrame() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Screen.PublishScreenFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishScreenFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishScreenFrame::ArenaDtor(void* object) {
  PublishScreenFrame* _this = reinterpret_cast< PublishScreenFrame* >(object);
  (void)_this;
}
void PublishScreenFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishScreenFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishScreenFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Screen.PublishScreenFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishScreenFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 h = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishScreenFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Screen.PublishScreenFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // uint32 w = 2;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_w(), target);
  }

  // uint32 h = 3;
  if (this->_internal_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_h(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Screen.PublishScreenFrame)
  return target;
}

size_t PublishScreenFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Screen.PublishScreenFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // uint32 w = 2;
  if (this->_internal_w() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_w());
  }

  // uint32 h = 3;
  if (this->_internal_h() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_h());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishScreenFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishScreenFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishScreenFrame::GetClassData() const { return &_class_data_; }

void PublishScreenFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishScreenFrame *>(to)->MergeFrom(
      static_cast<const PublishScreenFrame &>(from));
}


void PublishScreenFrame::MergeFrom(const PublishScreenFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Screen.PublishScreenFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from._internal_h() != 0) {
    _internal_set_h(from._internal_h());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishScreenFrame::CopyFrom(const PublishScreenFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Screen.PublishScreenFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishScreenFrame::IsInitialized() const {
  return true;
}

void PublishScreenFrame::InternalSwap(PublishScreenFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishScreenFrame, h_)
      + sizeof(PublishScreenFrame::h_)
      - PROTOBUF_FIELD_OFFSET(PublishScreenFrame, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishScreenFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Screen_2eproto_getter, &descriptor_table_Screen_2eproto_once,
      file_level_metadata_Screen_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Screen
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::RequestSubscribeScreen* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::RequestSubscribeScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::RequestSubscribeScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ResponseSubscribeScreen* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ResponseSubscribeScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ResponseSubscribeScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::RequestSubscribeScreen2* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::RequestSubscribeScreen2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::RequestSubscribeScreen2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::ResponseSubscribeScreen2* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::ResponseSubscribeScreen2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::ResponseSubscribeScreen2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Screen::PublishScreenFrame* Arena::CreateMaybeMessage< ::Global::Protocol::Screen::PublishScreenFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Screen::PublishScreenFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
