// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Screen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Screen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Screen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Screen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Screen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Screen_2eproto;
namespace Global {
namespace Protocol {
namespace Screen {
class PublishScreenFrame;
struct PublishScreenFrameDefaultTypeInternal;
extern PublishScreenFrameDefaultTypeInternal _PublishScreenFrame_default_instance_;
class RequestSubscribeScreen;
struct RequestSubscribeScreenDefaultTypeInternal;
extern RequestSubscribeScreenDefaultTypeInternal _RequestSubscribeScreen_default_instance_;
class RequestSubscribeScreen2;
struct RequestSubscribeScreen2DefaultTypeInternal;
extern RequestSubscribeScreen2DefaultTypeInternal _RequestSubscribeScreen2_default_instance_;
class ResponseSubscribeScreen;
struct ResponseSubscribeScreenDefaultTypeInternal;
extern ResponseSubscribeScreenDefaultTypeInternal _ResponseSubscribeScreen_default_instance_;
class ResponseSubscribeScreen2;
struct ResponseSubscribeScreen2DefaultTypeInternal;
extern ResponseSubscribeScreen2DefaultTypeInternal _ResponseSubscribeScreen2_default_instance_;
}  // namespace Screen
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> ::Global::Protocol::Screen::PublishScreenFrame* Arena::CreateMaybeMessage<::Global::Protocol::Screen::PublishScreenFrame>(Arena*);
template<> ::Global::Protocol::Screen::RequestSubscribeScreen* Arena::CreateMaybeMessage<::Global::Protocol::Screen::RequestSubscribeScreen>(Arena*);
template<> ::Global::Protocol::Screen::RequestSubscribeScreen2* Arena::CreateMaybeMessage<::Global::Protocol::Screen::RequestSubscribeScreen2>(Arena*);
template<> ::Global::Protocol::Screen::ResponseSubscribeScreen* Arena::CreateMaybeMessage<::Global::Protocol::Screen::ResponseSubscribeScreen>(Arena*);
template<> ::Global::Protocol::Screen::ResponseSubscribeScreen2* Arena::CreateMaybeMessage<::Global::Protocol::Screen::ResponseSubscribeScreen2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Global {
namespace Protocol {
namespace Screen {

// ===================================================================

class RequestSubscribeScreen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Screen.RequestSubscribeScreen) */ {
 public:
  inline RequestSubscribeScreen() : RequestSubscribeScreen(nullptr) {}
  ~RequestSubscribeScreen() override;
  explicit constexpr RequestSubscribeScreen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSubscribeScreen(const RequestSubscribeScreen& from);
  RequestSubscribeScreen(RequestSubscribeScreen&& from) noexcept
    : RequestSubscribeScreen() {
    *this = ::std::move(from);
  }

  inline RequestSubscribeScreen& operator=(const RequestSubscribeScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSubscribeScreen& operator=(RequestSubscribeScreen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestSubscribeScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestSubscribeScreen* internal_default_instance() {
    return reinterpret_cast<const RequestSubscribeScreen*>(
               &_RequestSubscribeScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestSubscribeScreen& a, RequestSubscribeScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSubscribeScreen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSubscribeScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestSubscribeScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestSubscribeScreen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestSubscribeScreen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestSubscribeScreen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSubscribeScreen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Screen.RequestSubscribeScreen";
  }
  protected:
  explicit RequestSubscribeScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthStringFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string auth_string = 2;
  void clear_auth_string();
  const std::string& auth_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_string();
  PROTOBUF_NODISCARD std::string* release_auth_string();
  void set_allocated_auth_string(std::string* auth_string);
  private:
  const std::string& _internal_auth_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_string(const std::string& value);
  std::string* _internal_mutable_auth_string();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Screen.RequestSubscribeScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_string_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_2eproto;
};
// -------------------------------------------------------------------

class ResponseSubscribeScreen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Screen.ResponseSubscribeScreen) */ {
 public:
  inline ResponseSubscribeScreen() : ResponseSubscribeScreen(nullptr) {}
  ~ResponseSubscribeScreen() override;
  explicit constexpr ResponseSubscribeScreen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseSubscribeScreen(const ResponseSubscribeScreen& from);
  ResponseSubscribeScreen(ResponseSubscribeScreen&& from) noexcept
    : ResponseSubscribeScreen() {
    *this = ::std::move(from);
  }

  inline ResponseSubscribeScreen& operator=(const ResponseSubscribeScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseSubscribeScreen& operator=(ResponseSubscribeScreen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseSubscribeScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseSubscribeScreen* internal_default_instance() {
    return reinterpret_cast<const ResponseSubscribeScreen*>(
               &_ResponseSubscribeScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseSubscribeScreen& a, ResponseSubscribeScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseSubscribeScreen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseSubscribeScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseSubscribeScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseSubscribeScreen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseSubscribeScreen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseSubscribeScreen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseSubscribeScreen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Screen.ResponseSubscribeScreen";
  }
  protected:
  explicit ResponseSubscribeScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 2,
    kSecretKeyFieldNumber = 3,
    kErrCodeFieldNumber = 1,
  };
  // string err_string = 2;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string secret_key = 3;
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Screen.ResponseSubscribeScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_2eproto;
};
// -------------------------------------------------------------------

class RequestSubscribeScreen2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Screen.RequestSubscribeScreen2) */ {
 public:
  inline RequestSubscribeScreen2() : RequestSubscribeScreen2(nullptr) {}
  ~RequestSubscribeScreen2() override;
  explicit constexpr RequestSubscribeScreen2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSubscribeScreen2(const RequestSubscribeScreen2& from);
  RequestSubscribeScreen2(RequestSubscribeScreen2&& from) noexcept
    : RequestSubscribeScreen2() {
    *this = ::std::move(from);
  }

  inline RequestSubscribeScreen2& operator=(const RequestSubscribeScreen2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSubscribeScreen2& operator=(RequestSubscribeScreen2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestSubscribeScreen2& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestSubscribeScreen2* internal_default_instance() {
    return reinterpret_cast<const RequestSubscribeScreen2*>(
               &_RequestSubscribeScreen2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestSubscribeScreen2& a, RequestSubscribeScreen2& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSubscribeScreen2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSubscribeScreen2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestSubscribeScreen2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestSubscribeScreen2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestSubscribeScreen2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestSubscribeScreen2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSubscribeScreen2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Screen.RequestSubscribeScreen2";
  }
  protected:
  explicit RequestSubscribeScreen2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthStringFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kAsyncTaskIdFieldNumber = 2,
    kAsyncTaskCertificateFieldNumber = 3,
  };
  // string auth_string = 4;
  void clear_auth_string();
  const std::string& auth_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_string();
  PROTOBUF_NODISCARD std::string* release_auth_string();
  void set_allocated_auth_string(std::string* auth_string);
  private:
  const std::string& _internal_auth_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_string(const std::string& value);
  std::string* _internal_mutable_auth_string();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 async_task_id = 2;
  void clear_async_task_id();
  uint64_t async_task_id() const;
  void set_async_task_id(uint64_t value);
  private:
  uint64_t _internal_async_task_id() const;
  void _internal_set_async_task_id(uint64_t value);
  public:

  // uint32 async_task_certificate = 3;
  void clear_async_task_certificate();
  uint32_t async_task_certificate() const;
  void set_async_task_certificate(uint32_t value);
  private:
  uint32_t _internal_async_task_certificate() const;
  void _internal_set_async_task_certificate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Screen.RequestSubscribeScreen2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_string_;
  int64_t user_id_;
  uint64_t async_task_id_;
  uint32_t async_task_certificate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_2eproto;
};
// -------------------------------------------------------------------

class ResponseSubscribeScreen2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Screen.ResponseSubscribeScreen2) */ {
 public:
  inline ResponseSubscribeScreen2() : ResponseSubscribeScreen2(nullptr) {}
  ~ResponseSubscribeScreen2() override;
  explicit constexpr ResponseSubscribeScreen2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseSubscribeScreen2(const ResponseSubscribeScreen2& from);
  ResponseSubscribeScreen2(ResponseSubscribeScreen2&& from) noexcept
    : ResponseSubscribeScreen2() {
    *this = ::std::move(from);
  }

  inline ResponseSubscribeScreen2& operator=(const ResponseSubscribeScreen2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseSubscribeScreen2& operator=(ResponseSubscribeScreen2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseSubscribeScreen2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseSubscribeScreen2* internal_default_instance() {
    return reinterpret_cast<const ResponseSubscribeScreen2*>(
               &_ResponseSubscribeScreen2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseSubscribeScreen2& a, ResponseSubscribeScreen2& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseSubscribeScreen2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseSubscribeScreen2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseSubscribeScreen2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseSubscribeScreen2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseSubscribeScreen2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseSubscribeScreen2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseSubscribeScreen2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Screen.ResponseSubscribeScreen2";
  }
  protected:
  explicit ResponseSubscribeScreen2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 4,
    kSecretKeyFieldNumber = 5,
    kAsyncTaskIdFieldNumber = 1,
    kAsyncTaskCertificateFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string secret_key = 5;
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // uint64 async_task_id = 1;
  void clear_async_task_id();
  uint64_t async_task_id() const;
  void set_async_task_id(uint64_t value);
  private:
  uint64_t _internal_async_task_id() const;
  void _internal_set_async_task_id(uint64_t value);
  public:

  // uint32 async_task_certificate = 2;
  void clear_async_task_certificate();
  uint32_t async_task_certificate() const;
  void set_async_task_certificate(uint32_t value);
  private:
  uint32_t _internal_async_task_certificate() const;
  void _internal_set_async_task_certificate(uint32_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Screen.ResponseSubscribeScreen2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  uint64_t async_task_id_;
  uint32_t async_task_certificate_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_2eproto;
};
// -------------------------------------------------------------------

class PublishScreenFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Screen.PublishScreenFrame) */ {
 public:
  inline PublishScreenFrame() : PublishScreenFrame(nullptr) {}
  ~PublishScreenFrame() override;
  explicit constexpr PublishScreenFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishScreenFrame(const PublishScreenFrame& from);
  PublishScreenFrame(PublishScreenFrame&& from) noexcept
    : PublishScreenFrame() {
    *this = ::std::move(from);
  }

  inline PublishScreenFrame& operator=(const PublishScreenFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishScreenFrame& operator=(PublishScreenFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishScreenFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishScreenFrame* internal_default_instance() {
    return reinterpret_cast<const PublishScreenFrame*>(
               &_PublishScreenFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PublishScreenFrame& a, PublishScreenFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishScreenFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishScreenFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishScreenFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishScreenFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishScreenFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishScreenFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishScreenFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Screen.PublishScreenFrame";
  }
  protected:
  explicit PublishScreenFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kSeqFieldNumber = 1,
    kWFieldNumber = 2,
    kHFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // uint32 w = 2;
  void clear_w();
  uint32_t w() const;
  void set_w(uint32_t value);
  private:
  uint32_t _internal_w() const;
  void _internal_set_w(uint32_t value);
  public:

  // uint32 h = 3;
  void clear_h();
  uint32_t h() const;
  void set_h(uint32_t value);
  private:
  uint32_t _internal_h() const;
  void _internal_set_h(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Screen.PublishScreenFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int64_t seq_;
  uint32_t w_;
  uint32_t h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestSubscribeScreen

// int64 user_id = 1;
inline void RequestSubscribeScreen::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestSubscribeScreen::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestSubscribeScreen::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.RequestSubscribeScreen.user_id)
  return _internal_user_id();
}
inline void RequestSubscribeScreen::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestSubscribeScreen::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.RequestSubscribeScreen.user_id)
}

// string auth_string = 2;
inline void RequestSubscribeScreen::clear_auth_string() {
  auth_string_.ClearToEmpty();
}
inline const std::string& RequestSubscribeScreen::auth_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.RequestSubscribeScreen.auth_string)
  return _internal_auth_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestSubscribeScreen::set_auth_string(ArgT0&& arg0, ArgT... args) {
 
 auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.RequestSubscribeScreen.auth_string)
}
inline std::string* RequestSubscribeScreen::mutable_auth_string() {
  std::string* _s = _internal_mutable_auth_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.RequestSubscribeScreen.auth_string)
  return _s;
}
inline const std::string& RequestSubscribeScreen::_internal_auth_string() const {
  return auth_string_.Get();
}
inline void RequestSubscribeScreen::_internal_set_auth_string(const std::string& value) {
  
  auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestSubscribeScreen::_internal_mutable_auth_string() {
  
  return auth_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestSubscribeScreen::release_auth_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.RequestSubscribeScreen.auth_string)
  return auth_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestSubscribeScreen::set_allocated_auth_string(std::string* auth_string) {
  if (auth_string != nullptr) {
    
  } else {
    
  }
  auth_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.RequestSubscribeScreen.auth_string)
}

// -------------------------------------------------------------------

// ResponseSubscribeScreen

// int32 err_code = 1;
inline void ResponseSubscribeScreen::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseSubscribeScreen::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseSubscribeScreen::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen.err_code)
  return _internal_err_code();
}
inline void ResponseSubscribeScreen::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseSubscribeScreen::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen.err_code)
}

// string err_string = 2;
inline void ResponseSubscribeScreen::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseSubscribeScreen::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseSubscribeScreen::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen.err_string)
}
inline std::string* ResponseSubscribeScreen::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.ResponseSubscribeScreen.err_string)
  return _s;
}
inline const std::string& ResponseSubscribeScreen::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseSubscribeScreen::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.ResponseSubscribeScreen.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseSubscribeScreen::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.ResponseSubscribeScreen.err_string)
}

// string secret_key = 3;
inline void ResponseSubscribeScreen::clear_secret_key() {
  secret_key_.ClearToEmpty();
}
inline const std::string& ResponseSubscribeScreen::secret_key() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseSubscribeScreen::set_secret_key(ArgT0&& arg0, ArgT... args) {
 
 secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen.secret_key)
}
inline std::string* ResponseSubscribeScreen::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.ResponseSubscribeScreen.secret_key)
  return _s;
}
inline const std::string& ResponseSubscribeScreen::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void ResponseSubscribeScreen::_internal_set_secret_key(const std::string& value) {
  
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen::_internal_mutable_secret_key() {
  
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen::release_secret_key() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.ResponseSubscribeScreen.secret_key)
  return secret_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseSubscribeScreen::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.ResponseSubscribeScreen.secret_key)
}

// -------------------------------------------------------------------

// RequestSubscribeScreen2

// int64 user_id = 1;
inline void RequestSubscribeScreen2::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestSubscribeScreen2::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestSubscribeScreen2::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.RequestSubscribeScreen2.user_id)
  return _internal_user_id();
}
inline void RequestSubscribeScreen2::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestSubscribeScreen2::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.RequestSubscribeScreen2.user_id)
}

// uint64 async_task_id = 2;
inline void RequestSubscribeScreen2::clear_async_task_id() {
  async_task_id_ = uint64_t{0u};
}
inline uint64_t RequestSubscribeScreen2::_internal_async_task_id() const {
  return async_task_id_;
}
inline uint64_t RequestSubscribeScreen2::async_task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.RequestSubscribeScreen2.async_task_id)
  return _internal_async_task_id();
}
inline void RequestSubscribeScreen2::_internal_set_async_task_id(uint64_t value) {
  
  async_task_id_ = value;
}
inline void RequestSubscribeScreen2::set_async_task_id(uint64_t value) {
  _internal_set_async_task_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.RequestSubscribeScreen2.async_task_id)
}

// uint32 async_task_certificate = 3;
inline void RequestSubscribeScreen2::clear_async_task_certificate() {
  async_task_certificate_ = 0u;
}
inline uint32_t RequestSubscribeScreen2::_internal_async_task_certificate() const {
  return async_task_certificate_;
}
inline uint32_t RequestSubscribeScreen2::async_task_certificate() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.RequestSubscribeScreen2.async_task_certificate)
  return _internal_async_task_certificate();
}
inline void RequestSubscribeScreen2::_internal_set_async_task_certificate(uint32_t value) {
  
  async_task_certificate_ = value;
}
inline void RequestSubscribeScreen2::set_async_task_certificate(uint32_t value) {
  _internal_set_async_task_certificate(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.RequestSubscribeScreen2.async_task_certificate)
}

// string auth_string = 4;
inline void RequestSubscribeScreen2::clear_auth_string() {
  auth_string_.ClearToEmpty();
}
inline const std::string& RequestSubscribeScreen2::auth_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.RequestSubscribeScreen2.auth_string)
  return _internal_auth_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestSubscribeScreen2::set_auth_string(ArgT0&& arg0, ArgT... args) {
 
 auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.RequestSubscribeScreen2.auth_string)
}
inline std::string* RequestSubscribeScreen2::mutable_auth_string() {
  std::string* _s = _internal_mutable_auth_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.RequestSubscribeScreen2.auth_string)
  return _s;
}
inline const std::string& RequestSubscribeScreen2::_internal_auth_string() const {
  return auth_string_.Get();
}
inline void RequestSubscribeScreen2::_internal_set_auth_string(const std::string& value) {
  
  auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestSubscribeScreen2::_internal_mutable_auth_string() {
  
  return auth_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestSubscribeScreen2::release_auth_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.RequestSubscribeScreen2.auth_string)
  return auth_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestSubscribeScreen2::set_allocated_auth_string(std::string* auth_string) {
  if (auth_string != nullptr) {
    
  } else {
    
  }
  auth_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.RequestSubscribeScreen2.auth_string)
}

// -------------------------------------------------------------------

// ResponseSubscribeScreen2

// uint64 async_task_id = 1;
inline void ResponseSubscribeScreen2::clear_async_task_id() {
  async_task_id_ = uint64_t{0u};
}
inline uint64_t ResponseSubscribeScreen2::_internal_async_task_id() const {
  return async_task_id_;
}
inline uint64_t ResponseSubscribeScreen2::async_task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen2.async_task_id)
  return _internal_async_task_id();
}
inline void ResponseSubscribeScreen2::_internal_set_async_task_id(uint64_t value) {
  
  async_task_id_ = value;
}
inline void ResponseSubscribeScreen2::set_async_task_id(uint64_t value) {
  _internal_set_async_task_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen2.async_task_id)
}

// uint32 async_task_certificate = 2;
inline void ResponseSubscribeScreen2::clear_async_task_certificate() {
  async_task_certificate_ = 0u;
}
inline uint32_t ResponseSubscribeScreen2::_internal_async_task_certificate() const {
  return async_task_certificate_;
}
inline uint32_t ResponseSubscribeScreen2::async_task_certificate() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen2.async_task_certificate)
  return _internal_async_task_certificate();
}
inline void ResponseSubscribeScreen2::_internal_set_async_task_certificate(uint32_t value) {
  
  async_task_certificate_ = value;
}
inline void ResponseSubscribeScreen2::set_async_task_certificate(uint32_t value) {
  _internal_set_async_task_certificate(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen2.async_task_certificate)
}

// int32 err_code = 3;
inline void ResponseSubscribeScreen2::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseSubscribeScreen2::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseSubscribeScreen2::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen2.err_code)
  return _internal_err_code();
}
inline void ResponseSubscribeScreen2::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseSubscribeScreen2::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen2.err_code)
}

// string err_string = 4;
inline void ResponseSubscribeScreen2::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseSubscribeScreen2::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen2.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseSubscribeScreen2::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen2.err_string)
}
inline std::string* ResponseSubscribeScreen2::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.ResponseSubscribeScreen2.err_string)
  return _s;
}
inline const std::string& ResponseSubscribeScreen2::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseSubscribeScreen2::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen2::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen2::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.ResponseSubscribeScreen2.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseSubscribeScreen2::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.ResponseSubscribeScreen2.err_string)
}

// string secret_key = 5;
inline void ResponseSubscribeScreen2::clear_secret_key() {
  secret_key_.ClearToEmpty();
}
inline const std::string& ResponseSubscribeScreen2::secret_key() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseSubscribeScreen2::set_secret_key(ArgT0&& arg0, ArgT... args) {
 
 secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key)
}
inline std::string* ResponseSubscribeScreen2::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key)
  return _s;
}
inline const std::string& ResponseSubscribeScreen2::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void ResponseSubscribeScreen2::_internal_set_secret_key(const std::string& value) {
  
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen2::_internal_mutable_secret_key() {
  
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseSubscribeScreen2::release_secret_key() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key)
  return secret_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseSubscribeScreen2::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.ResponseSubscribeScreen2.secret_key)
}

// -------------------------------------------------------------------

// PublishScreenFrame

// int64 seq = 1;
inline void PublishScreenFrame::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t PublishScreenFrame::_internal_seq() const {
  return seq_;
}
inline int64_t PublishScreenFrame::seq() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.PublishScreenFrame.seq)
  return _internal_seq();
}
inline void PublishScreenFrame::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void PublishScreenFrame::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.PublishScreenFrame.seq)
}

// uint32 w = 2;
inline void PublishScreenFrame::clear_w() {
  w_ = 0u;
}
inline uint32_t PublishScreenFrame::_internal_w() const {
  return w_;
}
inline uint32_t PublishScreenFrame::w() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.PublishScreenFrame.w)
  return _internal_w();
}
inline void PublishScreenFrame::_internal_set_w(uint32_t value) {
  
  w_ = value;
}
inline void PublishScreenFrame::set_w(uint32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.PublishScreenFrame.w)
}

// uint32 h = 3;
inline void PublishScreenFrame::clear_h() {
  h_ = 0u;
}
inline uint32_t PublishScreenFrame::_internal_h() const {
  return h_;
}
inline uint32_t PublishScreenFrame::h() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.PublishScreenFrame.h)
  return _internal_h();
}
inline void PublishScreenFrame::_internal_set_h(uint32_t value) {
  
  h_ = value;
}
inline void PublishScreenFrame::set_h(uint32_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.PublishScreenFrame.h)
}

// bytes data = 4;
inline void PublishScreenFrame::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PublishScreenFrame::data() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Screen.PublishScreenFrame.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishScreenFrame::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Screen.PublishScreenFrame.data)
}
inline std::string* PublishScreenFrame::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Screen.PublishScreenFrame.data)
  return _s;
}
inline const std::string& PublishScreenFrame::_internal_data() const {
  return data_.Get();
}
inline void PublishScreenFrame::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishScreenFrame::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishScreenFrame::release_data() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Screen.PublishScreenFrame.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublishScreenFrame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Screen.PublishScreenFrame.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Screen
}  // namespace Protocol
}  // namespace Global

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Screen_2eproto
