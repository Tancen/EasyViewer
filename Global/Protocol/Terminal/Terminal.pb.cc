// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Terminal.proto

#include "Terminal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Global {
namespace Protocol {
namespace Terminal {
constexpr RequestCreateTerminal::RequestCreateTerminal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , width_(0)
  , height_(0){}
struct RequestCreateTerminalDefaultTypeInternal {
  constexpr RequestCreateTerminalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestCreateTerminalDefaultTypeInternal() {}
  union {
    RequestCreateTerminal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestCreateTerminalDefaultTypeInternal _RequestCreateTerminal_default_instance_;
constexpr ResponseCreateTerminal::ResponseCreateTerminal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , err_code_(0){}
struct ResponseCreateTerminalDefaultTypeInternal {
  constexpr ResponseCreateTerminalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseCreateTerminalDefaultTypeInternal() {}
  union {
    ResponseCreateTerminal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseCreateTerminalDefaultTypeInternal _ResponseCreateTerminal_default_instance_;
constexpr RequestCreateTerminal2::RequestCreateTerminal2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , async_task_id_(uint64_t{0u})
  , async_task_certificate_(0u)
  , width_(0)
  , height_(0){}
struct RequestCreateTerminal2DefaultTypeInternal {
  constexpr RequestCreateTerminal2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestCreateTerminal2DefaultTypeInternal() {}
  union {
    RequestCreateTerminal2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestCreateTerminal2DefaultTypeInternal _RequestCreateTerminal2_default_instance_;
constexpr ResponseCreateTerminal2::ResponseCreateTerminal2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , async_task_id_(uint64_t{0u})
  , async_task_certificate_(0u)
  , err_code_(0){}
struct ResponseCreateTerminal2DefaultTypeInternal {
  constexpr ResponseCreateTerminal2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseCreateTerminal2DefaultTypeInternal() {}
  union {
    ResponseCreateTerminal2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseCreateTerminal2DefaultTypeInternal _ResponseCreateTerminal2_default_instance_;
constexpr WriteCommand::WriteCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0}){}
struct WriteCommandDefaultTypeInternal {
  constexpr WriteCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteCommandDefaultTypeInternal() {}
  union {
    WriteCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteCommandDefaultTypeInternal _WriteCommand_default_instance_;
constexpr ResizeTerminal::ResizeTerminal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , width_(0)
  , height_(0){}
struct ResizeTerminalDefaultTypeInternal {
  constexpr ResizeTerminalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResizeTerminalDefaultTypeInternal() {}
  union {
    ResizeTerminal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResizeTerminalDefaultTypeInternal _ResizeTerminal_default_instance_;
constexpr PublishTerminalOutput::PublishTerminalOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0}){}
struct PublishTerminalOutputDefaultTypeInternal {
  constexpr PublishTerminalOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishTerminalOutputDefaultTypeInternal() {}
  union {
    PublishTerminalOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishTerminalOutputDefaultTypeInternal _PublishTerminalOutput_default_instance_;
constexpr CloseTerminal::CloseTerminal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CloseTerminalDefaultTypeInternal {
  constexpr CloseTerminalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseTerminalDefaultTypeInternal() {}
  union {
    CloseTerminal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseTerminalDefaultTypeInternal _CloseTerminal_default_instance_;
constexpr KickoutVisitor::KickoutVisitor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terminal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KickoutVisitorDefaultTypeInternal {
  constexpr KickoutVisitorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KickoutVisitorDefaultTypeInternal() {}
  union {
    KickoutVisitor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KickoutVisitorDefaultTypeInternal _KickoutVisitor_default_instance_;
}  // namespace Terminal
}  // namespace Protocol
}  // namespace Global
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Terminal_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Terminal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Terminal_2eproto = nullptr;

const uint32_t TableStruct_Terminal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal, auth_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal, width_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal, terminal_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, async_task_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, async_task_certificate_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, auth_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, width_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::RequestCreateTerminal2, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, async_task_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, async_task_certificate_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, err_code_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, err_string_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, terminal_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResponseCreateTerminal2, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::WriteCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::WriteCommand, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::WriteCommand, terminal_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::WriteCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResizeTerminal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResizeTerminal, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResizeTerminal, terminal_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResizeTerminal, width_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::ResizeTerminal, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::PublishTerminalOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::PublishTerminalOutput, user_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::PublishTerminalOutput, terminal_id_),
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::PublishTerminalOutput, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::CloseTerminal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::CloseTerminal, terminal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::KickoutVisitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Global::Protocol::Terminal::KickoutVisitor, terminal_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Global::Protocol::Terminal::RequestCreateTerminal)},
  { 10, -1, -1, sizeof(::Global::Protocol::Terminal::ResponseCreateTerminal)},
  { 21, -1, -1, sizeof(::Global::Protocol::Terminal::RequestCreateTerminal2)},
  { 33, -1, -1, sizeof(::Global::Protocol::Terminal::ResponseCreateTerminal2)},
  { 45, -1, -1, sizeof(::Global::Protocol::Terminal::WriteCommand)},
  { 54, -1, -1, sizeof(::Global::Protocol::Terminal::ResizeTerminal)},
  { 64, -1, -1, sizeof(::Global::Protocol::Terminal::PublishTerminalOutput)},
  { 73, -1, -1, sizeof(::Global::Protocol::Terminal::CloseTerminal)},
  { 80, -1, -1, sizeof(::Global::Protocol::Terminal::KickoutVisitor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_RequestCreateTerminal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_ResponseCreateTerminal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_RequestCreateTerminal2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_ResponseCreateTerminal2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_WriteCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_ResizeTerminal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_PublishTerminalOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_CloseTerminal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Global::Protocol::Terminal::_KickoutVisitor_default_instance_),
};

const char descriptor_table_protodef_Terminal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Terminal.proto\022\030Global.Protocol.Termin"
  "al\"\\\n\025RequestCreateTerminal\022\017\n\007user_id\030\001"
  " \001(\003\022\023\n\013auth_string\030\002 \001(\t\022\r\n\005width\030\003 \001(\005"
  "\022\016\n\006height\030\004 \001(\005\"x\n\026ResponseCreateTermin"
  "al\022\020\n\010err_code\030\001 \001(\005\022\022\n\nerr_string\030\002 \001(\t"
  "\022\017\n\007user_id\030\003 \001(\003\022\023\n\013terminal_id\030\004 \001(\t\022\022"
  "\n\nsecret_key\030\005 \001(\t\"\224\001\n\026RequestCreateTerm"
  "inal2\022\017\n\007user_id\030\001 \001(\003\022\025\n\rasync_task_id\030"
  "\002 \001(\004\022\036\n\026async_task_certificate\030\003 \001(\r\022\023\n"
  "\013auth_string\030\004 \001(\t\022\r\n\005width\030\005 \001(\005\022\016\n\006hei"
  "ght\030\006 \001(\005\"\237\001\n\027ResponseCreateTerminal2\022\025\n"
  "\rasync_task_id\030\001 \001(\004\022\036\n\026async_task_certi"
  "ficate\030\002 \001(\r\022\020\n\010err_code\030\003 \001(\005\022\022\n\nerr_st"
  "ring\030\004 \001(\t\022\023\n\013terminal_id\030\005 \001(\t\022\022\n\nsecre"
  "t_key\030\006 \001(\t\"E\n\014WriteCommand\022\017\n\007user_id\030\001"
  " \001(\003\022\023\n\013terminal_id\030\002 \001(\t\022\017\n\007command\030\003 \001"
  "(\014\"U\n\016ResizeTerminal\022\017\n\007user_id\030\001 \001(\003\022\023\n"
  "\013terminal_id\030\002 \001(\t\022\r\n\005width\030\003 \001(\005\022\016\n\006hei"
  "ght\030\004 \001(\005\"K\n\025PublishTerminalOutput\022\017\n\007us"
  "er_id\030\001 \001(\003\022\023\n\013terminal_id\030\002 \001(\t\022\014\n\004data"
  "\030\003 \001(\014\"$\n\rCloseTerminal\022\023\n\013terminal_id\030\001"
  " \001(\t\"%\n\016KickoutVisitor\022\023\n\013terminal_id\030\001 "
  "\001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Terminal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Terminal_2eproto = {
  false, false, 891, descriptor_table_protodef_Terminal_2eproto, "Terminal.proto", 
  &descriptor_table_Terminal_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_Terminal_2eproto::offsets,
  file_level_metadata_Terminal_2eproto, file_level_enum_descriptors_Terminal_2eproto, file_level_service_descriptors_Terminal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Terminal_2eproto_getter() {
  return &descriptor_table_Terminal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Terminal_2eproto(&descriptor_table_Terminal_2eproto);
namespace Global {
namespace Protocol {
namespace Terminal {

// ===================================================================

class RequestCreateTerminal::_Internal {
 public:
};

RequestCreateTerminal::RequestCreateTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.RequestCreateTerminal)
}
RequestCreateTerminal::RequestCreateTerminal(const RequestCreateTerminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_string().empty()) {
    auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.RequestCreateTerminal)
}

inline void RequestCreateTerminal::SharedCtor() {
auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
}

RequestCreateTerminal::~RequestCreateTerminal() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.RequestCreateTerminal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestCreateTerminal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestCreateTerminal::ArenaDtor(void* object) {
  RequestCreateTerminal* _this = reinterpret_cast< RequestCreateTerminal* >(object);
  (void)_this;
}
void RequestCreateTerminal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestCreateTerminal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestCreateTerminal::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.RequestCreateTerminal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_string_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestCreateTerminal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_auth_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.RequestCreateTerminal.auth_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestCreateTerminal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.RequestCreateTerminal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string auth_string = 2;
  if (!this->_internal_auth_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_string().data(), static_cast<int>(this->_internal_auth_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.RequestCreateTerminal.auth_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auth_string(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.RequestCreateTerminal)
  return target;
}

size_t RequestCreateTerminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.RequestCreateTerminal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_string = 2;
  if (!this->_internal_auth_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_string());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCreateTerminal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestCreateTerminal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCreateTerminal::GetClassData() const { return &_class_data_; }

void RequestCreateTerminal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestCreateTerminal *>(to)->MergeFrom(
      static_cast<const RequestCreateTerminal &>(from));
}


void RequestCreateTerminal::MergeFrom(const RequestCreateTerminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.RequestCreateTerminal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_string().empty()) {
    _internal_set_auth_string(from._internal_auth_string());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestCreateTerminal::CopyFrom(const RequestCreateTerminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.RequestCreateTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateTerminal::IsInitialized() const {
  return true;
}

void RequestCreateTerminal::InternalSwap(RequestCreateTerminal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_string_, lhs_arena,
      &other->auth_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestCreateTerminal, height_)
      + sizeof(RequestCreateTerminal::height_)
      - PROTOBUF_FIELD_OFFSET(RequestCreateTerminal, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCreateTerminal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[0]);
}

// ===================================================================

class ResponseCreateTerminal::_Internal {
 public:
};

ResponseCreateTerminal::ResponseCreateTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.ResponseCreateTerminal)
}
ResponseCreateTerminal::ResponseCreateTerminal(const ResponseCreateTerminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.ResponseCreateTerminal)
}

inline void ResponseCreateTerminal::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(err_code_));
}

ResponseCreateTerminal::~ResponseCreateTerminal() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.ResponseCreateTerminal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseCreateTerminal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseCreateTerminal::ArenaDtor(void* object) {
  ResponseCreateTerminal* _this = reinterpret_cast< ResponseCreateTerminal* >(object);
  (void)_this;
}
void ResponseCreateTerminal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseCreateTerminal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseCreateTerminal::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.ResponseCreateTerminal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  terminal_id_.ClearToEmpty();
  secret_key_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCreateTerminal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResponseCreateTerminal.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string terminal_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResponseCreateTerminal.secret_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCreateTerminal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.ResponseCreateTerminal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_string = 2;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResponseCreateTerminal.err_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_string(), target);
  }

  // int64 user_id = 3;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_user_id(), target);
  }

  // string terminal_id = 4;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_terminal_id(), target);
  }

  // string secret_key = 5;
  if (!this->_internal_secret_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResponseCreateTerminal.secret_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.ResponseCreateTerminal)
  return target;
}

size_t ResponseCreateTerminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.ResponseCreateTerminal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 2;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // string terminal_id = 4;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  // string secret_key = 5;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_key());
  }

  // int64 user_id = 3;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCreateTerminal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseCreateTerminal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCreateTerminal::GetClassData() const { return &_class_data_; }

void ResponseCreateTerminal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseCreateTerminal *>(to)->MergeFrom(
      static_cast<const ResponseCreateTerminal &>(from));
}


void ResponseCreateTerminal::MergeFrom(const ResponseCreateTerminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.ResponseCreateTerminal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  if (!from._internal_secret_key().empty()) {
    _internal_set_secret_key(from._internal_secret_key());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCreateTerminal::CopyFrom(const ResponseCreateTerminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.ResponseCreateTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateTerminal::IsInitialized() const {
  return true;
}

void ResponseCreateTerminal::InternalSwap(ResponseCreateTerminal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, lhs_arena,
      &other->secret_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseCreateTerminal, err_code_)
      + sizeof(ResponseCreateTerminal::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseCreateTerminal, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCreateTerminal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[1]);
}

// ===================================================================

class RequestCreateTerminal2::_Internal {
 public:
};

RequestCreateTerminal2::RequestCreateTerminal2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.RequestCreateTerminal2)
}
RequestCreateTerminal2::RequestCreateTerminal2(const RequestCreateTerminal2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_string().empty()) {
    auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.RequestCreateTerminal2)
}

inline void RequestCreateTerminal2::SharedCtor() {
auth_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
}

RequestCreateTerminal2::~RequestCreateTerminal2() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.RequestCreateTerminal2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestCreateTerminal2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestCreateTerminal2::ArenaDtor(void* object) {
  RequestCreateTerminal2* _this = reinterpret_cast< RequestCreateTerminal2* >(object);
  (void)_this;
}
void RequestCreateTerminal2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestCreateTerminal2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestCreateTerminal2::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.RequestCreateTerminal2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_string_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestCreateTerminal2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 async_task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          async_task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 async_task_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          async_task_certificate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_auth_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.RequestCreateTerminal2.auth_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestCreateTerminal2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.RequestCreateTerminal2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 async_task_id = 2;
  if (this->_internal_async_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_async_task_id(), target);
  }

  // uint32 async_task_certificate = 3;
  if (this->_internal_async_task_certificate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_async_task_certificate(), target);
  }

  // string auth_string = 4;
  if (!this->_internal_auth_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_string().data(), static_cast<int>(this->_internal_auth_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.RequestCreateTerminal2.auth_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_auth_string(), target);
  }

  // int32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // int32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.RequestCreateTerminal2)
  return target;
}

size_t RequestCreateTerminal2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.RequestCreateTerminal2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_string = 4;
  if (!this->_internal_auth_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_string());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // uint64 async_task_id = 2;
  if (this->_internal_async_task_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_async_task_id());
  }

  // uint32 async_task_certificate = 3;
  if (this->_internal_async_task_certificate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_async_task_certificate());
  }

  // int32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCreateTerminal2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestCreateTerminal2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCreateTerminal2::GetClassData() const { return &_class_data_; }

void RequestCreateTerminal2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestCreateTerminal2 *>(to)->MergeFrom(
      static_cast<const RequestCreateTerminal2 &>(from));
}


void RequestCreateTerminal2::MergeFrom(const RequestCreateTerminal2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.RequestCreateTerminal2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_string().empty()) {
    _internal_set_auth_string(from._internal_auth_string());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_async_task_id() != 0) {
    _internal_set_async_task_id(from._internal_async_task_id());
  }
  if (from._internal_async_task_certificate() != 0) {
    _internal_set_async_task_certificate(from._internal_async_task_certificate());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestCreateTerminal2::CopyFrom(const RequestCreateTerminal2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.RequestCreateTerminal2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateTerminal2::IsInitialized() const {
  return true;
}

void RequestCreateTerminal2::InternalSwap(RequestCreateTerminal2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_string_, lhs_arena,
      &other->auth_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestCreateTerminal2, height_)
      + sizeof(RequestCreateTerminal2::height_)
      - PROTOBUF_FIELD_OFFSET(RequestCreateTerminal2, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCreateTerminal2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[2]);
}

// ===================================================================

class ResponseCreateTerminal2::_Internal {
 public:
};

ResponseCreateTerminal2::ResponseCreateTerminal2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.ResponseCreateTerminal2)
}
ResponseCreateTerminal2::ResponseCreateTerminal2(const ResponseCreateTerminal2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_string().empty()) {
    err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_string(), 
      GetArenaForAllocation());
  }
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&async_task_id_, &from.async_task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&async_task_id_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.ResponseCreateTerminal2)
}

inline void ResponseCreateTerminal2::SharedCtor() {
err_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&async_task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&async_task_id_)) + sizeof(err_code_));
}

ResponseCreateTerminal2::~ResponseCreateTerminal2() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.ResponseCreateTerminal2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseCreateTerminal2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseCreateTerminal2::ArenaDtor(void* object) {
  ResponseCreateTerminal2* _this = reinterpret_cast< ResponseCreateTerminal2* >(object);
  (void)_this;
}
void ResponseCreateTerminal2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseCreateTerminal2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseCreateTerminal2::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.ResponseCreateTerminal2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_string_.ClearToEmpty();
  terminal_id_.ClearToEmpty();
  secret_key_.ClearToEmpty();
  ::memset(&async_task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&async_task_id_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCreateTerminal2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 async_task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          async_task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 async_task_certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          async_task_certificate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_err_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResponseCreateTerminal2.err_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string terminal_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCreateTerminal2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.ResponseCreateTerminal2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 async_task_id = 1;
  if (this->_internal_async_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_task_id(), target);
  }

  // uint32 async_task_certificate = 2;
  if (this->_internal_async_task_certificate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_async_task_certificate(), target);
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // string err_string = 4;
  if (!this->_internal_err_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_string().data(), static_cast<int>(this->_internal_err_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResponseCreateTerminal2.err_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_err_string(), target);
  }

  // string terminal_id = 5;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_terminal_id(), target);
  }

  // string secret_key = 6;
  if (!this->_internal_secret_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.ResponseCreateTerminal2)
  return target;
}

size_t ResponseCreateTerminal2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.ResponseCreateTerminal2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_string = 4;
  if (!this->_internal_err_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_string());
  }

  // string terminal_id = 5;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  // string secret_key = 6;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_key());
  }

  // uint64 async_task_id = 1;
  if (this->_internal_async_task_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_async_task_id());
  }

  // uint32 async_task_certificate = 2;
  if (this->_internal_async_task_certificate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_async_task_certificate());
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCreateTerminal2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseCreateTerminal2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCreateTerminal2::GetClassData() const { return &_class_data_; }

void ResponseCreateTerminal2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseCreateTerminal2 *>(to)->MergeFrom(
      static_cast<const ResponseCreateTerminal2 &>(from));
}


void ResponseCreateTerminal2::MergeFrom(const ResponseCreateTerminal2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.ResponseCreateTerminal2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_string().empty()) {
    _internal_set_err_string(from._internal_err_string());
  }
  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  if (!from._internal_secret_key().empty()) {
    _internal_set_secret_key(from._internal_secret_key());
  }
  if (from._internal_async_task_id() != 0) {
    _internal_set_async_task_id(from._internal_async_task_id());
  }
  if (from._internal_async_task_certificate() != 0) {
    _internal_set_async_task_certificate(from._internal_async_task_certificate());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCreateTerminal2::CopyFrom(const ResponseCreateTerminal2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.ResponseCreateTerminal2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateTerminal2::IsInitialized() const {
  return true;
}

void ResponseCreateTerminal2::InternalSwap(ResponseCreateTerminal2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_string_, lhs_arena,
      &other->err_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, lhs_arena,
      &other->secret_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseCreateTerminal2, err_code_)
      + sizeof(ResponseCreateTerminal2::err_code_)
      - PROTOBUF_FIELD_OFFSET(ResponseCreateTerminal2, async_task_id_)>(
          reinterpret_cast<char*>(&async_task_id_),
          reinterpret_cast<char*>(&other->async_task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCreateTerminal2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[3]);
}

// ===================================================================

class WriteCommand::_Internal {
 public:
};

WriteCommand::WriteCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.WriteCommand)
}
WriteCommand::WriteCommand(const WriteCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.WriteCommand)
}

inline void WriteCommand::SharedCtor() {
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = int64_t{0};
}

WriteCommand::~WriteCommand() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.WriteCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteCommand::ArenaDtor(void* object) {
  WriteCommand* _this = reinterpret_cast< WriteCommand* >(object);
  (void)_this;
}
void WriteCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.WriteCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminal_id_.ClearToEmpty();
  command_.ClearToEmpty();
  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string terminal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.WriteCommand.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.WriteCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string terminal_id = 2;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.WriteCommand.terminal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_terminal_id(), target);
  }

  // bytes command = 3;
  if (!this->_internal_command().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.WriteCommand)
  return target;
}

size_t WriteCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.WriteCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string terminal_id = 2;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  // bytes command = 3;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteCommand::GetClassData() const { return &_class_data_; }

void WriteCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteCommand *>(to)->MergeFrom(
      static_cast<const WriteCommand &>(from));
}


void WriteCommand::MergeFrom(const WriteCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.WriteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  if (!from._internal_command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteCommand::CopyFrom(const WriteCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.WriteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteCommand::IsInitialized() const {
  return true;
}

void WriteCommand::InternalSwap(WriteCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[4]);
}

// ===================================================================

class ResizeTerminal::_Internal {
 public:
};

ResizeTerminal::ResizeTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.ResizeTerminal)
}
ResizeTerminal::ResizeTerminal(const ResizeTerminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.ResizeTerminal)
}

inline void ResizeTerminal::SharedCtor() {
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
}

ResizeTerminal::~ResizeTerminal() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.ResizeTerminal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResizeTerminal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResizeTerminal::ArenaDtor(void* object) {
  ResizeTerminal* _this = reinterpret_cast< ResizeTerminal* >(object);
  (void)_this;
}
void ResizeTerminal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResizeTerminal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResizeTerminal::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.ResizeTerminal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminal_id_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizeTerminal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string terminal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.ResizeTerminal.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResizeTerminal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.ResizeTerminal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string terminal_id = 2;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.ResizeTerminal.terminal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_terminal_id(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.ResizeTerminal)
  return target;
}

size_t ResizeTerminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.ResizeTerminal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string terminal_id = 2;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizeTerminal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResizeTerminal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizeTerminal::GetClassData() const { return &_class_data_; }

void ResizeTerminal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResizeTerminal *>(to)->MergeFrom(
      static_cast<const ResizeTerminal &>(from));
}


void ResizeTerminal::MergeFrom(const ResizeTerminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.ResizeTerminal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResizeTerminal::CopyFrom(const ResizeTerminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.ResizeTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeTerminal::IsInitialized() const {
  return true;
}

void ResizeTerminal::InternalSwap(ResizeTerminal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizeTerminal, height_)
      + sizeof(ResizeTerminal::height_)
      - PROTOBUF_FIELD_OFFSET(ResizeTerminal, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeTerminal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[5]);
}

// ===================================================================

class PublishTerminalOutput::_Internal {
 public:
};

PublishTerminalOutput::PublishTerminalOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.PublishTerminalOutput)
}
PublishTerminalOutput::PublishTerminalOutput(const PublishTerminalOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.PublishTerminalOutput)
}

inline void PublishTerminalOutput::SharedCtor() {
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = int64_t{0};
}

PublishTerminalOutput::~PublishTerminalOutput() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.PublishTerminalOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishTerminalOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishTerminalOutput::ArenaDtor(void* object) {
  PublishTerminalOutput* _this = reinterpret_cast< PublishTerminalOutput* >(object);
  (void)_this;
}
void PublishTerminalOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishTerminalOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishTerminalOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.PublishTerminalOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminal_id_.ClearToEmpty();
  data_.ClearToEmpty();
  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTerminalOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string terminal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.PublishTerminalOutput.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTerminalOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.PublishTerminalOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string terminal_id = 2;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.PublishTerminalOutput.terminal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_terminal_id(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.PublishTerminalOutput)
  return target;
}

size_t PublishTerminalOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.PublishTerminalOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string terminal_id = 2;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTerminalOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishTerminalOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTerminalOutput::GetClassData() const { return &_class_data_; }

void PublishTerminalOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishTerminalOutput *>(to)->MergeFrom(
      static_cast<const PublishTerminalOutput &>(from));
}


void PublishTerminalOutput::MergeFrom(const PublishTerminalOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.PublishTerminalOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTerminalOutput::CopyFrom(const PublishTerminalOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.PublishTerminalOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTerminalOutput::IsInitialized() const {
  return true;
}

void PublishTerminalOutput::InternalSwap(PublishTerminalOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTerminalOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[6]);
}

// ===================================================================

class CloseTerminal::_Internal {
 public:
};

CloseTerminal::CloseTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.CloseTerminal)
}
CloseTerminal::CloseTerminal(const CloseTerminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.CloseTerminal)
}

inline void CloseTerminal::SharedCtor() {
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseTerminal::~CloseTerminal() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.CloseTerminal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseTerminal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseTerminal::ArenaDtor(void* object) {
  CloseTerminal* _this = reinterpret_cast< CloseTerminal* >(object);
  (void)_this;
}
void CloseTerminal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseTerminal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseTerminal::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.CloseTerminal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminal_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseTerminal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string terminal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.CloseTerminal.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseTerminal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.CloseTerminal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string terminal_id = 1;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.CloseTerminal.terminal_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_terminal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.CloseTerminal)
  return target;
}

size_t CloseTerminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.CloseTerminal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string terminal_id = 1;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseTerminal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseTerminal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseTerminal::GetClassData() const { return &_class_data_; }

void CloseTerminal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseTerminal *>(to)->MergeFrom(
      static_cast<const CloseTerminal &>(from));
}


void CloseTerminal::MergeFrom(const CloseTerminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.CloseTerminal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseTerminal::CopyFrom(const CloseTerminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.CloseTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseTerminal::IsInitialized() const {
  return true;
}

void CloseTerminal::InternalSwap(CloseTerminal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseTerminal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[7]);
}

// ===================================================================

class KickoutVisitor::_Internal {
 public:
};

KickoutVisitor::KickoutVisitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Global.Protocol.Terminal.KickoutVisitor)
}
KickoutVisitor::KickoutVisitor(const KickoutVisitor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_terminal_id().empty()) {
    terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terminal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Global.Protocol.Terminal.KickoutVisitor)
}

inline void KickoutVisitor::SharedCtor() {
terminal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KickoutVisitor::~KickoutVisitor() {
  // @@protoc_insertion_point(destructor:Global.Protocol.Terminal.KickoutVisitor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KickoutVisitor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  terminal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KickoutVisitor::ArenaDtor(void* object) {
  KickoutVisitor* _this = reinterpret_cast< KickoutVisitor* >(object);
  (void)_this;
}
void KickoutVisitor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickoutVisitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KickoutVisitor::Clear() {
// @@protoc_insertion_point(message_clear_start:Global.Protocol.Terminal.KickoutVisitor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminal_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickoutVisitor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string terminal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_terminal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Global.Protocol.Terminal.KickoutVisitor.terminal_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickoutVisitor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Global.Protocol.Terminal.KickoutVisitor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string terminal_id = 1;
  if (!this->_internal_terminal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terminal_id().data(), static_cast<int>(this->_internal_terminal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Global.Protocol.Terminal.KickoutVisitor.terminal_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_terminal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Global.Protocol.Terminal.KickoutVisitor)
  return target;
}

size_t KickoutVisitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Global.Protocol.Terminal.KickoutVisitor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string terminal_id = 1;
  if (!this->_internal_terminal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terminal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickoutVisitor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KickoutVisitor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickoutVisitor::GetClassData() const { return &_class_data_; }

void KickoutVisitor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KickoutVisitor *>(to)->MergeFrom(
      static_cast<const KickoutVisitor &>(from));
}


void KickoutVisitor::MergeFrom(const KickoutVisitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Global.Protocol.Terminal.KickoutVisitor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_terminal_id().empty()) {
    _internal_set_terminal_id(from._internal_terminal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickoutVisitor::CopyFrom(const KickoutVisitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Global.Protocol.Terminal.KickoutVisitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickoutVisitor::IsInitialized() const {
  return true;
}

void KickoutVisitor::InternalSwap(KickoutVisitor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terminal_id_, lhs_arena,
      &other->terminal_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KickoutVisitor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Terminal_2eproto_getter, &descriptor_table_Terminal_2eproto_once,
      file_level_metadata_Terminal_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Terminal
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::RequestCreateTerminal* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::RequestCreateTerminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::RequestCreateTerminal >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::ResponseCreateTerminal* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::ResponseCreateTerminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::ResponseCreateTerminal >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::RequestCreateTerminal2* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::RequestCreateTerminal2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::RequestCreateTerminal2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::ResponseCreateTerminal2* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::ResponseCreateTerminal2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::ResponseCreateTerminal2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::WriteCommand* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::WriteCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::WriteCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::ResizeTerminal* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::ResizeTerminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::ResizeTerminal >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::PublishTerminalOutput* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::PublishTerminalOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::PublishTerminalOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::CloseTerminal* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::CloseTerminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::CloseTerminal >(arena);
}
template<> PROTOBUF_NOINLINE ::Global::Protocol::Terminal::KickoutVisitor* Arena::CreateMaybeMessage< ::Global::Protocol::Terminal::KickoutVisitor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Global::Protocol::Terminal::KickoutVisitor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
