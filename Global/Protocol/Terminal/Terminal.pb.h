// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Terminal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Terminal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Terminal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Terminal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Terminal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Terminal_2eproto;
namespace Global {
namespace Protocol {
namespace Terminal {
class CloseTerminal;
struct CloseTerminalDefaultTypeInternal;
extern CloseTerminalDefaultTypeInternal _CloseTerminal_default_instance_;
class KickoutVisitor;
struct KickoutVisitorDefaultTypeInternal;
extern KickoutVisitorDefaultTypeInternal _KickoutVisitor_default_instance_;
class PublishTerminalOutput;
struct PublishTerminalOutputDefaultTypeInternal;
extern PublishTerminalOutputDefaultTypeInternal _PublishTerminalOutput_default_instance_;
class RequestCreateTerminal;
struct RequestCreateTerminalDefaultTypeInternal;
extern RequestCreateTerminalDefaultTypeInternal _RequestCreateTerminal_default_instance_;
class RequestCreateTerminal2;
struct RequestCreateTerminal2DefaultTypeInternal;
extern RequestCreateTerminal2DefaultTypeInternal _RequestCreateTerminal2_default_instance_;
class ResizeTerminal;
struct ResizeTerminalDefaultTypeInternal;
extern ResizeTerminalDefaultTypeInternal _ResizeTerminal_default_instance_;
class ResponseCreateTerminal;
struct ResponseCreateTerminalDefaultTypeInternal;
extern ResponseCreateTerminalDefaultTypeInternal _ResponseCreateTerminal_default_instance_;
class ResponseCreateTerminal2;
struct ResponseCreateTerminal2DefaultTypeInternal;
extern ResponseCreateTerminal2DefaultTypeInternal _ResponseCreateTerminal2_default_instance_;
class WriteCommand;
struct WriteCommandDefaultTypeInternal;
extern WriteCommandDefaultTypeInternal _WriteCommand_default_instance_;
}  // namespace Terminal
}  // namespace Protocol
}  // namespace Global
PROTOBUF_NAMESPACE_OPEN
template<> ::Global::Protocol::Terminal::CloseTerminal* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::CloseTerminal>(Arena*);
template<> ::Global::Protocol::Terminal::KickoutVisitor* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::KickoutVisitor>(Arena*);
template<> ::Global::Protocol::Terminal::PublishTerminalOutput* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::PublishTerminalOutput>(Arena*);
template<> ::Global::Protocol::Terminal::RequestCreateTerminal* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::RequestCreateTerminal>(Arena*);
template<> ::Global::Protocol::Terminal::RequestCreateTerminal2* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::RequestCreateTerminal2>(Arena*);
template<> ::Global::Protocol::Terminal::ResizeTerminal* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::ResizeTerminal>(Arena*);
template<> ::Global::Protocol::Terminal::ResponseCreateTerminal* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::ResponseCreateTerminal>(Arena*);
template<> ::Global::Protocol::Terminal::ResponseCreateTerminal2* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::ResponseCreateTerminal2>(Arena*);
template<> ::Global::Protocol::Terminal::WriteCommand* Arena::CreateMaybeMessage<::Global::Protocol::Terminal::WriteCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Global {
namespace Protocol {
namespace Terminal {

// ===================================================================

class RequestCreateTerminal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.RequestCreateTerminal) */ {
 public:
  inline RequestCreateTerminal() : RequestCreateTerminal(nullptr) {}
  ~RequestCreateTerminal() override;
  explicit constexpr RequestCreateTerminal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestCreateTerminal(const RequestCreateTerminal& from);
  RequestCreateTerminal(RequestCreateTerminal&& from) noexcept
    : RequestCreateTerminal() {
    *this = ::std::move(from);
  }

  inline RequestCreateTerminal& operator=(const RequestCreateTerminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCreateTerminal& operator=(RequestCreateTerminal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCreateTerminal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCreateTerminal* internal_default_instance() {
    return reinterpret_cast<const RequestCreateTerminal*>(
               &_RequestCreateTerminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestCreateTerminal& a, RequestCreateTerminal& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCreateTerminal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCreateTerminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestCreateTerminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestCreateTerminal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestCreateTerminal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestCreateTerminal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCreateTerminal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.RequestCreateTerminal";
  }
  protected:
  explicit RequestCreateTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthStringFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string auth_string = 2;
  void clear_auth_string();
  const std::string& auth_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_string();
  PROTOBUF_NODISCARD std::string* release_auth_string();
  void set_allocated_auth_string(std::string* auth_string);
  private:
  const std::string& _internal_auth_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_string(const std::string& value);
  std::string* _internal_mutable_auth_string();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.RequestCreateTerminal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_string_;
  int64_t user_id_;
  int32_t width_;
  int32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class ResponseCreateTerminal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.ResponseCreateTerminal) */ {
 public:
  inline ResponseCreateTerminal() : ResponseCreateTerminal(nullptr) {}
  ~ResponseCreateTerminal() override;
  explicit constexpr ResponseCreateTerminal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseCreateTerminal(const ResponseCreateTerminal& from);
  ResponseCreateTerminal(ResponseCreateTerminal&& from) noexcept
    : ResponseCreateTerminal() {
    *this = ::std::move(from);
  }

  inline ResponseCreateTerminal& operator=(const ResponseCreateTerminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCreateTerminal& operator=(ResponseCreateTerminal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseCreateTerminal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseCreateTerminal* internal_default_instance() {
    return reinterpret_cast<const ResponseCreateTerminal*>(
               &_ResponseCreateTerminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseCreateTerminal& a, ResponseCreateTerminal& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseCreateTerminal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCreateTerminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseCreateTerminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseCreateTerminal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseCreateTerminal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseCreateTerminal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseCreateTerminal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.ResponseCreateTerminal";
  }
  protected:
  explicit ResponseCreateTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 2,
    kTerminalIdFieldNumber = 4,
    kSecretKeyFieldNumber = 5,
    kUserIdFieldNumber = 3,
    kErrCodeFieldNumber = 1,
  };
  // string err_string = 2;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string terminal_id = 4;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // string secret_key = 5;
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // int64 user_id = 3;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.ResponseCreateTerminal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  int64_t user_id_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class RequestCreateTerminal2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.RequestCreateTerminal2) */ {
 public:
  inline RequestCreateTerminal2() : RequestCreateTerminal2(nullptr) {}
  ~RequestCreateTerminal2() override;
  explicit constexpr RequestCreateTerminal2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestCreateTerminal2(const RequestCreateTerminal2& from);
  RequestCreateTerminal2(RequestCreateTerminal2&& from) noexcept
    : RequestCreateTerminal2() {
    *this = ::std::move(from);
  }

  inline RequestCreateTerminal2& operator=(const RequestCreateTerminal2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCreateTerminal2& operator=(RequestCreateTerminal2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCreateTerminal2& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCreateTerminal2* internal_default_instance() {
    return reinterpret_cast<const RequestCreateTerminal2*>(
               &_RequestCreateTerminal2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestCreateTerminal2& a, RequestCreateTerminal2& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCreateTerminal2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCreateTerminal2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestCreateTerminal2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestCreateTerminal2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestCreateTerminal2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestCreateTerminal2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCreateTerminal2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.RequestCreateTerminal2";
  }
  protected:
  explicit RequestCreateTerminal2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthStringFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kAsyncTaskIdFieldNumber = 2,
    kAsyncTaskCertificateFieldNumber = 3,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
  };
  // string auth_string = 4;
  void clear_auth_string();
  const std::string& auth_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_string();
  PROTOBUF_NODISCARD std::string* release_auth_string();
  void set_allocated_auth_string(std::string* auth_string);
  private:
  const std::string& _internal_auth_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_string(const std::string& value);
  std::string* _internal_mutable_auth_string();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint64 async_task_id = 2;
  void clear_async_task_id();
  uint64_t async_task_id() const;
  void set_async_task_id(uint64_t value);
  private:
  uint64_t _internal_async_task_id() const;
  void _internal_set_async_task_id(uint64_t value);
  public:

  // uint32 async_task_certificate = 3;
  void clear_async_task_certificate();
  uint32_t async_task_certificate() const;
  void set_async_task_certificate(uint32_t value);
  private:
  uint32_t _internal_async_task_certificate() const;
  void _internal_set_async_task_certificate(uint32_t value);
  public:

  // int32 width = 5;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 6;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.RequestCreateTerminal2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_string_;
  int64_t user_id_;
  uint64_t async_task_id_;
  uint32_t async_task_certificate_;
  int32_t width_;
  int32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class ResponseCreateTerminal2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.ResponseCreateTerminal2) */ {
 public:
  inline ResponseCreateTerminal2() : ResponseCreateTerminal2(nullptr) {}
  ~ResponseCreateTerminal2() override;
  explicit constexpr ResponseCreateTerminal2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseCreateTerminal2(const ResponseCreateTerminal2& from);
  ResponseCreateTerminal2(ResponseCreateTerminal2&& from) noexcept
    : ResponseCreateTerminal2() {
    *this = ::std::move(from);
  }

  inline ResponseCreateTerminal2& operator=(const ResponseCreateTerminal2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCreateTerminal2& operator=(ResponseCreateTerminal2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseCreateTerminal2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseCreateTerminal2* internal_default_instance() {
    return reinterpret_cast<const ResponseCreateTerminal2*>(
               &_ResponseCreateTerminal2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseCreateTerminal2& a, ResponseCreateTerminal2& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseCreateTerminal2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCreateTerminal2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseCreateTerminal2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseCreateTerminal2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseCreateTerminal2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseCreateTerminal2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseCreateTerminal2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.ResponseCreateTerminal2";
  }
  protected:
  explicit ResponseCreateTerminal2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStringFieldNumber = 4,
    kTerminalIdFieldNumber = 5,
    kSecretKeyFieldNumber = 6,
    kAsyncTaskIdFieldNumber = 1,
    kAsyncTaskCertificateFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string err_string = 4;
  void clear_err_string();
  const std::string& err_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_string();
  PROTOBUF_NODISCARD std::string* release_err_string();
  void set_allocated_err_string(std::string* err_string);
  private:
  const std::string& _internal_err_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_string(const std::string& value);
  std::string* _internal_mutable_err_string();
  public:

  // string terminal_id = 5;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // string secret_key = 6;
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // uint64 async_task_id = 1;
  void clear_async_task_id();
  uint64_t async_task_id() const;
  void set_async_task_id(uint64_t value);
  private:
  uint64_t _internal_async_task_id() const;
  void _internal_set_async_task_id(uint64_t value);
  public:

  // uint32 async_task_certificate = 2;
  void clear_async_task_certificate();
  uint32_t async_task_certificate() const;
  void set_async_task_certificate(uint32_t value);
  private:
  uint32_t _internal_async_task_certificate() const;
  void _internal_set_async_task_certificate(uint32_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.ResponseCreateTerminal2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  uint64_t async_task_id_;
  uint32_t async_task_certificate_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class WriteCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.WriteCommand) */ {
 public:
  inline WriteCommand() : WriteCommand(nullptr) {}
  ~WriteCommand() override;
  explicit constexpr WriteCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteCommand(const WriteCommand& from);
  WriteCommand(WriteCommand&& from) noexcept
    : WriteCommand() {
    *this = ::std::move(from);
  }

  inline WriteCommand& operator=(const WriteCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteCommand& operator=(WriteCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteCommand* internal_default_instance() {
    return reinterpret_cast<const WriteCommand*>(
               &_WriteCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteCommand& a, WriteCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.WriteCommand";
  }
  protected:
  explicit WriteCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalIdFieldNumber = 2,
    kCommandFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string terminal_id = 2;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // bytes command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.WriteCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class ResizeTerminal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.ResizeTerminal) */ {
 public:
  inline ResizeTerminal() : ResizeTerminal(nullptr) {}
  ~ResizeTerminal() override;
  explicit constexpr ResizeTerminal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResizeTerminal(const ResizeTerminal& from);
  ResizeTerminal(ResizeTerminal&& from) noexcept
    : ResizeTerminal() {
    *this = ::std::move(from);
  }

  inline ResizeTerminal& operator=(const ResizeTerminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeTerminal& operator=(ResizeTerminal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResizeTerminal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResizeTerminal* internal_default_instance() {
    return reinterpret_cast<const ResizeTerminal*>(
               &_ResizeTerminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResizeTerminal& a, ResizeTerminal& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeTerminal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeTerminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResizeTerminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResizeTerminal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResizeTerminal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResizeTerminal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeTerminal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.ResizeTerminal";
  }
  protected:
  explicit ResizeTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string terminal_id = 2;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.ResizeTerminal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  int64_t user_id_;
  int32_t width_;
  int32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class PublishTerminalOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.PublishTerminalOutput) */ {
 public:
  inline PublishTerminalOutput() : PublishTerminalOutput(nullptr) {}
  ~PublishTerminalOutput() override;
  explicit constexpr PublishTerminalOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishTerminalOutput(const PublishTerminalOutput& from);
  PublishTerminalOutput(PublishTerminalOutput&& from) noexcept
    : PublishTerminalOutput() {
    *this = ::std::move(from);
  }

  inline PublishTerminalOutput& operator=(const PublishTerminalOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishTerminalOutput& operator=(PublishTerminalOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishTerminalOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishTerminalOutput* internal_default_instance() {
    return reinterpret_cast<const PublishTerminalOutput*>(
               &_PublishTerminalOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PublishTerminalOutput& a, PublishTerminalOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishTerminalOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishTerminalOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishTerminalOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishTerminalOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishTerminalOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishTerminalOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishTerminalOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.PublishTerminalOutput";
  }
  protected:
  explicit PublishTerminalOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalIdFieldNumber = 2,
    kDataFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string terminal_id = 2;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.PublishTerminalOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class CloseTerminal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.CloseTerminal) */ {
 public:
  inline CloseTerminal() : CloseTerminal(nullptr) {}
  ~CloseTerminal() override;
  explicit constexpr CloseTerminal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseTerminal(const CloseTerminal& from);
  CloseTerminal(CloseTerminal&& from) noexcept
    : CloseTerminal() {
    *this = ::std::move(from);
  }

  inline CloseTerminal& operator=(const CloseTerminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseTerminal& operator=(CloseTerminal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseTerminal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseTerminal* internal_default_instance() {
    return reinterpret_cast<const CloseTerminal*>(
               &_CloseTerminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CloseTerminal& a, CloseTerminal& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseTerminal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseTerminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseTerminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseTerminal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseTerminal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseTerminal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseTerminal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.CloseTerminal";
  }
  protected:
  explicit CloseTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalIdFieldNumber = 1,
  };
  // string terminal_id = 1;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.CloseTerminal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// -------------------------------------------------------------------

class KickoutVisitor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Global.Protocol.Terminal.KickoutVisitor) */ {
 public:
  inline KickoutVisitor() : KickoutVisitor(nullptr) {}
  ~KickoutVisitor() override;
  explicit constexpr KickoutVisitor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KickoutVisitor(const KickoutVisitor& from);
  KickoutVisitor(KickoutVisitor&& from) noexcept
    : KickoutVisitor() {
    *this = ::std::move(from);
  }

  inline KickoutVisitor& operator=(const KickoutVisitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickoutVisitor& operator=(KickoutVisitor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KickoutVisitor& default_instance() {
    return *internal_default_instance();
  }
  static inline const KickoutVisitor* internal_default_instance() {
    return reinterpret_cast<const KickoutVisitor*>(
               &_KickoutVisitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KickoutVisitor& a, KickoutVisitor& b) {
    a.Swap(&b);
  }
  inline void Swap(KickoutVisitor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickoutVisitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KickoutVisitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KickoutVisitor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KickoutVisitor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KickoutVisitor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickoutVisitor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Global.Protocol.Terminal.KickoutVisitor";
  }
  protected:
  explicit KickoutVisitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalIdFieldNumber = 1,
  };
  // string terminal_id = 1;
  void clear_terminal_id();
  const std::string& terminal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_terminal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_terminal_id();
  PROTOBUF_NODISCARD std::string* release_terminal_id();
  void set_allocated_terminal_id(std::string* terminal_id);
  private:
  const std::string& _internal_terminal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terminal_id(const std::string& value);
  std::string* _internal_mutable_terminal_id();
  public:

  // @@protoc_insertion_point(class_scope:Global.Protocol.Terminal.KickoutVisitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Terminal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestCreateTerminal

// int64 user_id = 1;
inline void RequestCreateTerminal::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestCreateTerminal::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestCreateTerminal::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal.user_id)
  return _internal_user_id();
}
inline void RequestCreateTerminal::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestCreateTerminal::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal.user_id)
}

// string auth_string = 2;
inline void RequestCreateTerminal::clear_auth_string() {
  auth_string_.ClearToEmpty();
}
inline const std::string& RequestCreateTerminal::auth_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal.auth_string)
  return _internal_auth_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestCreateTerminal::set_auth_string(ArgT0&& arg0, ArgT... args) {
 
 auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal.auth_string)
}
inline std::string* RequestCreateTerminal::mutable_auth_string() {
  std::string* _s = _internal_mutable_auth_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.RequestCreateTerminal.auth_string)
  return _s;
}
inline const std::string& RequestCreateTerminal::_internal_auth_string() const {
  return auth_string_.Get();
}
inline void RequestCreateTerminal::_internal_set_auth_string(const std::string& value) {
  
  auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestCreateTerminal::_internal_mutable_auth_string() {
  
  return auth_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestCreateTerminal::release_auth_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.RequestCreateTerminal.auth_string)
  return auth_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestCreateTerminal::set_allocated_auth_string(std::string* auth_string) {
  if (auth_string != nullptr) {
    
  } else {
    
  }
  auth_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.RequestCreateTerminal.auth_string)
}

// int32 width = 3;
inline void RequestCreateTerminal::clear_width() {
  width_ = 0;
}
inline int32_t RequestCreateTerminal::_internal_width() const {
  return width_;
}
inline int32_t RequestCreateTerminal::width() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal.width)
  return _internal_width();
}
inline void RequestCreateTerminal::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void RequestCreateTerminal::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal.width)
}

// int32 height = 4;
inline void RequestCreateTerminal::clear_height() {
  height_ = 0;
}
inline int32_t RequestCreateTerminal::_internal_height() const {
  return height_;
}
inline int32_t RequestCreateTerminal::height() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal.height)
  return _internal_height();
}
inline void RequestCreateTerminal::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void RequestCreateTerminal::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal.height)
}

// -------------------------------------------------------------------

// ResponseCreateTerminal

// int32 err_code = 1;
inline void ResponseCreateTerminal::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseCreateTerminal::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseCreateTerminal::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal.err_code)
  return _internal_err_code();
}
inline void ResponseCreateTerminal::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseCreateTerminal::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal.err_code)
}

// string err_string = 2;
inline void ResponseCreateTerminal::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseCreateTerminal::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseCreateTerminal::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal.err_string)
}
inline std::string* ResponseCreateTerminal::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResponseCreateTerminal.err_string)
  return _s;
}
inline const std::string& ResponseCreateTerminal::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseCreateTerminal::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResponseCreateTerminal.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseCreateTerminal::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResponseCreateTerminal.err_string)
}

// int64 user_id = 3;
inline void ResponseCreateTerminal::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResponseCreateTerminal::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResponseCreateTerminal::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal.user_id)
  return _internal_user_id();
}
inline void ResponseCreateTerminal::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResponseCreateTerminal::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal.user_id)
}

// string terminal_id = 4;
inline void ResponseCreateTerminal::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& ResponseCreateTerminal::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseCreateTerminal::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id)
}
inline std::string* ResponseCreateTerminal::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id)
  return _s;
}
inline const std::string& ResponseCreateTerminal::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void ResponseCreateTerminal::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseCreateTerminal::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResponseCreateTerminal.terminal_id)
}

// string secret_key = 5;
inline void ResponseCreateTerminal::clear_secret_key() {
  secret_key_.ClearToEmpty();
}
inline const std::string& ResponseCreateTerminal::secret_key() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseCreateTerminal::set_secret_key(ArgT0&& arg0, ArgT... args) {
 
 secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal.secret_key)
}
inline std::string* ResponseCreateTerminal::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResponseCreateTerminal.secret_key)
  return _s;
}
inline const std::string& ResponseCreateTerminal::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void ResponseCreateTerminal::_internal_set_secret_key(const std::string& value) {
  
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal::_internal_mutable_secret_key() {
  
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal::release_secret_key() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResponseCreateTerminal.secret_key)
  return secret_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseCreateTerminal::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResponseCreateTerminal.secret_key)
}

// -------------------------------------------------------------------

// RequestCreateTerminal2

// int64 user_id = 1;
inline void RequestCreateTerminal2::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t RequestCreateTerminal2::_internal_user_id() const {
  return user_id_;
}
inline int64_t RequestCreateTerminal2::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal2.user_id)
  return _internal_user_id();
}
inline void RequestCreateTerminal2::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void RequestCreateTerminal2::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal2.user_id)
}

// uint64 async_task_id = 2;
inline void RequestCreateTerminal2::clear_async_task_id() {
  async_task_id_ = uint64_t{0u};
}
inline uint64_t RequestCreateTerminal2::_internal_async_task_id() const {
  return async_task_id_;
}
inline uint64_t RequestCreateTerminal2::async_task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal2.async_task_id)
  return _internal_async_task_id();
}
inline void RequestCreateTerminal2::_internal_set_async_task_id(uint64_t value) {
  
  async_task_id_ = value;
}
inline void RequestCreateTerminal2::set_async_task_id(uint64_t value) {
  _internal_set_async_task_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal2.async_task_id)
}

// uint32 async_task_certificate = 3;
inline void RequestCreateTerminal2::clear_async_task_certificate() {
  async_task_certificate_ = 0u;
}
inline uint32_t RequestCreateTerminal2::_internal_async_task_certificate() const {
  return async_task_certificate_;
}
inline uint32_t RequestCreateTerminal2::async_task_certificate() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal2.async_task_certificate)
  return _internal_async_task_certificate();
}
inline void RequestCreateTerminal2::_internal_set_async_task_certificate(uint32_t value) {
  
  async_task_certificate_ = value;
}
inline void RequestCreateTerminal2::set_async_task_certificate(uint32_t value) {
  _internal_set_async_task_certificate(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal2.async_task_certificate)
}

// string auth_string = 4;
inline void RequestCreateTerminal2::clear_auth_string() {
  auth_string_.ClearToEmpty();
}
inline const std::string& RequestCreateTerminal2::auth_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal2.auth_string)
  return _internal_auth_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestCreateTerminal2::set_auth_string(ArgT0&& arg0, ArgT... args) {
 
 auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal2.auth_string)
}
inline std::string* RequestCreateTerminal2::mutable_auth_string() {
  std::string* _s = _internal_mutable_auth_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.RequestCreateTerminal2.auth_string)
  return _s;
}
inline const std::string& RequestCreateTerminal2::_internal_auth_string() const {
  return auth_string_.Get();
}
inline void RequestCreateTerminal2::_internal_set_auth_string(const std::string& value) {
  
  auth_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestCreateTerminal2::_internal_mutable_auth_string() {
  
  return auth_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestCreateTerminal2::release_auth_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.RequestCreateTerminal2.auth_string)
  return auth_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestCreateTerminal2::set_allocated_auth_string(std::string* auth_string) {
  if (auth_string != nullptr) {
    
  } else {
    
  }
  auth_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.RequestCreateTerminal2.auth_string)
}

// int32 width = 5;
inline void RequestCreateTerminal2::clear_width() {
  width_ = 0;
}
inline int32_t RequestCreateTerminal2::_internal_width() const {
  return width_;
}
inline int32_t RequestCreateTerminal2::width() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal2.width)
  return _internal_width();
}
inline void RequestCreateTerminal2::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void RequestCreateTerminal2::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal2.width)
}

// int32 height = 6;
inline void RequestCreateTerminal2::clear_height() {
  height_ = 0;
}
inline int32_t RequestCreateTerminal2::_internal_height() const {
  return height_;
}
inline int32_t RequestCreateTerminal2::height() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.RequestCreateTerminal2.height)
  return _internal_height();
}
inline void RequestCreateTerminal2::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void RequestCreateTerminal2::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.RequestCreateTerminal2.height)
}

// -------------------------------------------------------------------

// ResponseCreateTerminal2

// uint64 async_task_id = 1;
inline void ResponseCreateTerminal2::clear_async_task_id() {
  async_task_id_ = uint64_t{0u};
}
inline uint64_t ResponseCreateTerminal2::_internal_async_task_id() const {
  return async_task_id_;
}
inline uint64_t ResponseCreateTerminal2::async_task_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal2.async_task_id)
  return _internal_async_task_id();
}
inline void ResponseCreateTerminal2::_internal_set_async_task_id(uint64_t value) {
  
  async_task_id_ = value;
}
inline void ResponseCreateTerminal2::set_async_task_id(uint64_t value) {
  _internal_set_async_task_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal2.async_task_id)
}

// uint32 async_task_certificate = 2;
inline void ResponseCreateTerminal2::clear_async_task_certificate() {
  async_task_certificate_ = 0u;
}
inline uint32_t ResponseCreateTerminal2::_internal_async_task_certificate() const {
  return async_task_certificate_;
}
inline uint32_t ResponseCreateTerminal2::async_task_certificate() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal2.async_task_certificate)
  return _internal_async_task_certificate();
}
inline void ResponseCreateTerminal2::_internal_set_async_task_certificate(uint32_t value) {
  
  async_task_certificate_ = value;
}
inline void ResponseCreateTerminal2::set_async_task_certificate(uint32_t value) {
  _internal_set_async_task_certificate(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal2.async_task_certificate)
}

// int32 err_code = 3;
inline void ResponseCreateTerminal2::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ResponseCreateTerminal2::_internal_err_code() const {
  return err_code_;
}
inline int32_t ResponseCreateTerminal2::err_code() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal2.err_code)
  return _internal_err_code();
}
inline void ResponseCreateTerminal2::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ResponseCreateTerminal2::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal2.err_code)
}

// string err_string = 4;
inline void ResponseCreateTerminal2::clear_err_string() {
  err_string_.ClearToEmpty();
}
inline const std::string& ResponseCreateTerminal2::err_string() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal2.err_string)
  return _internal_err_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseCreateTerminal2::set_err_string(ArgT0&& arg0, ArgT... args) {
 
 err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal2.err_string)
}
inline std::string* ResponseCreateTerminal2::mutable_err_string() {
  std::string* _s = _internal_mutable_err_string();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResponseCreateTerminal2.err_string)
  return _s;
}
inline const std::string& ResponseCreateTerminal2::_internal_err_string() const {
  return err_string_.Get();
}
inline void ResponseCreateTerminal2::_internal_set_err_string(const std::string& value) {
  
  err_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal2::_internal_mutable_err_string() {
  
  return err_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal2::release_err_string() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResponseCreateTerminal2.err_string)
  return err_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseCreateTerminal2::set_allocated_err_string(std::string* err_string) {
  if (err_string != nullptr) {
    
  } else {
    
  }
  err_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResponseCreateTerminal2.err_string)
}

// string terminal_id = 5;
inline void ResponseCreateTerminal2::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& ResponseCreateTerminal2::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseCreateTerminal2::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id)
}
inline std::string* ResponseCreateTerminal2::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id)
  return _s;
}
inline const std::string& ResponseCreateTerminal2::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void ResponseCreateTerminal2::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal2::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal2::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseCreateTerminal2::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResponseCreateTerminal2.terminal_id)
}

// string secret_key = 6;
inline void ResponseCreateTerminal2::clear_secret_key() {
  secret_key_.ClearToEmpty();
}
inline const std::string& ResponseCreateTerminal2::secret_key() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseCreateTerminal2::set_secret_key(ArgT0&& arg0, ArgT... args) {
 
 secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key)
}
inline std::string* ResponseCreateTerminal2::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key)
  return _s;
}
inline const std::string& ResponseCreateTerminal2::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void ResponseCreateTerminal2::_internal_set_secret_key(const std::string& value) {
  
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal2::_internal_mutable_secret_key() {
  
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseCreateTerminal2::release_secret_key() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key)
  return secret_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseCreateTerminal2::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResponseCreateTerminal2.secret_key)
}

// -------------------------------------------------------------------

// WriteCommand

// int64 user_id = 1;
inline void WriteCommand::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t WriteCommand::_internal_user_id() const {
  return user_id_;
}
inline int64_t WriteCommand::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.WriteCommand.user_id)
  return _internal_user_id();
}
inline void WriteCommand::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void WriteCommand::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.WriteCommand.user_id)
}

// string terminal_id = 2;
inline void WriteCommand::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& WriteCommand::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.WriteCommand.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteCommand::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.WriteCommand.terminal_id)
}
inline std::string* WriteCommand::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.WriteCommand.terminal_id)
  return _s;
}
inline const std::string& WriteCommand::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void WriteCommand::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteCommand::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteCommand::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.WriteCommand.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteCommand::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.WriteCommand.terminal_id)
}

// bytes command = 3;
inline void WriteCommand::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& WriteCommand::command() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.WriteCommand.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteCommand::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.WriteCommand.command)
}
inline std::string* WriteCommand::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.WriteCommand.command)
  return _s;
}
inline const std::string& WriteCommand::_internal_command() const {
  return command_.Get();
}
inline void WriteCommand::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteCommand::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteCommand::release_command() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.WriteCommand.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteCommand::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.WriteCommand.command)
}

// -------------------------------------------------------------------

// ResizeTerminal

// int64 user_id = 1;
inline void ResizeTerminal::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t ResizeTerminal::_internal_user_id() const {
  return user_id_;
}
inline int64_t ResizeTerminal::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResizeTerminal.user_id)
  return _internal_user_id();
}
inline void ResizeTerminal::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void ResizeTerminal::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResizeTerminal.user_id)
}

// string terminal_id = 2;
inline void ResizeTerminal::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& ResizeTerminal::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResizeTerminal.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResizeTerminal::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResizeTerminal.terminal_id)
}
inline std::string* ResizeTerminal::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.ResizeTerminal.terminal_id)
  return _s;
}
inline const std::string& ResizeTerminal::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void ResizeTerminal::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResizeTerminal::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResizeTerminal::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.ResizeTerminal.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResizeTerminal::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.ResizeTerminal.terminal_id)
}

// int32 width = 3;
inline void ResizeTerminal::clear_width() {
  width_ = 0;
}
inline int32_t ResizeTerminal::_internal_width() const {
  return width_;
}
inline int32_t ResizeTerminal::width() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResizeTerminal.width)
  return _internal_width();
}
inline void ResizeTerminal::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void ResizeTerminal::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResizeTerminal.width)
}

// int32 height = 4;
inline void ResizeTerminal::clear_height() {
  height_ = 0;
}
inline int32_t ResizeTerminal::_internal_height() const {
  return height_;
}
inline int32_t ResizeTerminal::height() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.ResizeTerminal.height)
  return _internal_height();
}
inline void ResizeTerminal::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void ResizeTerminal::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.ResizeTerminal.height)
}

// -------------------------------------------------------------------

// PublishTerminalOutput

// int64 user_id = 1;
inline void PublishTerminalOutput::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t PublishTerminalOutput::_internal_user_id() const {
  return user_id_;
}
inline int64_t PublishTerminalOutput::user_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.PublishTerminalOutput.user_id)
  return _internal_user_id();
}
inline void PublishTerminalOutput::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void PublishTerminalOutput::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.PublishTerminalOutput.user_id)
}

// string terminal_id = 2;
inline void PublishTerminalOutput::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& PublishTerminalOutput::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.PublishTerminalOutput.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishTerminalOutput::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.PublishTerminalOutput.terminal_id)
}
inline std::string* PublishTerminalOutput::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.PublishTerminalOutput.terminal_id)
  return _s;
}
inline const std::string& PublishTerminalOutput::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void PublishTerminalOutput::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishTerminalOutput::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishTerminalOutput::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.PublishTerminalOutput.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublishTerminalOutput::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.PublishTerminalOutput.terminal_id)
}

// bytes data = 3;
inline void PublishTerminalOutput::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PublishTerminalOutput::data() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.PublishTerminalOutput.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishTerminalOutput::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.PublishTerminalOutput.data)
}
inline std::string* PublishTerminalOutput::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.PublishTerminalOutput.data)
  return _s;
}
inline const std::string& PublishTerminalOutput::_internal_data() const {
  return data_.Get();
}
inline void PublishTerminalOutput::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishTerminalOutput::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishTerminalOutput::release_data() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.PublishTerminalOutput.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublishTerminalOutput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.PublishTerminalOutput.data)
}

// -------------------------------------------------------------------

// CloseTerminal

// string terminal_id = 1;
inline void CloseTerminal::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& CloseTerminal::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.CloseTerminal.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseTerminal::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.CloseTerminal.terminal_id)
}
inline std::string* CloseTerminal::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.CloseTerminal.terminal_id)
  return _s;
}
inline const std::string& CloseTerminal::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void CloseTerminal::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloseTerminal::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloseTerminal::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.CloseTerminal.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CloseTerminal::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.CloseTerminal.terminal_id)
}

// -------------------------------------------------------------------

// KickoutVisitor

// string terminal_id = 1;
inline void KickoutVisitor::clear_terminal_id() {
  terminal_id_.ClearToEmpty();
}
inline const std::string& KickoutVisitor::terminal_id() const {
  // @@protoc_insertion_point(field_get:Global.Protocol.Terminal.KickoutVisitor.terminal_id)
  return _internal_terminal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KickoutVisitor::set_terminal_id(ArgT0&& arg0, ArgT... args) {
 
 terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Global.Protocol.Terminal.KickoutVisitor.terminal_id)
}
inline std::string* KickoutVisitor::mutable_terminal_id() {
  std::string* _s = _internal_mutable_terminal_id();
  // @@protoc_insertion_point(field_mutable:Global.Protocol.Terminal.KickoutVisitor.terminal_id)
  return _s;
}
inline const std::string& KickoutVisitor::_internal_terminal_id() const {
  return terminal_id_.Get();
}
inline void KickoutVisitor::_internal_set_terminal_id(const std::string& value) {
  
  terminal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KickoutVisitor::_internal_mutable_terminal_id() {
  
  return terminal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KickoutVisitor::release_terminal_id() {
  // @@protoc_insertion_point(field_release:Global.Protocol.Terminal.KickoutVisitor.terminal_id)
  return terminal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KickoutVisitor::set_allocated_terminal_id(std::string* terminal_id) {
  if (terminal_id != nullptr) {
    
  } else {
    
  }
  terminal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (terminal_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    terminal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Global.Protocol.Terminal.KickoutVisitor.terminal_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Terminal
}  // namespace Protocol
}  // namespace Global

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Terminal_2eproto
